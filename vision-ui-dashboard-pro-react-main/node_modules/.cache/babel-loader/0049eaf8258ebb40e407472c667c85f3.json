{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultInteractionRunner = void 0;\n/**\n * An interaction runner suitable for backends or wallets.\n * Not suitable for dapps, which depend on external signers (wallets, ledger etc.).\n */\n\nvar DefaultInteractionRunner = /*#__PURE__*/function () {\n  function DefaultInteractionRunner(checker, signer, provider) {\n    _classCallCheck(this, DefaultInteractionRunner);\n\n    this.checker = checker;\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   * Given an interaction, broadcasts its compiled transaction.\n   */\n\n\n  _createClass(DefaultInteractionRunner, [{\n    key: \"run\",\n    value: function run(interaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.checkInteraction(interaction);\n                transaction = interaction.buildTransaction();\n                _context.next = 4;\n                return this.signer.sign(transaction);\n\n              case 4:\n                _context.next = 6;\n                return transaction.send(this.provider);\n\n              case 6:\n                return _context.abrupt(\"return\", transaction);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Given an interaction, broadcasts its compiled transaction (and also waits for its execution on the Network).\n     */\n\n  }, {\n    key: \"runAwaitExecution\",\n    value: function runAwaitExecution(interaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var transaction, transactionOnNetwork, bundle;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.checkInteraction(interaction);\n                _context2.next = 3;\n                return this.run(interaction);\n\n              case 3:\n                transaction = _context2.sent;\n                _context2.next = 6;\n                return transaction.awaitExecuted(this.provider);\n\n              case 6:\n                _context2.next = 8;\n                return transaction.getAsOnNetwork(this.provider);\n\n              case 8:\n                transactionOnNetwork = _context2.sent;\n                bundle = interaction.interpretExecutionResults(transactionOnNetwork);\n                return _context2.abrupt(\"return\", bundle);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"runQuery\",\n    value: function runQuery(interaction, caller) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var query, response, bundle;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.checkInteraction(interaction);\n                query = interaction.buildQuery();\n                query.caller = caller || this.signer.getAddress();\n                _context3.next = 5;\n                return this.provider.queryContract(query);\n\n              case 5:\n                response = _context3.sent;\n                bundle = interaction.interpretQueryResponse(response);\n                return _context3.abrupt(\"return\", bundle);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"runSimulation\",\n    value: function runSimulation(interaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.checkInteraction(interaction);\n                transaction = interaction.buildTransaction();\n                _context4.next = 4;\n                return this.signer.sign(transaction);\n\n              case 4:\n                _context4.next = 6;\n                return transaction.simulate(this.provider);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"checkInteraction\",\n    value: function checkInteraction(interaction) {\n      this.checker.checkInteraction(interaction);\n    }\n  }]);\n\n  return DefaultInteractionRunner;\n}();\n\nexports.DefaultInteractionRunner = DefaultInteractionRunner;","map":{"version":3,"sources":["../../src/smartcontracts/defaultRunner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;AAGG;;IACU,wB;EAKT,kCAAY,OAAZ,EAA0C,MAA1C,EAA2D,QAA3D,EAA8E;IAAA;;IAC1E,KAAK,OAAL,GAAe,OAAf;IACA,KAAK,MAAL,GAAc,MAAd;IACA,KAAK,QAAL,GAAgB,QAAhB;EACH;EAED;;AAEG;;;;;WACG,aAAI,WAAJ,EAA4B;;;;;;;gBAC9B,KAAK,gBAAL,CAAsB,WAAtB;gBAEI,W,GAAc,WAAW,CAAC,gBAAZ,E;;gBAClB,OAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,WAAjB,CAAN;;;;gBACA,OAAM,WAAW,CAAC,IAAZ,CAAiB,KAAK,QAAtB,CAAN;;;iDACO,W;;;;;;;;;IACV;IAED;;AAEG;;;;WACG,2BAAkB,WAAlB,EAA0C;;;;;;;gBAC5C,KAAK,gBAAL,CAAsB,WAAtB;;gBAEkB,OAAM,KAAK,GAAL,CAAS,WAAT,CAAN;;;gBAAd,W;;gBACJ,OAAM,WAAW,CAAC,aAAZ,CAA0B,KAAK,QAA/B,CAAN;;;;gBAE2B,OAAM,WAAW,CAAC,cAAZ,CAA2B,KAAK,QAAhC,CAAN;;;gBAAvB,oB;gBACA,M,GAAS,WAAW,CAAC,yBAAZ,CAAsC,oBAAtC,C;kDACN,M;;;;;;;;;IACV;;;WAEK,kBAAS,WAAT,EAAmC,MAAnC,EAAmD;;;;;;;gBACrD,KAAK,gBAAL,CAAsB,WAAtB;gBAEI,K,GAAQ,WAAW,CAAC,UAAZ,E;gBACZ,KAAK,CAAC,MAAN,GAAe,MAAM,IAAI,KAAK,MAAL,CAAY,UAAZ,EAAzB;;gBACe,OAAM,KAAK,QAAL,CAAc,aAAd,CAA4B,KAA5B,CAAN;;;gBAAX,Q;gBACA,M,GAAS,WAAW,CAAC,sBAAZ,CAAmC,QAAnC,C;kDACN,M;;;;;;;;;IACV;;;WAEK,uBAAc,WAAd,EAAsC;;;;;;;gBACxC,KAAK,gBAAL,CAAsB,WAAtB;gBAEI,W,GAAc,WAAW,CAAC,gBAAZ,E;;gBAClB,OAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,WAAjB,CAAN;;;;gBACO,OAAM,WAAW,CAAC,QAAZ,CAAqB,KAAK,QAA1B,CAAN;;;;;;;;;;;;IACV;;;WAEO,0BAAiB,WAAjB,EAAyC;MAC7C,KAAK,OAAL,CAAa,gBAAb,CAA8B,WAA9B;IACH;;;;;;AAzDL,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultInteractionRunner = void 0;\n/**\n * An interaction runner suitable for backends or wallets.\n * Not suitable for dapps, which depend on external signers (wallets, ledger etc.).\n */\nclass DefaultInteractionRunner {\n    constructor(checker, signer, provider) {\n        this.checker = checker;\n        this.signer = signer;\n        this.provider = provider;\n    }\n    /**\n     * Given an interaction, broadcasts its compiled transaction.\n     */\n    run(interaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkInteraction(interaction);\n            let transaction = interaction.buildTransaction();\n            yield this.signer.sign(transaction);\n            yield transaction.send(this.provider);\n            return transaction;\n        });\n    }\n    /**\n     * Given an interaction, broadcasts its compiled transaction (and also waits for its execution on the Network).\n     */\n    runAwaitExecution(interaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkInteraction(interaction);\n            let transaction = yield this.run(interaction);\n            yield transaction.awaitExecuted(this.provider);\n            // This will wait until the transaction is notarized, as well (so that SCRs are returned by the API).\n            let transactionOnNetwork = yield transaction.getAsOnNetwork(this.provider);\n            let bundle = interaction.interpretExecutionResults(transactionOnNetwork);\n            return bundle;\n        });\n    }\n    runQuery(interaction, caller) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkInteraction(interaction);\n            let query = interaction.buildQuery();\n            query.caller = caller || this.signer.getAddress();\n            let response = yield this.provider.queryContract(query);\n            let bundle = interaction.interpretQueryResponse(response);\n            return bundle;\n        });\n    }\n    runSimulation(interaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkInteraction(interaction);\n            let transaction = interaction.buildTransaction();\n            yield this.signer.sign(transaction);\n            return yield transaction.simulate(this.provider);\n        });\n    }\n    checkInteraction(interaction) {\n        this.checker.checkInteraction(interaction);\n    }\n}\nexports.DefaultInteractionRunner = DefaultInteractionRunner;\n//# sourceMappingURL=defaultRunner.js.map"]},"metadata":{},"sourceType":"script"}