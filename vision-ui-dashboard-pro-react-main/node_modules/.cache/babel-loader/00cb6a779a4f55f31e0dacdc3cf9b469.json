{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\n\nclass NetworkStatus {\n  constructor() {\n    this.CurrentRound = 0;\n    this.EpochNumber = 0;\n    this.HighestFinalNonce = 0;\n    this.Nonce = 0;\n    this.NonceAtEpochStart = 0;\n    this.NoncesPassedInCurrentEpoch = 0;\n    this.RoundAtEpochStart = 0;\n    this.RoundsPassedInCurrentEpoch = 0;\n    this.RoundsPerEpoch = 0;\n  }\n  /**\n   * Gets the default network status object (think of the Singleton pattern).\n   */\n\n\n  static getDefault() {\n    if (!NetworkStatus.default) {\n      NetworkStatus.default = new NetworkStatus();\n    }\n\n    return NetworkStatus.default;\n  }\n  /**\n   * Synchronizes a configuration object by querying the node, through a {@link IProvider}.\n   * @param provider The provider to use\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let fresh = yield provider.getNetworkStatus();\n      Object.assign(this, fresh);\n    });\n  }\n  /**\n   * Constructs a configuration object from a HTTP response (as returned by the provider).\n   */\n\n\n  static fromHttpResponse(payload) {\n    let networkStatus = new NetworkStatus();\n    networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n    networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n    networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n    networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n    networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n    networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n    networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n    networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n    networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n    return networkStatus;\n  }\n\n}\n\nexports.NetworkStatus = NetworkStatus;","map":{"version":3,"sources":["../src/networkStatus.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEG;;AACH,MAAa,aAAb,CAA0B;EAgDtB,WAAA,GAAA;IACI,KAAK,YAAL,GAAoB,CAApB;IACA,KAAK,WAAL,GAAmB,CAAnB;IACA,KAAK,iBAAL,GAAyB,CAAzB;IACA,KAAK,KAAL,GAAa,CAAb;IACA,KAAK,iBAAL,GAAyB,CAAzB;IACA,KAAK,0BAAL,GAAkC,CAAlC;IACA,KAAK,iBAAL,GAAyB,CAAzB;IACA,KAAK,0BAAL,GAAkC,CAAlC;IACA,KAAK,cAAL,GAAsB,CAAtB;EACH;EAED;;AAEG;;;EACc,OAAV,UAAU,GAAA;IACb,IAAI,CAAC,aAAa,CAAC,OAAnB,EAA4B;MACxB,aAAa,CAAC,OAAd,GAAwB,IAAI,aAAJ,EAAxB;IACH;;IAED,OAAO,aAAa,CAAC,OAArB;EACH;EAED;;;AAGG;;;EACG,IAAI,CAAC,QAAD,EAAoB;;MAC1B,IAAI,KAAK,GAAkB,MAAM,QAAQ,CAAC,gBAAT,EAAjC;MACA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,KAApB;IACH,C;EAAA;EAED;;AAEG;;;EACoB,OAAhB,gBAAgB,CAAC,OAAD,EAAa;IAChC,IAAI,aAAa,GAAG,IAAI,aAAJ,EAApB;IAEA,aAAa,CAAC,YAAd,GAA6B,MAAM,CAAC,OAAO,CAAC,mBAAD,CAAR,CAAnC;IACA,aAAa,CAAC,WAAd,GAA4B,MAAM,CAAC,OAAO,CAAC,kBAAD,CAAR,CAAlC;IACA,aAAa,CAAC,iBAAd,GAAkC,MAAM,CAAC,OAAO,CAAC,yBAAD,CAAR,CAAxC;IACA,aAAa,CAAC,KAAd,GAAsB,MAAM,CAAC,OAAO,CAAC,WAAD,CAAR,CAA5B;IACA,aAAa,CAAC,iBAAd,GAAkC,MAAM,CAAC,OAAO,CAAC,0BAAD,CAAR,CAAxC;IACA,aAAa,CAAC,0BAAd,GAA2C,MAAM,CAAC,OAAO,CAAC,oCAAD,CAAR,CAAjD;IACA,aAAa,CAAC,iBAAd,GAAkC,MAAM,CAAC,OAAO,CAAC,0BAAD,CAAR,CAAxC;IACA,aAAa,CAAC,0BAAd,GAA2C,MAAM,CAAC,OAAO,CAAC,oCAAD,CAAR,CAAjD;IACA,aAAa,CAAC,cAAd,GAA+B,MAAM,CAAC,OAAO,CAAC,sBAAD,CAAR,CAArC;IAEA,OAAO,aAAP;EACH;;AAjGqB;;AAA1B,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\nclass NetworkStatus {\n    constructor() {\n        this.CurrentRound = 0;\n        this.EpochNumber = 0;\n        this.HighestFinalNonce = 0;\n        this.Nonce = 0;\n        this.NonceAtEpochStart = 0;\n        this.NoncesPassedInCurrentEpoch = 0;\n        this.RoundAtEpochStart = 0;\n        this.RoundsPassedInCurrentEpoch = 0;\n        this.RoundsPerEpoch = 0;\n    }\n    /**\n     * Gets the default network status object (think of the Singleton pattern).\n     */\n    static getDefault() {\n        if (!NetworkStatus.default) {\n            NetworkStatus.default = new NetworkStatus();\n        }\n        return NetworkStatus.default;\n    }\n    /**\n     * Synchronizes a configuration object by querying the node, through a {@link IProvider}.\n     * @param provider The provider to use\n     */\n    sync(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let fresh = yield provider.getNetworkStatus();\n            Object.assign(this, fresh);\n        });\n    }\n    /**\n     * Constructs a configuration object from a HTTP response (as returned by the provider).\n     */\n    static fromHttpResponse(payload) {\n        let networkStatus = new NetworkStatus();\n        networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n        networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n        networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n        networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n        networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n        networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n        networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n        networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n        networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n        return networkStatus;\n    }\n}\nexports.NetworkStatus = NetworkStatus;\n//# sourceMappingURL=networkStatus.js.map"]},"metadata":{},"sourceType":"script"}