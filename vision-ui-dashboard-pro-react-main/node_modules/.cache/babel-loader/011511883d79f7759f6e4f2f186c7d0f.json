{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n\nconst bech32 = __importStar(require(\"bech32\"));\n\nconst errors = __importStar(require(\"./errors\"));\n/**\n * The human-readable-part of the bech32 addresses.\n */\n\n\nconst HRP = \"erd\";\n/**\n * The length (in bytes) of a public key (from which a bech32 address can be obtained).\n */\n\nconst PUBKEY_LENGTH = 32;\nconst SMART_CONTRACT_HEX_PUBKEY_PREFIX = \"0\".repeat(16);\n/**\n * An Elrond Address, as an immutable object.\n */\n\nclass Address {\n  /**\n   * Creates an address object, given a raw string (whether a hex pubkey or a Bech32 address), a sequence of bytes, or another Address object.\n   */\n  constructor(value) {\n    // We keep a hex-encoded string as the \"backing\" value\n    this.valueHex = \"\";\n\n    if (!value) {\n      return;\n    }\n\n    if (value instanceof Address) {\n      return Address.fromAddress(value);\n    }\n\n    if (value instanceof Buffer) {\n      return Address.fromBuffer(value);\n    }\n\n    if (typeof value === \"string\") {\n      return Address.fromString(value);\n    }\n\n    throw new errors.ErrAddressCannotCreate(value);\n  }\n  /**\n   * Creates an address object from another address object\n   */\n\n\n  static fromAddress(address) {\n    return Address.fromValidHex(address.valueHex);\n  }\n\n  static fromValidHex(value) {\n    let result = new Address();\n    result.valueHex = value;\n    return result;\n  }\n  /**\n   * Creates an address object from a Buffer\n   */\n\n\n  static fromBuffer(buffer) {\n    if (buffer.length != PUBKEY_LENGTH) {\n      throw new errors.ErrAddressCannotCreate(buffer);\n    }\n\n    return Address.fromValidHex(buffer.toString(\"hex\"));\n  }\n  /**\n   * Creates an address object from a string (hex or bech32)\n   */\n\n\n  static fromString(value) {\n    if (Address.isValidHex(value)) {\n      return Address.fromValidHex(value);\n    }\n\n    return Address.fromBech32(value);\n  }\n\n  static isValidHex(value) {\n    return Buffer.from(value, \"hex\").length == PUBKEY_LENGTH;\n  }\n  /**\n   * Creates an address object from a hex-encoded string\n   */\n\n\n  static fromHex(value) {\n    if (!Address.isValidHex(value)) {\n      throw new errors.ErrAddressCannotCreate(value);\n    }\n\n    return Address.fromValidHex(value);\n  }\n  /**\n   * Creates an address object from a bech32-encoded string\n   */\n\n\n  static fromBech32(value) {\n    let decoded;\n\n    try {\n      decoded = bech32.decode(value);\n    } catch (err) {\n      throw new errors.ErrAddressCannotCreate(value, err);\n    }\n\n    let prefix = decoded.prefix;\n\n    if (prefix != HRP) {\n      throw new errors.ErrAddressBadHrp(HRP, prefix);\n    }\n\n    let pubkey = Buffer.from(bech32.fromWords(decoded.words));\n\n    if (pubkey.length != PUBKEY_LENGTH) {\n      throw new errors.ErrAddressCannotCreate(value);\n    }\n\n    return Address.fromValidHex(pubkey.toString(\"hex\"));\n  }\n  /**\n   * Returns the hex representation of the address (pubkey)\n   */\n\n\n  hex() {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n\n    return this.valueHex;\n  }\n  /**\n   * Returns the bech32 representation of the address\n   */\n\n\n  bech32() {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n\n    let words = bech32.toWords(this.pubkey());\n    let address = bech32.encode(HRP, words);\n    return address;\n  }\n  /**\n   * Returns the pubkey as raw bytes (buffer)\n   */\n\n\n  pubkey() {\n    if (this.isEmpty()) {\n      return Buffer.from([]);\n    }\n\n    return Buffer.from(this.valueHex, \"hex\");\n  }\n  /**\n   * Throws an error if the address is empty.\n   */\n\n\n  assertNotEmpty() {\n    if (this.isEmpty()) {\n      throw new errors.ErrAddressEmpty();\n    }\n  }\n  /**\n   * Returns whether the address is empty.\n   */\n\n\n  isEmpty() {\n    return !this.valueHex;\n  }\n  /**\n   * Compares the address to another address\n   */\n\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.valueHex == other.valueHex;\n  }\n  /**\n   * Returns the bech32 representation of the address\n   */\n\n\n  toString() {\n    return this.bech32();\n  }\n  /**\n   * Converts the address to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      bech32: this.bech32(),\n      pubkey: this.hex()\n    };\n  }\n  /**\n   * Creates the Zero address (the one that should be used when deploying smart contracts)\n   */\n\n\n  static Zero() {\n    return new Address(\"0\".repeat(64));\n  }\n\n  isContractAddress() {\n    return this.hex().startsWith(SMART_CONTRACT_HEX_PUBKEY_PREFIX);\n  }\n\n}\n\nexports.Address = Address;","map":{"version":3,"sources":["../src/address.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nconst errors = __importStar(require(\"./errors\"));\n/**\n * The human-readable-part of the bech32 addresses.\n */\nconst HRP = \"erd\";\n/**\n * The length (in bytes) of a public key (from which a bech32 address can be obtained).\n */\nconst PUBKEY_LENGTH = 32;\nconst SMART_CONTRACT_HEX_PUBKEY_PREFIX = \"0\".repeat(16);\n/**\n * An Elrond Address, as an immutable object.\n */\nclass Address {\n    /**\n     * Creates an address object, given a raw string (whether a hex pubkey or a Bech32 address), a sequence of bytes, or another Address object.\n     */\n    constructor(value) {\n        // We keep a hex-encoded string as the \"backing\" value\n        this.valueHex = \"\";\n        if (!value) {\n            return;\n        }\n        if (value instanceof Address) {\n            return Address.fromAddress(value);\n        }\n        if (value instanceof Buffer) {\n            return Address.fromBuffer(value);\n        }\n        if (typeof value === \"string\") {\n            return Address.fromString(value);\n        }\n        throw new errors.ErrAddressCannotCreate(value);\n    }\n    /**\n     * Creates an address object from another address object\n     */\n    static fromAddress(address) {\n        return Address.fromValidHex(address.valueHex);\n    }\n    static fromValidHex(value) {\n        let result = new Address();\n        result.valueHex = value;\n        return result;\n    }\n    /**\n     * Creates an address object from a Buffer\n     */\n    static fromBuffer(buffer) {\n        if (buffer.length != PUBKEY_LENGTH) {\n            throw new errors.ErrAddressCannotCreate(buffer);\n        }\n        return Address.fromValidHex(buffer.toString(\"hex\"));\n    }\n    /**\n     * Creates an address object from a string (hex or bech32)\n     */\n    static fromString(value) {\n        if (Address.isValidHex(value)) {\n            return Address.fromValidHex(value);\n        }\n        return Address.fromBech32(value);\n    }\n    static isValidHex(value) {\n        return Buffer.from(value, \"hex\").length == PUBKEY_LENGTH;\n    }\n    /**\n     * Creates an address object from a hex-encoded string\n     */\n    static fromHex(value) {\n        if (!Address.isValidHex(value)) {\n            throw new errors.ErrAddressCannotCreate(value);\n        }\n        return Address.fromValidHex(value);\n    }\n    /**\n     * Creates an address object from a bech32-encoded string\n     */\n    static fromBech32(value) {\n        let decoded;\n        try {\n            decoded = bech32.decode(value);\n        }\n        catch (err) {\n            throw new errors.ErrAddressCannotCreate(value, err);\n        }\n        let prefix = decoded.prefix;\n        if (prefix != HRP) {\n            throw new errors.ErrAddressBadHrp(HRP, prefix);\n        }\n        let pubkey = Buffer.from(bech32.fromWords(decoded.words));\n        if (pubkey.length != PUBKEY_LENGTH) {\n            throw new errors.ErrAddressCannotCreate(value);\n        }\n        return Address.fromValidHex(pubkey.toString(\"hex\"));\n    }\n    /**\n     * Returns the hex representation of the address (pubkey)\n     */\n    hex() {\n        if (this.isEmpty()) {\n            return \"\";\n        }\n        return this.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n    bech32() {\n        if (this.isEmpty()) {\n            return \"\";\n        }\n        let words = bech32.toWords(this.pubkey());\n        let address = bech32.encode(HRP, words);\n        return address;\n    }\n    /**\n     * Returns the pubkey as raw bytes (buffer)\n     */\n    pubkey() {\n        if (this.isEmpty()) {\n            return Buffer.from([]);\n        }\n        return Buffer.from(this.valueHex, \"hex\");\n    }\n    /**\n     * Throws an error if the address is empty.\n     */\n    assertNotEmpty() {\n        if (this.isEmpty()) {\n            throw new errors.ErrAddressEmpty();\n        }\n    }\n    /**\n     * Returns whether the address is empty.\n     */\n    isEmpty() {\n        return !this.valueHex;\n    }\n    /**\n     * Compares the address to another address\n     */\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        return this.valueHex == other.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n    toString() {\n        return this.bech32();\n    }\n    /**\n     * Converts the address to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            bech32: this.bech32(),\n            pubkey: this.hex()\n        };\n    }\n    /**\n     * Creates the Zero address (the one that should be used when deploying smart contracts)\n     */\n    static Zero() {\n        return new Address(\"0\".repeat(64));\n    }\n    isContractAddress() {\n        return this.hex().startsWith(SMART_CONTRACT_HEX_PUBKEY_PREFIX);\n    }\n}\nexports.Address = Address;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}