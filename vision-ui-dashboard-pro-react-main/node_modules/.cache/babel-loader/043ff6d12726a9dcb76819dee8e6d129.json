{"ast":null,"code":"var _jsxFileName = \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/src/examples/Globe/index.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-console */\n\n/** \n\n=========================================================\n* Vision UI PRO React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/vision-ui-dashboard-pro-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com/)\n\n* Design and Coded by Simmmple & Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Visionware.\n\n*/\nimport { useEffect, useRef } from \"react\"; // prop-types is a library for typechecking of props\n\nimport PropTypes from \"prop-types\"; // threejs components\n\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"@three-ts/orbit-controls\";\nimport VuiBox from \"components/VuiBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Globe(_ref) {\n  _s();\n\n  let {\n    canvasStyle,\n    ...rest\n  } = _ref;\n  const globeRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    function createGlobe() {\n      const container = globeRef.current;\n      const canvas = canvasRef.current;\n      const globeRadius = 100;\n      const globeWidth = 4098 / 2;\n      const globeHeight = 1968 / 2;\n\n      function convertFlatCoordsToSphereCoords(x, y) {\n        let latitude = (x - globeWidth) / globeWidth * -180;\n        let longitude = (y - globeHeight) / globeHeight * -90;\n        latitude = latitude * Math.PI / 180;\n        longitude = longitude * Math.PI / 180;\n        const radius = Math.cos(longitude) * globeRadius;\n        return {\n          x: Math.cos(latitude) * radius,\n          y: Math.sin(longitude) * globeRadius,\n          z: Math.sin(latitude) * radius\n        };\n      }\n\n      function makeMagic(points) {\n        const {\n          width,\n          height\n        } = container.getBoundingClientRect(); // 1. Setup scene\n\n        const scene = new THREE.Scene(); // 2. Setup camera\n\n        const camera = new THREE.PerspectiveCamera(45, width / height); // 3. Setup renderer\n\n        const renderer = new THREE.WebGLRenderer({\n          canvas,\n          antialias: true\n        });\n        renderer.setSize(width, height); // 4. Add points to canvas\n        // - Single geometry to contain all points.\n\n        const mergedGeometry = new THREE.Geometry(); // - Material that the dots will be made of.\n\n        const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);\n        const pointMaterial = new THREE.MeshBasicMaterial({\n          color: \"#3993fe\"\n        }); // eslint-disable-next-line no-restricted-syntax\n\n        for (const point of points) {\n          const {\n            x,\n            y,\n            z\n          } = convertFlatCoordsToSphereCoords(point.x, point.y, width, height);\n\n          if (x && y && z) {\n            pointGeometry.translate(x, y, z);\n            mergedGeometry.merge(pointGeometry);\n            pointGeometry.translate(-x, -y, -z);\n          }\n        }\n\n        const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);\n        scene.add(globeShape);\n        container.classList.add(\"peekaboo\"); // Setup orbital controls\n\n        camera.orbitControls = new OrbitControls(camera, canvas);\n        camera.orbitControls.enableKeys = false;\n        camera.orbitControls.enablePan = false;\n        camera.orbitControls.enableZoom = false;\n        camera.orbitControls.enableDamping = false;\n        camera.orbitControls.enableRotate = true;\n        camera.orbitControls.autoRotate = true;\n        camera.position.z = -265;\n\n        function animate() {\n          // orbitControls.autoRotate is enabled so orbitControls.update\n          // must be called inside animation loop.\n          camera.orbitControls.update();\n          requestAnimationFrame(animate);\n          renderer.render(scene, camera);\n        }\n\n        animate();\n      }\n\n      function hasWebGL() {\n        const gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n\n        if (gl && gl instanceof WebGLRenderingContext) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function init() {\n        if (hasWebGL()) {\n          window.fetch(\"https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json\").then(response => response.json()).then(data => makeMagic(data.points));\n        }\n      }\n\n      return navigator.onLine ? init() : console.error(\"Globe component can't load its data, please make sure that you're connected to the internet.\");\n    }\n\n    createGlobe();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(VuiBox, {\n    ref: globeRef,\n    ...rest,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"700\",\n      height: \"600\",\n      style: {\n        outline: \"none\",\n        ...canvasStyle\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props for Globe\n\n\n_s(Globe, \"w28R6zAG0V3ZojU/hAJPwpDV9ko=\");\n\n_c = Globe;\nGlobe.defaultProps = {\n  canvasStyle: {}\n}; // Typechecking props for the Globe\n\nGlobe.propTypes = {\n  canvasStyle: PropTypes.objectOf(PropTypes.any)\n};\nexport default Globe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["useEffect","useRef","PropTypes","THREE","OrbitControls","VuiBox","Globe","canvasStyle","rest","globeRef","canvasRef","createGlobe","container","current","canvas","globeRadius","globeWidth","globeHeight","convertFlatCoordsToSphereCoords","x","y","latitude","longitude","Math","PI","radius","cos","sin","z","makeMagic","points","width","height","getBoundingClientRect","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","setSize","mergedGeometry","Geometry","pointGeometry","SphereGeometry","pointMaterial","MeshBasicMaterial","color","point","translate","merge","globeShape","Mesh","add","classList","orbitControls","enableKeys","enablePan","enableZoom","enableDamping","enableRotate","autoRotate","position","animate","update","requestAnimationFrame","render","hasWebGL","gl","getContext","WebGLRenderingContext","init","window","fetch","then","response","json","data","navigator","onLine","console","error","outline","defaultProps","propTypes","objectOf","any"],"sources":["/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/src/examples/Globe/index.js"],"sourcesContent":["/* eslint-disable no-console */\n/** \n\n=========================================================\n* Vision UI PRO React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/vision-ui-dashboard-pro-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com/)\n\n* Design and Coded by Simmmple & Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Visionware.\n\n*/\n\nimport { useEffect, useRef } from \"react\";\n\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// threejs components\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"@three-ts/orbit-controls\";\n\nimport VuiBox from \"components/VuiBox\";\n\nfunction Globe({ canvasStyle, ...rest }) {\n  const globeRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    function createGlobe() {\n      const container = globeRef.current;\n      const canvas = canvasRef.current;\n\n      const globeRadius = 100;\n      const globeWidth = 4098 / 2;\n      const globeHeight = 1968 / 2;\n\n      function convertFlatCoordsToSphereCoords(x, y) {\n        let latitude = ((x - globeWidth) / globeWidth) * -180;\n        let longitude = ((y - globeHeight) / globeHeight) * -90;\n        latitude = (latitude * Math.PI) / 180;\n        longitude = (longitude * Math.PI) / 180;\n        const radius = Math.cos(longitude) * globeRadius;\n\n        return {\n          x: Math.cos(latitude) * radius,\n          y: Math.sin(longitude) * globeRadius,\n          z: Math.sin(latitude) * radius,\n        };\n      }\n\n      function makeMagic(points) {\n        const { width, height } = container.getBoundingClientRect();\n\n        // 1. Setup scene\n        const scene = new THREE.Scene();\n        // 2. Setup camera\n        const camera = new THREE.PerspectiveCamera(45, width / height);\n        // 3. Setup renderer\n        const renderer = new THREE.WebGLRenderer({\n          canvas,\n          antialias: true,\n        });\n        renderer.setSize(width, height);\n        // 4. Add points to canvas\n        // - Single geometry to contain all points.\n        const mergedGeometry = new THREE.Geometry();\n        // - Material that the dots will be made of.\n        const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);\n        const pointMaterial = new THREE.MeshBasicMaterial({\n          color: \"#3993fe\",\n        });\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const point of points) {\n          const { x, y, z } = convertFlatCoordsToSphereCoords(point.x, point.y, width, height);\n\n          if (x && y && z) {\n            pointGeometry.translate(x, y, z);\n            mergedGeometry.merge(pointGeometry);\n            pointGeometry.translate(-x, -y, -z);\n          }\n        }\n\n        const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);\n        scene.add(globeShape);\n\n        container.classList.add(\"peekaboo\");\n\n        // Setup orbital controls\n        camera.orbitControls = new OrbitControls(camera, canvas);\n        camera.orbitControls.enableKeys = false;\n        camera.orbitControls.enablePan = false;\n        camera.orbitControls.enableZoom = false;\n        camera.orbitControls.enableDamping = false;\n        camera.orbitControls.enableRotate = true;\n        camera.orbitControls.autoRotate = true;\n        camera.position.z = -265;\n\n        function animate() {\n          // orbitControls.autoRotate is enabled so orbitControls.update\n          // must be called inside animation loop.\n          camera.orbitControls.update();\n          requestAnimationFrame(animate);\n          renderer.render(scene, camera);\n        }\n        animate();\n      }\n\n      function hasWebGL() {\n        const gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n        if (gl && gl instanceof WebGLRenderingContext) {\n          return true;\n        }\n        return false;\n      }\n\n      function init() {\n        if (hasWebGL()) {\n          window\n            .fetch(\n              \"https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json\"\n            )\n            .then((response) => response.json())\n            .then((data) => makeMagic(data.points));\n        }\n      }\n\n      return navigator.onLine\n        ? init()\n        : console.error(\n            \"Globe component can't load its data, please make sure that you're connected to the internet.\"\n          );\n    }\n\n    createGlobe();\n  }, []);\n\n  return (\n    <VuiBox ref={globeRef} {...rest}>\n      <canvas\n        ref={canvasRef}\n        width=\"700\"\n        height=\"600\"\n        style={{ outline: \"none\", ...canvasStyle }}\n      />\n    </VuiBox>\n  );\n}\n\n// Setting default values for the props for Globe\nGlobe.defaultProps = {\n  canvasStyle: {},\n};\n\n// Typechecking props for the Globe\nGlobe.propTypes = {\n  canvasStyle: PropTypes.objectOf(PropTypes.any),\n};\n\nexport default Globe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}