{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _inherits = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionalValue = exports.OptionalType = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar types_1 = require(\"./types\");\n/**\n * An optional is an algebraic type. It holds zero or one values.\n */\n\n\nvar OptionalType = /*#__PURE__*/function (_types_1$Type) {\n  _inherits(OptionalType, _types_1$Type);\n\n  var _super = _createSuper(OptionalType);\n\n  function OptionalType(typeParameter) {\n    _classCallCheck(this, OptionalType);\n\n    return _super.call(this, \"Optional\", [typeParameter], types_1.TypeCardinality.variable(1));\n  }\n\n  return _createClass(OptionalType);\n}(types_1.Type);\n\nexports.OptionalType = OptionalType;\n\nvar OptionalValue = /*#__PURE__*/function (_types_1$TypedValue) {\n  _inherits(OptionalValue, _types_1$TypedValue);\n\n  var _super2 = _createSuper(OptionalValue);\n\n  function OptionalValue(type) {\n    var _this;\n\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, OptionalValue);\n\n    _this = _super2.call(this, type); // TODO: assert value is of type type.getFirstTypeParameter()\n\n    _this.value = value;\n    return _this;\n  }\n\n  _createClass(OptionalValue, [{\n    key: \"isSet\",\n    value: function isSet() {\n      return this.value ? true : false;\n    }\n  }, {\n    key: \"getTypedValue\",\n    value: function getTypedValue() {\n      utils_1.guardValueIsSet(\"value\", this.value);\n      return this.value;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value ? this.value.valueOf() : null;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      var _a;\n\n      return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n    }\n  }]);\n\n  return OptionalValue;\n}(types_1.TypedValue);\n\nexports.OptionalValue = OptionalValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/algebraic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;AAEG;;;IACU,Y;;;;;EACT,sBAAY,aAAZ,EAA+B;IAAA;;IAAA,yBACrB,UADqB,EACT,CAAC,aAAD,CADS,EACQ,OAAA,CAAA,eAAA,CAAgB,QAAhB,CAAyB,CAAzB,CADR;EAE9B;;;EAH6B,OAAA,CAAA,I;;AAAlC,OAAA,CAAA,YAAA,GAAA,YAAA;;IAMa,a;;;;;EAGT,uBAAY,IAAZ,EAA+D;IAAA;;IAAA,IAA/B,KAA+B,uEAAJ,IAAI;;IAAA;;IAC3D,2BAAM,IAAN,EAD2D,CAG3D;;IAEA,MAAK,KAAL,GAAa,KAAb;IAL2D;EAM9D;;;;WAED,iBAAK;MACD,OAAO,KAAK,KAAL,GAAa,IAAb,GAAoB,KAA3B;IACH;;;WAED,yBAAa;MACT,OAAA,CAAA,eAAA,CAAgB,OAAhB,EAAyB,KAAK,KAA9B;MACA,OAAO,KAAK,KAAZ;IACH;;;WAED,mBAAO;MACH,OAAO,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,OAAX,EAAb,GAAoC,IAA3C;IACH;;;WAED,gBAAO,KAAP,EAA2B;;;MACvB,OAAO,CAAA,CAAA,EAAA,GAAA,KAAK,KAAL,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,MAAF,CAAS,KAAK,CAAC,KAAf,CAAV,KAAmC,KAA1C;IACH;;;;EA1B8B,OAAA,CAAA,U;;AAAnC,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionalValue = exports.OptionalType = void 0;\nconst utils_1 = require(\"../../utils\");\nconst types_1 = require(\"./types\");\n/**\n * An optional is an algebraic type. It holds zero or one values.\n */\nclass OptionalType extends types_1.Type {\n    constructor(typeParameter) {\n        super(\"Optional\", [typeParameter], types_1.TypeCardinality.variable(1));\n    }\n}\nexports.OptionalType = OptionalType;\nclass OptionalValue extends types_1.TypedValue {\n    constructor(type, value = null) {\n        super(type);\n        // TODO: assert value is of type type.getFirstTypeParameter()\n        this.value = value;\n    }\n    isSet() {\n        return this.value ? true : false;\n    }\n    getTypedValue() {\n        utils_1.guardValueIsSet(\"value\", this.value);\n        return this.value;\n    }\n    valueOf() {\n        return this.value ? this.value.valueOf() : null;\n    }\n    equals(other) {\n        var _a;\n        return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n    }\n}\nexports.OptionalValue = OptionalValue;\n//# sourceMappingURL=algebraic.js.map"]},"metadata":{},"sourceType":"script"}