{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserWallet = void 0;\n\nconst userKeys_1 = require(\"./userKeys\");\n\nconst crypto_1 = require(\"../crypto\");\n\nconst derivationParams_1 = require(\"../crypto/derivationParams\");\n\nclass UserWallet {\n  /**\n   * Copied from: https://github.com/ElrondNetwork/elrond-core-js/blob/v1.28.0/src/account.js#L76\n   * Notes: adjustements (code refactoring, no change in logic), in terms of:\n   *  - typing (since this is the TypeScript version)\n   *  - error handling (in line with erdjs's error system)\n   *  - references to crypto functions\n   *  - references to object members\n   *\n   * Given a password, generates the contents for a file containing the account's secret key,\n   * passed through a password-based key derivation function (kdf).\n   */\n  constructor(secretKey, password) {\n    let randomness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new crypto_1.Randomness();\n    const text = Buffer.concat([secretKey.valueOf(), secretKey.generatePublicKey().valueOf()]);\n    this.encryptedData = crypto_1.Encryptor.encrypt(text, password, randomness);\n    this.publicKey = secretKey.generatePublicKey();\n  }\n  /**\n   * Copied from: https://github.com/ElrondNetwork/elrond-core-js/blob/v1.28.0/src/account.js#L42\n   * Notes: adjustements (code refactoring, no change in logic), in terms of:\n   *  - typing (since this is the TypeScript version)\n   *  - error handling (in line with erdjs's error system)\n   *  - references to crypto functions\n   *  - references to object members\n   *\n   * From an encrypted keyfile, given the password, loads the secret key and the public key.\n   */\n\n\n  static decryptSecretKey(keyFileObject, password) {\n    const encryptedData = UserWallet.edFromJSON(keyFileObject);\n    let text = crypto_1.Decryptor.decrypt(encryptedData, password);\n\n    while (text.length < 32) {\n      let zeroPadding = Buffer.from([0x00]);\n      text = Buffer.concat([zeroPadding, text]);\n    }\n\n    let seed = text.slice(0, 32);\n    return new userKeys_1.UserSecretKey(seed);\n  }\n\n  static edFromJSON(keyfileObject) {\n    return new crypto_1.EncryptedData({\n      version: crypto_1.Version,\n      id: keyfileObject.id,\n      cipher: keyfileObject.crypto.cipher,\n      ciphertext: keyfileObject.crypto.ciphertext,\n      iv: keyfileObject.crypto.cipherparams.iv,\n      kdf: keyfileObject.crypto.kdf,\n      kdfparams: new derivationParams_1.ScryptKeyDerivationParams(keyfileObject.crypto.kdfparams.n, keyfileObject.crypto.kdfparams.r, keyfileObject.crypto.kdfparams.p, keyfileObject.crypto.kdfparams.dklen),\n      salt: keyfileObject.crypto.kdfparams.salt,\n      mac: keyfileObject.crypto.mac\n    });\n  }\n  /**\n   * Converts the encrypted keyfile to plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      version: crypto_1.Version,\n      id: this.encryptedData.id,\n      address: this.publicKey.hex(),\n      bech32: this.publicKey.toAddress().toString(),\n      crypto: {\n        ciphertext: this.encryptedData.ciphertext,\n        cipherparams: {\n          iv: this.encryptedData.iv\n        },\n        cipher: crypto_1.CipherAlgorithm,\n        kdf: crypto_1.KeyDerivationFunction,\n        kdfparams: {\n          dklen: this.encryptedData.kdfparams.dklen,\n          salt: this.encryptedData.salt,\n          n: this.encryptedData.kdfparams.n,\n          r: this.encryptedData.kdfparams.r,\n          p: this.encryptedData.kdfparams.p\n        },\n        mac: this.encryptedData.mac\n      }\n    };\n  }\n\n}\n\nexports.UserWallet = UserWallet;","map":{"version":3,"sources":["../../src/walletcore/userWallet.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAEA,MAAa,UAAb,CAAuB;EAInB;;;;;;;;;;AAUG;EACH,WAAA,CAAY,SAAZ,EAAsC,QAAtC,EAAiG;IAAA,IAAzC,UAAyC,uEAAhB,IAAI,QAAA,CAAA,UAAJ,EAAgB;IAC7F,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,SAAS,CAAC,OAAV,EAAD,EAAsB,SAAS,CAAC,iBAAV,GAA8B,OAA9B,EAAtB,CAAd,CAAb;IACA,KAAK,aAAL,GAAqB,QAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC,UAAlC,CAArB;IACA,KAAK,SAAL,GAAiB,SAAS,CAAC,iBAAV,EAAjB;EACH;EAED;;;;;;;;;AASG;;;EACoB,OAAhB,gBAAgB,CAAC,aAAD,EAAqB,QAArB,EAAqC;IACxD,MAAM,aAAa,GAAG,UAAU,CAAC,UAAX,CAAsB,aAAtB,CAAtB;IAEA,IAAI,IAAI,GAAG,QAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,aAAlB,EAAiC,QAAjC,CAAX;;IACA,OAAO,IAAI,CAAC,MAAL,GAAc,EAArB,EAAyB;MACrB,IAAI,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAlB;MACA,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,WAAD,EAAc,IAAd,CAAd,CAAP;IACH;;IAED,IAAI,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,EAAd,CAAX;IACA,OAAO,IAAI,UAAA,CAAA,aAAJ,CAAkB,IAAlB,CAAP;EACH;;EAEgB,OAAV,UAAU,CAAC,aAAD,EAAmB;IAChC,OAAO,IAAI,QAAA,CAAA,aAAJ,CAAkB;MACrB,OAAO,EAAE,QAAA,CAAA,OADY;MAErB,EAAE,EAAE,aAAa,CAAC,EAFG;MAGrB,MAAM,EAAE,aAAa,CAAC,MAAd,CAAqB,MAHR;MAIrB,UAAU,EAAE,aAAa,CAAC,MAAd,CAAqB,UAJZ;MAKrB,EAAE,EAAE,aAAa,CAAC,MAAd,CAAqB,YAArB,CAAkC,EALjB;MAMrB,GAAG,EAAE,aAAa,CAAC,MAAd,CAAqB,GANL;MAOrB,SAAS,EAAE,IAAI,kBAAA,CAAA,yBAAJ,CACT,aAAa,CAAC,MAAd,CAAqB,SAArB,CAA+B,CADtB,EAET,aAAa,CAAC,MAAd,CAAqB,SAArB,CAA+B,CAFtB,EAGT,aAAa,CAAC,MAAd,CAAqB,SAArB,CAA+B,CAHtB,EAIT,aAAa,CAAC,MAAd,CAAqB,SAArB,CAA+B,KAJtB,CAPU;MAarB,IAAI,EAAE,aAAa,CAAC,MAAd,CAAqB,SAArB,CAA+B,IAbhB;MAcrB,GAAG,EAAE,aAAa,CAAC,MAAd,CAAqB;IAdL,CAAlB,CAAP;EAgBH;EAED;;AAEG;;;EACH,MAAM,GAAA;IACF,OAAO;MACH,OAAO,EAAE,QAAA,CAAA,OADN;MAEH,EAAE,EAAE,KAAK,aAAL,CAAmB,EAFpB;MAGH,OAAO,EAAE,KAAK,SAAL,CAAe,GAAf,EAHN;MAIH,MAAM,EAAE,KAAK,SAAL,CAAe,SAAf,GAA2B,QAA3B,EAJL;MAKH,MAAM,EAAE;QACJ,UAAU,EAAE,KAAK,aAAL,CAAmB,UAD3B;QAEJ,YAAY,EAAE;UAAE,EAAE,EAAE,KAAK,aAAL,CAAmB;QAAzB,CAFV;QAGJ,MAAM,EAAE,QAAA,CAAA,eAHJ;QAIJ,GAAG,EAAE,QAAA,CAAA,qBAJD;QAKJ,SAAS,EAAE;UACP,KAAK,EAAE,KAAK,aAAL,CAAmB,SAAnB,CAA6B,KAD7B;UAEP,IAAI,EAAE,KAAK,aAAL,CAAmB,IAFlB;UAGP,CAAC,EAAE,KAAK,aAAL,CAAmB,SAAnB,CAA6B,CAHzB;UAIP,CAAC,EAAE,KAAK,aAAL,CAAmB,SAAnB,CAA6B,CAJzB;UAKP,CAAC,EAAE,KAAK,aAAL,CAAmB,SAAnB,CAA6B;QALzB,CALP;QAYJ,GAAG,EAAE,KAAK,aAAL,CAAmB;MAZpB;IALL,CAAP;EAoBH;;AAvFkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserWallet = void 0;\nconst userKeys_1 = require(\"./userKeys\");\nconst crypto_1 = require(\"../crypto\");\nconst derivationParams_1 = require(\"../crypto/derivationParams\");\nclass UserWallet {\n    /**\n     * Copied from: https://github.com/ElrondNetwork/elrond-core-js/blob/v1.28.0/src/account.js#L76\n     * Notes: adjustements (code refactoring, no change in logic), in terms of:\n     *  - typing (since this is the TypeScript version)\n     *  - error handling (in line with erdjs's error system)\n     *  - references to crypto functions\n     *  - references to object members\n     *\n     * Given a password, generates the contents for a file containing the account's secret key,\n     * passed through a password-based key derivation function (kdf).\n     */\n    constructor(secretKey, password, randomness = new crypto_1.Randomness()) {\n        const text = Buffer.concat([secretKey.valueOf(), secretKey.generatePublicKey().valueOf()]);\n        this.encryptedData = crypto_1.Encryptor.encrypt(text, password, randomness);\n        this.publicKey = secretKey.generatePublicKey();\n    }\n    /**\n     * Copied from: https://github.com/ElrondNetwork/elrond-core-js/blob/v1.28.0/src/account.js#L42\n     * Notes: adjustements (code refactoring, no change in logic), in terms of:\n     *  - typing (since this is the TypeScript version)\n     *  - error handling (in line with erdjs's error system)\n     *  - references to crypto functions\n     *  - references to object members\n     *\n     * From an encrypted keyfile, given the password, loads the secret key and the public key.\n     */\n    static decryptSecretKey(keyFileObject, password) {\n        const encryptedData = UserWallet.edFromJSON(keyFileObject);\n        let text = crypto_1.Decryptor.decrypt(encryptedData, password);\n        while (text.length < 32) {\n            let zeroPadding = Buffer.from([0x00]);\n            text = Buffer.concat([zeroPadding, text]);\n        }\n        let seed = text.slice(0, 32);\n        return new userKeys_1.UserSecretKey(seed);\n    }\n    static edFromJSON(keyfileObject) {\n        return new crypto_1.EncryptedData({\n            version: crypto_1.Version,\n            id: keyfileObject.id,\n            cipher: keyfileObject.crypto.cipher,\n            ciphertext: keyfileObject.crypto.ciphertext,\n            iv: keyfileObject.crypto.cipherparams.iv,\n            kdf: keyfileObject.crypto.kdf,\n            kdfparams: new derivationParams_1.ScryptKeyDerivationParams(keyfileObject.crypto.kdfparams.n, keyfileObject.crypto.kdfparams.r, keyfileObject.crypto.kdfparams.p, keyfileObject.crypto.kdfparams.dklen),\n            salt: keyfileObject.crypto.kdfparams.salt,\n            mac: keyfileObject.crypto.mac,\n        });\n    }\n    /**\n     * Converts the encrypted keyfile to plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            version: crypto_1.Version,\n            id: this.encryptedData.id,\n            address: this.publicKey.hex(),\n            bech32: this.publicKey.toAddress().toString(),\n            crypto: {\n                ciphertext: this.encryptedData.ciphertext,\n                cipherparams: { iv: this.encryptedData.iv },\n                cipher: crypto_1.CipherAlgorithm,\n                kdf: crypto_1.KeyDerivationFunction,\n                kdfparams: {\n                    dklen: this.encryptedData.kdfparams.dklen,\n                    salt: this.encryptedData.salt,\n                    n: this.encryptedData.kdfparams.n,\n                    r: this.encryptedData.kdfparams.r,\n                    p: this.encryptedData.kdfparams.p\n                },\n                mac: this.encryptedData.mac,\n            }\n        };\n    }\n}\nexports.UserWallet = UserWallet;\n//# sourceMappingURL=userWallet.js.map"]},"metadata":{},"sourceType":"script"}