{"ast":null,"code":"import _asyncToGenerator from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/regenerator/index.js\";\nimport { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  var err = new TransportError(message, id); // $FlowFixMe\n\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu, key) {\n  var result = Buffer.alloc(apdu.length);\n\n  for (var i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n\n  return result;\n} // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nvar webSafe64 = function webSafe64(base64) {\n  return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}; // Convert from web-safe to normal, add trailing \"=\"s\n\n\nvar normal64 = function normal64(base64) {\n  return base64.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"==\".substring(0, 3 * base64.length % 4);\n};\n\nfunction attemptExchange(apdu, timeoutMillis, scrambleKey, unwrap) {\n  var keyHandle = wrapApdu(apdu, scrambleKey);\n  var challenge = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n  var signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then(function (response) {\n    var signatureData = response.signatureData;\n\n    if (typeof signatureData === \"string\") {\n      var data = Buffer.from(normal64(signatureData), \"base64\");\n      var result;\n\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nvar transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(function (t) {\n    return t.emit(\"disconnect\");\n  });\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\n\n\nvar TransportU2F = /*#__PURE__*/function (_Transport) {\n  _inherits(TransportU2F, _Transport);\n\n  var _super = _createSuper(TransportU2F);\n\n  function TransportU2F() {\n    var _this;\n\n    _classCallCheck(this, TransportU2F);\n\n    _this = _super.call(this);\n    _this.scrambleKey = void 0;\n    _this.unwrap = true;\n    transportInstances.push(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n\n\n  _createClass(TransportU2F, [{\n    key: \"exchange\",\n    value: function () {\n      var _exchange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apdu) {\n        var isU2FError;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return attemptExchange(apdu, this.exchangeTimeout, this.scrambleKey, this.unwrap);\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                isU2FError = typeof _context.t0.metaData === \"object\";\n\n                if (!isU2FError) {\n                  _context.next = 14;\n                  break;\n                }\n\n                if (isTimeoutU2FError(_context.t0)) {\n                  emitDisconnect();\n                } // the wrapping make error more usable and \"printable\" to the end user.\n\n\n                throw wrapU2FTransportError(_context.t0, \"Failed to sign with Ledger device: U2F \" + _context.t0.metaData.type, \"U2F_\" + _context.t0.metaData.code);\n\n              case 14:\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n\n      function exchange(_x) {\n        return _exchange.apply(this, arguments);\n      }\n\n      return exchange;\n    }()\n    /**\n     */\n\n  }, {\n    key: \"setScrambleKey\",\n    value: function setScrambleKey(scrambleKey) {\n      this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n    }\n    /**\n     */\n\n  }, {\n    key: \"setUnwrap\",\n    value: function setUnwrap(unwrap) {\n      this.unwrap = unwrap;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      // u2f have no way to clean things up\n      return Promise.resolve();\n    }\n  }], [{\n    key: \"open\",\n    value:\n    /*\n     */\n\n    /*\n     */\n\n    /**\n     * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n     */\n    function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n        var _openTimeout,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _openTimeout = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5000;\n                return _context2.abrupt(\"return\", new TransportU2F());\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function open(_x2) {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }]);\n\n  return TransportU2F;\n}(Transport);\n\nexport { TransportU2F as default };\nTransportU2F.isSupported = isSupported;\n\nTransportU2F.list = function () {\n  return (// this transport is not discoverable but we are going to guess if it is here with isSupported()\n    isSupported().then(function (supported) {\n      return supported ? [null] : [];\n    })\n  );\n};\n\nTransportU2F.listen = function (observer) {\n  var unsubscribed = false;\n  isSupported().then(function (supported) {\n    if (unsubscribed) return;\n\n    if (supported) {\n      observer.next({\n        type: \"add\",\n        descriptor: null\n      });\n      observer.complete();\n    } else {\n      observer.error(new TransportError(\"U2F browser support is needed for Ledger. \" + \"Please use Chrome, Opera or Firefox with a U2F extension. \" + \"Also make sure you're on an HTTPS connection\", \"U2FNotSupported\"));\n    }\n  });\n  return {\n    unsubscribe: function unsubscribe() {\n      unsubscribed = true;\n    }\n  };\n};","map":{"version":3,"sources":["../src/TransportU2F.js"],"names":["err","result","Buffer","apdu","i","key","webSafe64","base64","normal64","keyHandle","wrapApdu","challenge","signRequest","version","appId","location","origin","log","timeoutMillis","response","signatureData","data","transportInstances","t","u2fError","TransportU2F","isSupported","list","supported","listen","observer","unsubscribed","type","descriptor","unsubscribe","scrambleKey","unwrap","_openTimeout","constructor","attemptExchange","isU2FError","e","isTimeoutU2FError","emitDisconnect","wrapU2FTransportError","setScrambleKey","setUnwrap","close","Promise"],"mappings":"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","sourcesContent":["//@flow\n\nimport { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id);\n  // $FlowFixMe\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu: Buffer, key: Buffer) {\n  const result = Buffer.alloc(apdu.length);\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n  return result;\n}\n\n// Convert from normal to web-safe, strip trailing \"=\"s\nconst webSafe64 = (base64: string) =>\n  base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n\n// Convert from web-safe to normal, add trailing \"=\"s\nconst normal64 = (base64: string) =>\n  base64.replace(/-/g, \"+\").replace(/_/g, \"/\") +\n  \"==\".substring(0, (3 * base64.length) % 4);\n\nfunction attemptExchange(\n  apdu: Buffer,\n  timeoutMillis: number,\n  scrambleKey: Buffer,\n  unwrap: boolean\n): Promise<Buffer> {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\n    \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"hex\"\n  );\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin,\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then((response) => {\n    const { signatureData } = response;\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach((t) => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\nexport default class TransportU2F extends Transport<null> {\n  static isSupported = isSupported;\n\n  /*\n   */\n  static list = (): * =>\n    // this transport is not discoverable but we are going to guess if it is here with isSupported()\n    isSupported().then((supported) => (supported ? [null] : []));\n\n  /*\n   */\n  static listen = (observer: *) => {\n    let unsubscribed = false;\n    isSupported().then((supported) => {\n      if (unsubscribed) return;\n      if (supported) {\n        observer.next({ type: \"add\", descriptor: null });\n        observer.complete();\n      } else {\n        observer.error(\n          new TransportError(\n            \"U2F browser support is needed for Ledger. \" +\n              \"Please use Chrome, Opera or Firefox with a U2F extension. \" +\n              \"Also make sure you're on an HTTPS connection\",\n            \"U2FNotSupported\"\n          )\n        );\n      }\n    });\n    return {\n      unsubscribe: () => {\n        unsubscribed = true;\n      },\n    };\n  };\n\n  scrambleKey: Buffer;\n\n  unwrap: boolean = true;\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_: *, _openTimeout?: number = 5000): Promise<TransportU2F> {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    transportInstances.push(this);\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    try {\n      return await attemptExchange(\n        apdu,\n        this.exchangeTimeout,\n        this.scrambleKey,\n        this.unwrap\n      );\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        }\n        // the wrapping make error more usable and \"printable\" to the end user.\n        throw wrapU2FTransportError(\n          e,\n          \"Failed to sign with Ledger device: U2F \" + e.metaData.type,\n          \"U2F_\" + e.metaData.code\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   */\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  /**\n   */\n  setUnwrap(unwrap: boolean) {\n    this.unwrap = unwrap;\n  }\n\n  close(): Promise<void> {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}