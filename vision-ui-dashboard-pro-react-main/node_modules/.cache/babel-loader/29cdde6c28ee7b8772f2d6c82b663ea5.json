{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionStatus = exports.TransactionHash = exports.Transaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst address_1 = require(\"./address\");\n\nconst balance_1 = require(\"./balance\");\n\nconst networkParams_1 = require(\"./networkParams\");\n\nconst networkConfig_1 = require(\"./networkConfig\");\n\nconst nonce_1 = require(\"./nonce\");\n\nconst signature_1 = require(\"./signature\");\n\nconst utils_1 = require(\"./utils\");\n\nconst transactionPayload_1 = require(\"./transactionPayload\");\n\nconst errors = __importStar(require(\"./errors\"));\n\nconst events_1 = require(\"./events\");\n\nconst transactionWatcher_1 = require(\"./transactionWatcher\");\n\nconst proto_1 = require(\"./proto\");\n\nconst transactionOnNetwork_1 = require(\"./transactionOnNetwork\");\n\nconst hash_1 = require(\"./hash\");\n\nconst createTransactionHasher = require(\"blake2b\");\n\nconst TRANSACTION_HASH_LENGTH = 32;\n/**\n * An abstraction for creating, signing and broadcasting Elrond transactions.\n */\n\nclass Transaction {\n  /**\n   * Creates a new Transaction object.\n   */\n  constructor(_ref) {\n    let {\n      nonce,\n      value,\n      receiver,\n      sender,\n      gasPrice,\n      gasLimit,\n      data,\n      chainID,\n      version,\n      options\n    } = _ref;\n\n    /**\n     * A (cached) representation of the transaction, as fetched from the API.\n     */\n    this.asOnNetwork = new transactionOnNetwork_1.TransactionOnNetwork();\n    this.nonce = nonce || new nonce_1.Nonce(0);\n    this.value = value || balance_1.Balance.Zero();\n    this.sender = sender || address_1.Address.Zero();\n    this.receiver = receiver;\n    this.gasPrice = gasPrice || networkConfig_1.NetworkConfig.getDefault().MinGasPrice;\n    this.gasLimit = gasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit;\n    this.data = data || new transactionPayload_1.TransactionPayload();\n    this.chainID = chainID || networkConfig_1.NetworkConfig.getDefault().ChainID;\n    this.version = version || networkParams_1.TransactionVersion.withDefaultVersion();\n    this.options = options || networkParams_1.TransactionOptions.withDefaultOptions();\n    this.signature = signature_1.Signature.empty();\n    this.hash = TransactionHash.empty();\n    this.status = TransactionStatus.createUnknown();\n    this.onSigned = new events_1.TypedEvent();\n    this.onSent = new events_1.TypedEvent();\n    this.onStatusUpdated = new events_1.TypedEvent();\n    this.onStatusChanged = new events_1.TypedEvent(); // We apply runtime type checks for these fields, since they are the most commonly misused when calling the Transaction constructor\n    // in JavaScript (which lacks type safety).\n\n    utils_1.guardType(\"nonce\", nonce_1.Nonce, this.nonce);\n    utils_1.guardType(\"gasLimit\", networkParams_1.GasLimit, this.gasLimit);\n    utils_1.guardType(\"gasPrice\", networkParams_1.GasPrice, this.gasPrice);\n  }\n\n  getNonce() {\n    return this.nonce;\n  }\n  /**\n   * Sets the account sequence number of the sender. Must be done prior signing.\n   *\n   * ```\n   * await alice.sync(provider);\n   *\n   * let tx = new Transaction({\n   *      value: Balance.egld(1),\n   *      receiver: bob.address\n   * });\n   *\n   * tx.setNonce(alice.nonce);\n   * await alice.signer.sign(tx);\n   * ```\n   */\n\n\n  setNonce(nonce) {\n    this.nonce = nonce;\n    this.doAfterPropertySetter();\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.doAfterPropertySetter();\n  }\n\n  getSender() {\n    return this.sender;\n  }\n\n  getReceiver() {\n    return this.receiver;\n  }\n\n  getGasPrice() {\n    return this.gasPrice;\n  }\n\n  setGasPrice(gasPrice) {\n    this.gasPrice = gasPrice;\n    this.doAfterPropertySetter();\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  setGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    this.doAfterPropertySetter();\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getChainID() {\n    return this.chainID;\n  }\n\n  getVersion() {\n    return this.version;\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  doAfterPropertySetter() {\n    this.signature = signature_1.Signature.empty();\n    this.hash = TransactionHash.empty();\n  }\n\n  getSignature() {\n    utils_1.guardNotEmpty(this.signature, \"signature\");\n    return this.signature;\n  }\n\n  getHash() {\n    utils_1.guardNotEmpty(this.hash, \"hash\");\n    return this.hash;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n  /**\n   * Serializes a transaction to a sequence of bytes, ready to be signed.\n   * This function is called internally, by {@link Signer} objects.\n   *\n   * @param signedBy The address of the future signer\n   */\n\n\n  serializeForSigning(signedBy) {\n    // TODO: for appropriate tx.version, interpret tx.options accordingly and sign using the content / data hash\n    let plain = this.toPlainObject(signedBy); // Make sure we never sign the transaction with another signature set up (useful when using the same method for verification)\n\n    if (plain.signature) {\n      delete plain.signature;\n    }\n\n    let serialized = JSON.stringify(plain);\n    return Buffer.from(serialized);\n  }\n  /**\n   * Converts the transaction object into a ready-to-serialize, plain JavaScript object.\n   * This function is called internally within the signing procedure.\n   *\n   * @param sender The address of the sender (will be provided when called within the signing procedure)\n   */\n\n\n  toPlainObject(sender) {\n    return {\n      nonce: this.nonce.valueOf(),\n      value: this.value.toString(),\n      receiver: this.receiver.bech32(),\n      sender: sender ? sender.bech32() : this.sender.bech32(),\n      gasPrice: this.gasPrice.valueOf(),\n      gasLimit: this.gasLimit.valueOf(),\n      data: this.data.isEmpty() ? undefined : this.data.encoded(),\n      chainID: this.chainID.valueOf(),\n      version: this.version.valueOf(),\n      options: this.options.valueOf() == 0 ? undefined : this.options.valueOf(),\n      signature: this.signature.isEmpty() ? undefined : this.signature.hex()\n    };\n  }\n  /**\n   * Converts a plain object transaction into a Transaction Object.\n   *\n   * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()\n   */\n\n\n  static fromPlainObject(plainObjectTransaction) {\n    const tx = new Transaction({\n      nonce: new nonce_1.Nonce(plainObjectTransaction.nonce),\n      value: balance_1.Balance.fromString(plainObjectTransaction.value),\n      receiver: address_1.Address.fromString(plainObjectTransaction.receiver),\n      gasPrice: new networkParams_1.GasPrice(plainObjectTransaction.gasPrice),\n      gasLimit: new networkParams_1.GasLimit(plainObjectTransaction.gasLimit),\n      data: new transactionPayload_1.TransactionPayload(atob(plainObjectTransaction.data)),\n      chainID: new networkParams_1.ChainID(plainObjectTransaction.chainID),\n      version: new networkParams_1.TransactionVersion(plainObjectTransaction.version)\n    });\n\n    if (plainObjectTransaction.signature) {\n      tx.applySignature(new signature_1.Signature(plainObjectTransaction.signature), address_1.Address.fromString(plainObjectTransaction.sender));\n    }\n\n    return tx;\n  }\n  /**\n   * Applies the signature on the transaction.\n   *\n   * @param signature The signature, as computed by a {@link ISigner}.\n   * @param signedBy The address of the signer.\n   */\n\n\n  applySignature(signature, signedBy) {\n    utils_1.guardEmpty(this.signature, \"signature\");\n    utils_1.guardEmpty(this.hash, \"hash\");\n    this.signature = signature;\n    this.sender = signedBy;\n    this.hash = TransactionHash.compute(this);\n    this.onSigned.emit({\n      transaction: this,\n      signedBy: signedBy\n    });\n  }\n  /**\n   * Broadcasts a transaction to the Network, via a {@link IProvider}.\n   *\n   * ```\n   * let provider = new ProxyProvider(\"https://gateway.elrond.com\");\n   * // ... Prepare, sign the transaction, then:\n   * await tx.send(provider);\n   * await tx.awaitExecuted(provider);\n   * ```\n   */\n\n\n  send(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.hash = yield provider.sendTransaction(this);\n      this.onSent.emit({\n        transaction: this\n      });\n      return this.hash;\n    });\n  }\n  /**\n   * Simulates a transaction on the Network, via a {@link IProvider}.\n   */\n\n\n  simulate(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield provider.simulateTransaction(this);\n    });\n  }\n  /**\n   * Converts a transaction to a ready-to-broadcast object.\n   * Called internally by the {@link IProvider}.\n   */\n\n\n  toSendable() {\n    if (this.signature.isEmpty()) {\n      throw new errors.ErrTransactionNotSigned();\n    }\n\n    return this.toPlainObject();\n  }\n  /**\n   * Fetches a representation of the transaction (whether pending, processed or finalized), as found on the Network.\n   *\n   * @param fetcher The transaction fetcher to use\n   * @param cacheLocally Whether to cache the response locally, on the transaction object\n   * @param awaitNotarized Whether to wait for the transaction to be notarized\n   * @param withResults Whether to wait for the transaction results\n   */\n\n\n  getAsOnNetwork(fetcher) {\n    let cacheLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let awaitNotarized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let withResults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.hash.isEmpty()) {\n        throw new errors.ErrTransactionHashUnknown();\n      } // For Smart Contract transactions, wait for their full execution & notarization before returning.\n\n\n      let isSmartContractTransaction = this.receiver.isContractAddress();\n\n      if (isSmartContractTransaction && awaitNotarized) {\n        yield this.awaitNotarized(fetcher);\n      }\n\n      let response = yield fetcher.getTransaction(this.hash, this.sender, withResults);\n\n      if (cacheLocally) {\n        this.asOnNetwork = response;\n      }\n\n      return response;\n    });\n  }\n  /**\n   * Returns the cached representation of the transaction, as previously fetched using {@link Transaction.getAsOnNetwork}.\n   */\n\n\n  getAsOnNetworkCached() {\n    return this.asOnNetwork;\n  }\n\n  awaitSigned() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.signature.isEmpty()) {\n        return;\n      }\n\n      return new Promise((resolve, _reject) => {\n        this.onSigned.on(() => resolve());\n      });\n    });\n  }\n\n  awaitHashed() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hash.isEmpty()) {\n        return;\n      }\n\n      return new Promise((resolve, _reject) => {\n        this.onSigned.on(() => resolve());\n      });\n    });\n  }\n  /**\n   * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties\n   * @param networkConfig {@link NetworkConfig}\n   */\n\n\n  computeFee(networkConfig) {\n    let moveBalanceGas = networkConfig.MinGasLimit.valueOf() + this.data.length() * networkConfig.GasPerDataByte.valueOf();\n\n    if (moveBalanceGas > this.gasLimit.valueOf()) {\n      throw new errors.ErrNotEnoughGas(this.gasLimit.valueOf());\n    }\n\n    let gasPrice = new bignumber_js_1.BigNumber(this.gasPrice.valueOf());\n    let feeForMove = new bignumber_js_1.BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n\n    if (moveBalanceGas === this.gasLimit.valueOf()) {\n      return feeForMove;\n    }\n\n    let diff = new bignumber_js_1.BigNumber(this.gasLimit.valueOf() - moveBalanceGas);\n    let modifiedGasPrice = gasPrice.multipliedBy(new bignumber_js_1.BigNumber(networkConfig.GasPriceModifier.valueOf()));\n    let processingFee = diff.multipliedBy(modifiedGasPrice);\n    return feeForMove.plus(processingFee);\n  }\n  /**\n   * Awaits for a transaction to reach its \"pending\" state - that is, for the transaction to be accepted in the mempool.\n   * Performs polling against the provider, via a {@link TransactionWatcher}.\n   */\n\n\n  awaitPending(fetcher) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, fetcher);\n      yield watcher.awaitPending(this.notifyStatusUpdate.bind(this));\n    });\n  }\n  /**\n   * Awaits for a transaction to reach its \"executed\" state - that is, for the transaction to be processed (whether with success or with errors).\n   * Performs polling against the provider, via a {@link TransactionWatcher}.\n   */\n\n\n  awaitExecuted(fetcher) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, fetcher);\n      yield watcher.awaitExecuted(this.notifyStatusUpdate.bind(this));\n    });\n  }\n\n  notifyStatusUpdate(newStatus) {\n    let sameStatus = this.status.equals(newStatus);\n    this.onStatusUpdated.emit({\n      transaction: this\n    });\n\n    if (!sameStatus) {\n      this.status = newStatus;\n      this.onStatusChanged.emit({\n        transaction: this\n      });\n    }\n  }\n\n  awaitNotarized(fetcher) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, fetcher);\n      yield watcher.awaitNotarized();\n    });\n  }\n\n}\n\nexports.Transaction = Transaction;\n/**\n * An abstraction for handling and computing transaction hashes.\n */\n\nclass TransactionHash extends hash_1.Hash {\n  constructor(hash) {\n    super(hash);\n  }\n  /**\n   * Computes the hash of a transaction.\n   * Not yet implemented.\n   */\n\n\n  static compute(transaction) {\n    let serializer = new proto_1.ProtoSerializer();\n    let buffer = serializer.serializeTransaction(transaction);\n    let hash = createTransactionHasher(TRANSACTION_HASH_LENGTH).update(buffer).digest(\"hex\");\n    return new TransactionHash(hash);\n  }\n\n}\n\nexports.TransactionHash = TransactionHash;\n/**\n * An abstraction for handling and interpreting the \"status\" field of a {@link Transaction}.\n */\n\nclass TransactionStatus {\n  /**\n   * Creates a new TransactionStatus object.\n   */\n  constructor(status) {\n    this.status = (status || \"\").toLowerCase();\n  }\n  /**\n   * Creates an unknown status.\n   */\n\n\n  static createUnknown() {\n    return new TransactionStatus(\"unknown\");\n  }\n  /**\n   * Returns whether the transaction is pending (e.g. in mempool).\n   */\n\n\n  isPending() {\n    return this.status == \"received\" || this.status == \"pending\" || this.status == \"partially-executed\";\n  }\n  /**\n   * Returns whether the transaction has been executed (not necessarily with success).\n   */\n\n\n  isExecuted() {\n    return this.isSuccessful() || this.isInvalid();\n  }\n  /**\n   * Returns whether the transaction has been executed successfully.\n   */\n\n\n  isSuccessful() {\n    return this.status == \"executed\" || this.status == \"success\" || this.status == \"successful\";\n  }\n  /**\n   * Returns whether the transaction has been executed, but with a failure.\n   */\n\n\n  isFailed() {\n    return this.status == \"fail\" || this.status == \"failed\" || this.status == \"unsuccessful\" || this.isInvalid();\n  }\n  /**\n   * Returns whether the transaction has been executed, but marked as invalid (e.g. due to \"insufficient funds\").\n   */\n\n\n  isInvalid() {\n    return this.status == \"invalid\";\n  }\n\n  toString() {\n    return this.status;\n  }\n\n  valueOf() {\n    return this.status;\n  }\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.status == other.status;\n  }\n\n}\n\nexports.TransactionStatus = TransactionStatus;","map":{"version":3,"sources":["../src/transaction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAOA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAM,uBAAuB,GAAG,OAAO,CAAC,SAAD,CAAvC;;AACA,MAAM,uBAAuB,GAAG,EAAhC;AAEA;;AAEG;;AACH,MAAa,WAAb,CAAwB;EAiFtB;;AAEG;EACH,WAAA,OAsBC;IAAA,IAtBkB;MACjB,KADiB;MAEjB,KAFiB;MAGjB,QAHiB;MAIjB,MAJiB;MAKjB,QALiB;MAMjB,QANiB;MAOjB,IAPiB;MAQjB,OARiB;MASjB,OATiB;MAUjB;IAViB,CAsBlB;;IArCD;;AAEG;IACK,KAAA,WAAA,GAAoC,IAAI,sBAAA,CAAA,oBAAJ,EAApC;IAmCN,KAAK,KAAL,GAAa,KAAK,IAAI,IAAI,OAAA,CAAA,KAAJ,CAAU,CAAV,CAAtB;IACA,KAAK,KAAL,GAAa,KAAK,IAAI,SAAA,CAAA,OAAA,CAAQ,IAAR,EAAtB;IACA,KAAK,MAAL,GAAc,MAAM,IAAI,SAAA,CAAA,OAAA,CAAQ,IAAR,EAAxB;IACA,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,QAAL,GAAgB,QAAQ,IAAI,eAAA,CAAA,aAAA,CAAc,UAAd,GAA2B,WAAvD;IACA,KAAK,QAAL,GAAgB,QAAQ,IAAI,eAAA,CAAA,aAAA,CAAc,UAAd,GAA2B,WAAvD;IACA,KAAK,IAAL,GAAY,IAAI,IAAI,IAAI,oBAAA,CAAA,kBAAJ,EAApB;IACA,KAAK,OAAL,GAAe,OAAO,IAAI,eAAA,CAAA,aAAA,CAAc,UAAd,GAA2B,OAArD;IACA,KAAK,OAAL,GAAe,OAAO,IAAI,eAAA,CAAA,kBAAA,CAAmB,kBAAnB,EAA1B;IACA,KAAK,OAAL,GAAe,OAAO,IAAI,eAAA,CAAA,kBAAA,CAAmB,kBAAnB,EAA1B;IAEA,KAAK,SAAL,GAAiB,WAAA,CAAA,SAAA,CAAU,KAAV,EAAjB;IACA,KAAK,IAAL,GAAY,eAAe,CAAC,KAAhB,EAAZ;IACA,KAAK,MAAL,GAAc,iBAAiB,CAAC,aAAlB,EAAd;IAEA,KAAK,QAAL,GAAgB,IAAI,QAAA,CAAA,UAAJ,EAAhB;IACA,KAAK,MAAL,GAAc,IAAI,QAAA,CAAA,UAAJ,EAAd;IACA,KAAK,eAAL,GAAuB,IAAI,QAAA,CAAA,UAAJ,EAAvB;IACA,KAAK,eAAL,GAAuB,IAAI,QAAA,CAAA,UAAJ,EAAvB,CAnBD,CAqBC;IACA;;IACA,OAAA,CAAA,SAAA,CAAU,OAAV,EAAmB,OAAA,CAAA,KAAnB,EAA0B,KAAK,KAA/B;IACA,OAAA,CAAA,SAAA,CAAU,UAAV,EAAsB,eAAA,CAAA,QAAtB,EAAgC,KAAK,QAArC;IACA,OAAA,CAAA,SAAA,CAAU,UAAV,EAAsB,eAAA,CAAA,QAAtB,EAAgC,KAAK,QAArC;EACD;;EAED,QAAQ,GAAA;IACN,OAAO,KAAK,KAAZ;EACD;EAED;;;;;;;;;;;;;;AAcG;;;EACH,QAAQ,CAAC,KAAD,EAAa;IACnB,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,qBAAL;EACD;;EAED,QAAQ,GAAA;IACN,OAAO,KAAK,KAAZ;EACD;;EAED,QAAQ,CAAC,KAAD,EAAe;IACrB,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,qBAAL;EACD;;EAED,SAAS,GAAA;IACP,OAAO,KAAK,MAAZ;EACD;;EAED,WAAW,GAAA;IACT,OAAO,KAAK,QAAZ;EACD;;EAED,WAAW,GAAA;IACT,OAAO,KAAK,QAAZ;EACD;;EAED,WAAW,CAAC,QAAD,EAAmB;IAC5B,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,qBAAL;EACD;;EAED,WAAW,GAAA;IACT,OAAO,KAAK,QAAZ;EACD;;EAED,WAAW,CAAC,QAAD,EAAmB;IAC5B,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,qBAAL;EACD;;EAED,OAAO,GAAA;IACL,OAAO,KAAK,IAAZ;EACD;;EAED,UAAU,GAAA;IACR,OAAO,KAAK,OAAZ;EACD;;EAED,UAAU,GAAA;IACR,OAAO,KAAK,OAAZ;EACD;;EAED,UAAU,GAAA;IACR,OAAO,KAAK,OAAZ;EACD;;EAED,qBAAqB,GAAA;IACnB,KAAK,SAAL,GAAiB,WAAA,CAAA,SAAA,CAAU,KAAV,EAAjB;IACA,KAAK,IAAL,GAAY,eAAe,CAAC,KAAhB,EAAZ;EACD;;EAED,YAAY,GAAA;IACV,OAAA,CAAA,aAAA,CAAc,KAAK,SAAnB,EAA8B,WAA9B;IACA,OAAO,KAAK,SAAZ;EACD;;EAED,OAAO,GAAA;IACL,OAAA,CAAA,aAAA,CAAc,KAAK,IAAnB,EAAyB,MAAzB;IACA,OAAO,KAAK,IAAZ;EACD;;EAED,SAAS,GAAA;IACP,OAAO,KAAK,MAAZ;EACD;EAED;;;;;AAKG;;;EACH,mBAAmB,CAAC,QAAD,EAAkB;IACnC;IACA,IAAI,KAAK,GAAG,KAAK,aAAL,CAAmB,QAAnB,CAAZ,CAFmC,CAGnC;;IACA,IAAI,KAAK,CAAC,SAAV,EAAqB;MACnB,OAAO,KAAK,CAAC,SAAb;IACD;;IACD,IAAI,UAAU,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAjB;IAEA,OAAO,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAP;EACD;EAED;;;;;AAKG;;;EACH,aAAa,CAAC,MAAD,EAAiB;IAC5B,OAAO;MACL,KAAK,EAAE,KAAK,KAAL,CAAW,OAAX,EADF;MAEL,KAAK,EAAE,KAAK,KAAL,CAAW,QAAX,EAFF;MAGL,QAAQ,EAAE,KAAK,QAAL,CAAc,MAAd,EAHL;MAIL,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,MAAP,EAAH,GAAqB,KAAK,MAAL,CAAY,MAAZ,EAJ9B;MAKL,QAAQ,EAAE,KAAK,QAAL,CAAc,OAAd,EALL;MAML,QAAQ,EAAE,KAAK,QAAL,CAAc,OAAd,EANL;MAOL,IAAI,EAAE,KAAK,IAAL,CAAU,OAAV,KAAsB,SAAtB,GAAkC,KAAK,IAAL,CAAU,OAAV,EAPnC;MAQL,OAAO,EAAE,KAAK,OAAL,CAAa,OAAb,EARJ;MASL,OAAO,EAAE,KAAK,OAAL,CAAa,OAAb,EATJ;MAUL,OAAO,EAAE,KAAK,OAAL,CAAa,OAAb,MAA0B,CAA1B,GAA8B,SAA9B,GAA0C,KAAK,OAAL,CAAa,OAAb,EAV9C;MAWL,SAAS,EAAE,KAAK,SAAL,CAAe,OAAf,KAA2B,SAA3B,GAAuC,KAAK,SAAL,CAAe,GAAf;IAX7C,CAAP;EAaD;EAED;;;;AAIG;;;EACmB,OAAf,eAAe,CAAC,sBAAD,EAA4B;IAChD,MAAM,EAAE,GAAG,IAAI,WAAJ,CAAgB;MACzB,KAAK,EAAE,IAAI,OAAA,CAAA,KAAJ,CAAU,sBAAsB,CAAC,KAAjC,CADkB;MAEzB,KAAK,EAAE,SAAA,CAAA,OAAA,CAAQ,UAAR,CAAmB,sBAAsB,CAAC,KAA1C,CAFkB;MAGzB,QAAQ,EAAE,SAAA,CAAA,OAAA,CAAQ,UAAR,CAAmB,sBAAsB,CAAC,QAA1C,CAHe;MAIzB,QAAQ,EAAE,IAAI,eAAA,CAAA,QAAJ,CAAa,sBAAsB,CAAC,QAApC,CAJe;MAKzB,QAAQ,EAAE,IAAI,eAAA,CAAA,QAAJ,CAAa,sBAAsB,CAAC,QAApC,CALe;MAMzB,IAAI,EAAE,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,IAAI,CAAC,sBAAsB,CAAC,IAAxB,CAA3B,CANmB;MAOzB,OAAO,EAAE,IAAI,eAAA,CAAA,OAAJ,CAAY,sBAAsB,CAAC,OAAnC,CAPgB;MAQzB,OAAO,EAAE,IAAI,eAAA,CAAA,kBAAJ,CAAuB,sBAAsB,CAAC,OAA9C;IARgB,CAAhB,CAAX;;IAUA,IAAI,sBAAsB,CAAC,SAA3B,EAAsC;MACpC,EAAE,CAAC,cAAH,CACE,IAAI,WAAA,CAAA,SAAJ,CAAc,sBAAsB,CAAC,SAArC,CADF,EAEE,SAAA,CAAA,OAAA,CAAQ,UAAR,CAAmB,sBAAsB,CAAC,MAA1C,CAFF;IAID;;IAED,OAAO,EAAP;EACD;EAED;;;;;AAKG;;;EACH,cAAc,CAAC,SAAD,EAAuB,QAAvB,EAAwC;IACpD,OAAA,CAAA,UAAA,CAAW,KAAK,SAAhB,EAA2B,WAA3B;IACA,OAAA,CAAA,UAAA,CAAW,KAAK,IAAhB,EAAsB,MAAtB;IAEA,KAAK,SAAL,GAAiB,SAAjB;IACA,KAAK,MAAL,GAAc,QAAd;IAEA,KAAK,IAAL,GAAY,eAAe,CAAC,OAAhB,CAAwB,IAAxB,CAAZ;IACA,KAAK,QAAL,CAAc,IAAd,CAAmB;MAAE,WAAW,EAAE,IAAf;MAAqB,QAAQ,EAAE;IAA/B,CAAnB;EACD;EAED;;;;;;;;;AASG;;;EACG,IAAI,CAAC,QAAD,EAAoB;;MAC5B,KAAK,IAAL,GAAY,MAAM,QAAQ,CAAC,eAAT,CAAyB,IAAzB,CAAlB;MAEA,KAAK,MAAL,CAAY,IAAZ,CAAiB;QAAE,WAAW,EAAE;MAAf,CAAjB;MACA,OAAO,KAAK,IAAZ;IACD,C;EAAA;EAED;;AAEG;;;EACG,QAAQ,CAAC,QAAD,EAAoB;;MAChC,OAAO,MAAM,QAAQ,CAAC,mBAAT,CAA6B,IAA7B,CAAb;IACD,C;EAAA;EAED;;;AAGG;;;EACH,UAAU,GAAA;IACR,IAAI,KAAK,SAAL,CAAe,OAAf,EAAJ,EAA8B;MAC5B,MAAM,IAAI,MAAM,CAAC,uBAAX,EAAN;IACD;;IAED,OAAO,KAAK,aAAL,EAAP;EACD;EAED;;;;;;;AAOG;;;EACG,cAAc,CAClB,OADkB,EAIA;IAAA,IAFlB,YAEkB,uEAFH,IAEG;IAAA,IADlB,cACkB,uEADD,IACC;IAAA,IAAlB,WAAkB,uEAAJ,IAAI;;MAElB,IAAI,KAAK,IAAL,CAAU,OAAV,EAAJ,EAAyB;QACvB,MAAM,IAAI,MAAM,CAAC,yBAAX,EAAN;MACD,C,CAED;;;MACA,IAAI,0BAA0B,GAAG,KAAK,QAAL,CAAc,iBAAd,EAAjC;;MACA,IAAI,0BAA0B,IAAI,cAAlC,EAAkD;QAChD,MAAM,KAAK,cAAL,CAAoB,OAApB,CAAN;MACD;;MAED,IAAI,QAAQ,GAAG,MAAM,OAAO,CAAC,cAAR,CACnB,KAAK,IADc,EAEnB,KAAK,MAFc,EAGnB,WAHmB,CAArB;;MAMA,IAAI,YAAJ,EAAkB;QAChB,KAAK,WAAL,GAAmB,QAAnB;MACD;;MAED,OAAO,QAAP;IACD,C;EAAA;EAED;;AAEG;;;EACH,oBAAoB,GAAA;IAClB,OAAO,KAAK,WAAZ;EACD;;EAEK,WAAW,GAAA;;MACf,IAAI,CAAC,KAAK,SAAL,CAAe,OAAf,EAAL,EAA+B;QAC7B;MACD;;MAED,OAAO,IAAI,OAAJ,CAAkB,CAAC,OAAD,EAAU,OAAV,KAAqB;QAC5C,KAAK,QAAL,CAAc,EAAd,CAAiB,MAAM,OAAO,EAA9B;MACD,CAFM,CAAP;IAGD,C;EAAA;;EAEK,WAAW,GAAA;;MACf,IAAI,CAAC,KAAK,IAAL,CAAU,OAAV,EAAL,EAA0B;QACxB;MACD;;MAED,OAAO,IAAI,OAAJ,CAAkB,CAAC,OAAD,EAAU,OAAV,KAAqB;QAC5C,KAAK,QAAL,CAAc,EAAd,CAAiB,MAAM,OAAO,EAA9B;MACD,CAFM,CAAP;IAGD,C;EAAA;EAED;;;AAGG;;;EACH,UAAU,CAAC,aAAD,EAA6B;IACrC,IAAI,cAAc,GAChB,aAAa,CAAC,WAAd,CAA0B,OAA1B,KACA,KAAK,IAAL,CAAU,MAAV,KAAqB,aAAa,CAAC,cAAd,CAA6B,OAA7B,EAFvB;;IAGA,IAAI,cAAc,GAAG,KAAK,QAAL,CAAc,OAAd,EAArB,EAA8C;MAC5C,MAAM,IAAI,MAAM,CAAC,eAAX,CAA2B,KAAK,QAAL,CAAc,OAAd,EAA3B,CAAN;IACD;;IAED,IAAI,QAAQ,GAAG,IAAI,cAAA,CAAA,SAAJ,CAAc,KAAK,QAAL,CAAc,OAAd,EAAd,CAAf;IACA,IAAI,UAAU,GAAG,IAAI,cAAA,CAAA,SAAJ,CAAc,cAAd,EAA8B,YAA9B,CAA2C,QAA3C,CAAjB;;IACA,IAAI,cAAc,KAAK,KAAK,QAAL,CAAc,OAAd,EAAvB,EAAgD;MAC9C,OAAO,UAAP;IACD;;IAED,IAAI,IAAI,GAAG,IAAI,cAAA,CAAA,SAAJ,CAAc,KAAK,QAAL,CAAc,OAAd,KAA0B,cAAxC,CAAX;IACA,IAAI,gBAAgB,GAAG,QAAQ,CAAC,YAAT,CACrB,IAAI,cAAA,CAAA,SAAJ,CAAc,aAAa,CAAC,gBAAd,CAA+B,OAA/B,EAAd,CADqB,CAAvB;IAGA,IAAI,aAAa,GAAG,IAAI,CAAC,YAAL,CAAkB,gBAAlB,CAApB;IAEA,OAAO,UAAU,CAAC,IAAX,CAAgB,aAAhB,CAAP;EACD;EAED;;;AAGG;;;EACG,YAAY,CAAC,OAAD,EAA6B;;MAC7C,IAAI,OAAO,GAAG,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,KAAK,IAA5B,EAAkC,OAAlC,CAAd;MACA,MAAM,OAAO,CAAC,YAAR,CAAqB,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAArB,CAAN;IACD,C;EAAA;EAED;;;AAGG;;;EACG,aAAa,CAAC,OAAD,EAA6B;;MAC9C,IAAI,OAAO,GAAG,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,KAAK,IAA5B,EAAkC,OAAlC,CAAd;MACA,MAAM,OAAO,CAAC,aAAR,CAAsB,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAAtB,CAAN;IACD,C;EAAA;;EAEO,kBAAkB,CAAC,SAAD,EAA6B;IACrD,IAAI,UAAU,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,SAAnB,CAAjB;IAEA,KAAK,eAAL,CAAqB,IAArB,CAA0B;MAAE,WAAW,EAAE;IAAf,CAA1B;;IAEA,IAAI,CAAC,UAAL,EAAiB;MACf,KAAK,MAAL,GAAc,SAAd;MACA,KAAK,eAAL,CAAqB,IAArB,CAA0B;QAAE,WAAW,EAAE;MAAf,CAA1B;IACD;EACF;;EAEK,cAAc,CAAC,OAAD,EAA6B;;MAC/C,IAAI,OAAO,GAAG,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,KAAK,IAA5B,EAAkC,OAAlC,CAAd;MACA,MAAM,OAAO,CAAC,cAAR,EAAN;IACD,C;EAAA;;AAtdqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA;AAydA;;AAEG;;AACH,MAAa,eAAb,SAAqC,MAAA,CAAA,IAArC,CAAyC;EACvC,WAAA,CAAY,IAAZ,EAAwB;IACtB,MAAM,IAAN;EACD;EAED;;;AAGG;;;EACW,OAAP,OAAO,CAAC,WAAD,EAAyB;IACrC,IAAI,UAAU,GAAG,IAAI,OAAA,CAAA,eAAJ,EAAjB;IACA,IAAI,MAAM,GAAG,UAAU,CAAC,oBAAX,CAAgC,WAAhC,CAAb;IACA,IAAI,IAAI,GAAG,uBAAuB,CAAC,uBAAD,CAAvB,CACR,MADQ,CACD,MADC,EAER,MAFQ,CAED,KAFC,CAAX;IAGA,OAAO,IAAI,eAAJ,CAAoB,IAApB,CAAP;EACD;;AAhBsC;;AAAzC,OAAA,CAAA,eAAA,GAAA,eAAA;AAmBA;;AAEG;;AACH,MAAa,iBAAb,CAA8B;EAM5B;;AAEG;EACH,WAAA,CAAY,MAAZ,EAA0B;IACxB,KAAK,MAAL,GAAc,CAAC,MAAM,IAAI,EAAX,EAAe,WAAf,EAAd;EACD;EAED;;AAEG;;;EACiB,OAAb,aAAa,GAAA;IAClB,OAAO,IAAI,iBAAJ,CAAsB,SAAtB,CAAP;EACD;EAED;;AAEG;;;EACH,SAAS,GAAA;IACP,OACE,KAAK,MAAL,IAAe,UAAf,IACA,KAAK,MAAL,IAAe,SADf,IAEA,KAAK,MAAL,IAAe,oBAHjB;EAKD;EAED;;AAEG;;;EACH,UAAU,GAAA;IACR,OAAO,KAAK,YAAL,MAAuB,KAAK,SAAL,EAA9B;EACD;EAED;;AAEG;;;EACH,YAAY,GAAA;IACV,OACE,KAAK,MAAL,IAAe,UAAf,IACA,KAAK,MAAL,IAAe,SADf,IAEA,KAAK,MAAL,IAAe,YAHjB;EAKD;EAED;;AAEG;;;EACH,QAAQ,GAAA;IACN,OACE,KAAK,MAAL,IAAe,MAAf,IACA,KAAK,MAAL,IAAe,QADf,IAEA,KAAK,MAAL,IAAe,cAFf,IAGA,KAAK,SAAL,EAJF;EAMD;EAED;;AAEG;;;EACH,SAAS,GAAA;IACP,OAAO,KAAK,MAAL,IAAe,SAAtB;EACD;;EAED,QAAQ,GAAA;IACN,OAAO,KAAK,MAAZ;EACD;;EAED,OAAO,GAAA;IACL,OAAO,KAAK,MAAZ;EACD;;EAED,MAAM,CAAC,KAAD,EAAyB;IAC7B,IAAI,CAAC,KAAL,EAAY;MACV,OAAO,KAAP;IACD;;IAED,OAAO,KAAK,MAAL,IAAe,KAAK,CAAC,MAA5B;EACD;;AAlF2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionStatus = exports.TransactionHash = exports.Transaction = void 0;\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst address_1 = require(\"./address\");\nconst balance_1 = require(\"./balance\");\nconst networkParams_1 = require(\"./networkParams\");\nconst networkConfig_1 = require(\"./networkConfig\");\nconst nonce_1 = require(\"./nonce\");\nconst signature_1 = require(\"./signature\");\nconst utils_1 = require(\"./utils\");\nconst transactionPayload_1 = require(\"./transactionPayload\");\nconst errors = __importStar(require(\"./errors\"));\nconst events_1 = require(\"./events\");\nconst transactionWatcher_1 = require(\"./transactionWatcher\");\nconst proto_1 = require(\"./proto\");\nconst transactionOnNetwork_1 = require(\"./transactionOnNetwork\");\nconst hash_1 = require(\"./hash\");\nconst createTransactionHasher = require(\"blake2b\");\nconst TRANSACTION_HASH_LENGTH = 32;\n/**\n * An abstraction for creating, signing and broadcasting Elrond transactions.\n */\nclass Transaction {\n    /**\n     * Creates a new Transaction object.\n     */\n    constructor({ nonce, value, receiver, sender, gasPrice, gasLimit, data, chainID, version, options, }) {\n        /**\n         * A (cached) representation of the transaction, as fetched from the API.\n         */\n        this.asOnNetwork = new transactionOnNetwork_1.TransactionOnNetwork();\n        this.nonce = nonce || new nonce_1.Nonce(0);\n        this.value = value || balance_1.Balance.Zero();\n        this.sender = sender || address_1.Address.Zero();\n        this.receiver = receiver;\n        this.gasPrice = gasPrice || networkConfig_1.NetworkConfig.getDefault().MinGasPrice;\n        this.gasLimit = gasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit;\n        this.data = data || new transactionPayload_1.TransactionPayload();\n        this.chainID = chainID || networkConfig_1.NetworkConfig.getDefault().ChainID;\n        this.version = version || networkParams_1.TransactionVersion.withDefaultVersion();\n        this.options = options || networkParams_1.TransactionOptions.withDefaultOptions();\n        this.signature = signature_1.Signature.empty();\n        this.hash = TransactionHash.empty();\n        this.status = TransactionStatus.createUnknown();\n        this.onSigned = new events_1.TypedEvent();\n        this.onSent = new events_1.TypedEvent();\n        this.onStatusUpdated = new events_1.TypedEvent();\n        this.onStatusChanged = new events_1.TypedEvent();\n        // We apply runtime type checks for these fields, since they are the most commonly misused when calling the Transaction constructor\n        // in JavaScript (which lacks type safety).\n        utils_1.guardType(\"nonce\", nonce_1.Nonce, this.nonce);\n        utils_1.guardType(\"gasLimit\", networkParams_1.GasLimit, this.gasLimit);\n        utils_1.guardType(\"gasPrice\", networkParams_1.GasPrice, this.gasPrice);\n    }\n    getNonce() {\n        return this.nonce;\n    }\n    /**\n     * Sets the account sequence number of the sender. Must be done prior signing.\n     *\n     * ```\n     * await alice.sync(provider);\n     *\n     * let tx = new Transaction({\n     *      value: Balance.egld(1),\n     *      receiver: bob.address\n     * });\n     *\n     * tx.setNonce(alice.nonce);\n     * await alice.signer.sign(tx);\n     * ```\n     */\n    setNonce(nonce) {\n        this.nonce = nonce;\n        this.doAfterPropertySetter();\n    }\n    getValue() {\n        return this.value;\n    }\n    setValue(value) {\n        this.value = value;\n        this.doAfterPropertySetter();\n    }\n    getSender() {\n        return this.sender;\n    }\n    getReceiver() {\n        return this.receiver;\n    }\n    getGasPrice() {\n        return this.gasPrice;\n    }\n    setGasPrice(gasPrice) {\n        this.gasPrice = gasPrice;\n        this.doAfterPropertySetter();\n    }\n    getGasLimit() {\n        return this.gasLimit;\n    }\n    setGasLimit(gasLimit) {\n        this.gasLimit = gasLimit;\n        this.doAfterPropertySetter();\n    }\n    getData() {\n        return this.data;\n    }\n    getChainID() {\n        return this.chainID;\n    }\n    getVersion() {\n        return this.version;\n    }\n    getOptions() {\n        return this.options;\n    }\n    doAfterPropertySetter() {\n        this.signature = signature_1.Signature.empty();\n        this.hash = TransactionHash.empty();\n    }\n    getSignature() {\n        utils_1.guardNotEmpty(this.signature, \"signature\");\n        return this.signature;\n    }\n    getHash() {\n        utils_1.guardNotEmpty(this.hash, \"hash\");\n        return this.hash;\n    }\n    getStatus() {\n        return this.status;\n    }\n    /**\n     * Serializes a transaction to a sequence of bytes, ready to be signed.\n     * This function is called internally, by {@link Signer} objects.\n     *\n     * @param signedBy The address of the future signer\n     */\n    serializeForSigning(signedBy) {\n        // TODO: for appropriate tx.version, interpret tx.options accordingly and sign using the content / data hash\n        let plain = this.toPlainObject(signedBy);\n        // Make sure we never sign the transaction with another signature set up (useful when using the same method for verification)\n        if (plain.signature) {\n            delete plain.signature;\n        }\n        let serialized = JSON.stringify(plain);\n        return Buffer.from(serialized);\n    }\n    /**\n     * Converts the transaction object into a ready-to-serialize, plain JavaScript object.\n     * This function is called internally within the signing procedure.\n     *\n     * @param sender The address of the sender (will be provided when called within the signing procedure)\n     */\n    toPlainObject(sender) {\n        return {\n            nonce: this.nonce.valueOf(),\n            value: this.value.toString(),\n            receiver: this.receiver.bech32(),\n            sender: sender ? sender.bech32() : this.sender.bech32(),\n            gasPrice: this.gasPrice.valueOf(),\n            gasLimit: this.gasLimit.valueOf(),\n            data: this.data.isEmpty() ? undefined : this.data.encoded(),\n            chainID: this.chainID.valueOf(),\n            version: this.version.valueOf(),\n            options: this.options.valueOf() == 0 ? undefined : this.options.valueOf(),\n            signature: this.signature.isEmpty() ? undefined : this.signature.hex(),\n        };\n    }\n    /**\n     * Converts a plain object transaction into a Transaction Object.\n     *\n     * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()\n     */\n    static fromPlainObject(plainObjectTransaction) {\n        const tx = new Transaction({\n            nonce: new nonce_1.Nonce(plainObjectTransaction.nonce),\n            value: balance_1.Balance.fromString(plainObjectTransaction.value),\n            receiver: address_1.Address.fromString(plainObjectTransaction.receiver),\n            gasPrice: new networkParams_1.GasPrice(plainObjectTransaction.gasPrice),\n            gasLimit: new networkParams_1.GasLimit(plainObjectTransaction.gasLimit),\n            data: new transactionPayload_1.TransactionPayload(atob(plainObjectTransaction.data)),\n            chainID: new networkParams_1.ChainID(plainObjectTransaction.chainID),\n            version: new networkParams_1.TransactionVersion(plainObjectTransaction.version),\n        });\n        if (plainObjectTransaction.signature) {\n            tx.applySignature(new signature_1.Signature(plainObjectTransaction.signature), address_1.Address.fromString(plainObjectTransaction.sender));\n        }\n        return tx;\n    }\n    /**\n     * Applies the signature on the transaction.\n     *\n     * @param signature The signature, as computed by a {@link ISigner}.\n     * @param signedBy The address of the signer.\n     */\n    applySignature(signature, signedBy) {\n        utils_1.guardEmpty(this.signature, \"signature\");\n        utils_1.guardEmpty(this.hash, \"hash\");\n        this.signature = signature;\n        this.sender = signedBy;\n        this.hash = TransactionHash.compute(this);\n        this.onSigned.emit({ transaction: this, signedBy: signedBy });\n    }\n    /**\n     * Broadcasts a transaction to the Network, via a {@link IProvider}.\n     *\n     * ```\n     * let provider = new ProxyProvider(\"https://gateway.elrond.com\");\n     * // ... Prepare, sign the transaction, then:\n     * await tx.send(provider);\n     * await tx.awaitExecuted(provider);\n     * ```\n     */\n    send(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.hash = yield provider.sendTransaction(this);\n            this.onSent.emit({ transaction: this });\n            return this.hash;\n        });\n    }\n    /**\n     * Simulates a transaction on the Network, via a {@link IProvider}.\n     */\n    simulate(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield provider.simulateTransaction(this);\n        });\n    }\n    /**\n     * Converts a transaction to a ready-to-broadcast object.\n     * Called internally by the {@link IProvider}.\n     */\n    toSendable() {\n        if (this.signature.isEmpty()) {\n            throw new errors.ErrTransactionNotSigned();\n        }\n        return this.toPlainObject();\n    }\n    /**\n     * Fetches a representation of the transaction (whether pending, processed or finalized), as found on the Network.\n     *\n     * @param fetcher The transaction fetcher to use\n     * @param cacheLocally Whether to cache the response locally, on the transaction object\n     * @param awaitNotarized Whether to wait for the transaction to be notarized\n     * @param withResults Whether to wait for the transaction results\n     */\n    getAsOnNetwork(fetcher, cacheLocally = true, awaitNotarized = true, withResults = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.hash.isEmpty()) {\n                throw new errors.ErrTransactionHashUnknown();\n            }\n            // For Smart Contract transactions, wait for their full execution & notarization before returning.\n            let isSmartContractTransaction = this.receiver.isContractAddress();\n            if (isSmartContractTransaction && awaitNotarized) {\n                yield this.awaitNotarized(fetcher);\n            }\n            let response = yield fetcher.getTransaction(this.hash, this.sender, withResults);\n            if (cacheLocally) {\n                this.asOnNetwork = response;\n            }\n            return response;\n        });\n    }\n    /**\n     * Returns the cached representation of the transaction, as previously fetched using {@link Transaction.getAsOnNetwork}.\n     */\n    getAsOnNetworkCached() {\n        return this.asOnNetwork;\n    }\n    awaitSigned() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.signature.isEmpty()) {\n                return;\n            }\n            return new Promise((resolve, _reject) => {\n                this.onSigned.on(() => resolve());\n            });\n        });\n    }\n    awaitHashed() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hash.isEmpty()) {\n                return;\n            }\n            return new Promise((resolve, _reject) => {\n                this.onSigned.on(() => resolve());\n            });\n        });\n    }\n    /**\n     * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties\n     * @param networkConfig {@link NetworkConfig}\n     */\n    computeFee(networkConfig) {\n        let moveBalanceGas = networkConfig.MinGasLimit.valueOf() +\n            this.data.length() * networkConfig.GasPerDataByte.valueOf();\n        if (moveBalanceGas > this.gasLimit.valueOf()) {\n            throw new errors.ErrNotEnoughGas(this.gasLimit.valueOf());\n        }\n        let gasPrice = new bignumber_js_1.BigNumber(this.gasPrice.valueOf());\n        let feeForMove = new bignumber_js_1.BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n        if (moveBalanceGas === this.gasLimit.valueOf()) {\n            return feeForMove;\n        }\n        let diff = new bignumber_js_1.BigNumber(this.gasLimit.valueOf() - moveBalanceGas);\n        let modifiedGasPrice = gasPrice.multipliedBy(new bignumber_js_1.BigNumber(networkConfig.GasPriceModifier.valueOf()));\n        let processingFee = diff.multipliedBy(modifiedGasPrice);\n        return feeForMove.plus(processingFee);\n    }\n    /**\n     * Awaits for a transaction to reach its \"pending\" state - that is, for the transaction to be accepted in the mempool.\n     * Performs polling against the provider, via a {@link TransactionWatcher}.\n     */\n    awaitPending(fetcher) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, fetcher);\n            yield watcher.awaitPending(this.notifyStatusUpdate.bind(this));\n        });\n    }\n    /**\n     * Awaits for a transaction to reach its \"executed\" state - that is, for the transaction to be processed (whether with success or with errors).\n     * Performs polling against the provider, via a {@link TransactionWatcher}.\n     */\n    awaitExecuted(fetcher) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, fetcher);\n            yield watcher.awaitExecuted(this.notifyStatusUpdate.bind(this));\n        });\n    }\n    notifyStatusUpdate(newStatus) {\n        let sameStatus = this.status.equals(newStatus);\n        this.onStatusUpdated.emit({ transaction: this });\n        if (!sameStatus) {\n            this.status = newStatus;\n            this.onStatusChanged.emit({ transaction: this });\n        }\n    }\n    awaitNotarized(fetcher) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, fetcher);\n            yield watcher.awaitNotarized();\n        });\n    }\n}\nexports.Transaction = Transaction;\n/**\n * An abstraction for handling and computing transaction hashes.\n */\nclass TransactionHash extends hash_1.Hash {\n    constructor(hash) {\n        super(hash);\n    }\n    /**\n     * Computes the hash of a transaction.\n     * Not yet implemented.\n     */\n    static compute(transaction) {\n        let serializer = new proto_1.ProtoSerializer();\n        let buffer = serializer.serializeTransaction(transaction);\n        let hash = createTransactionHasher(TRANSACTION_HASH_LENGTH)\n            .update(buffer)\n            .digest(\"hex\");\n        return new TransactionHash(hash);\n    }\n}\nexports.TransactionHash = TransactionHash;\n/**\n * An abstraction for handling and interpreting the \"status\" field of a {@link Transaction}.\n */\nclass TransactionStatus {\n    /**\n     * Creates a new TransactionStatus object.\n     */\n    constructor(status) {\n        this.status = (status || \"\").toLowerCase();\n    }\n    /**\n     * Creates an unknown status.\n     */\n    static createUnknown() {\n        return new TransactionStatus(\"unknown\");\n    }\n    /**\n     * Returns whether the transaction is pending (e.g. in mempool).\n     */\n    isPending() {\n        return (this.status == \"received\" ||\n            this.status == \"pending\" ||\n            this.status == \"partially-executed\");\n    }\n    /**\n     * Returns whether the transaction has been executed (not necessarily with success).\n     */\n    isExecuted() {\n        return this.isSuccessful() || this.isInvalid();\n    }\n    /**\n     * Returns whether the transaction has been executed successfully.\n     */\n    isSuccessful() {\n        return (this.status == \"executed\" ||\n            this.status == \"success\" ||\n            this.status == \"successful\");\n    }\n    /**\n     * Returns whether the transaction has been executed, but with a failure.\n     */\n    isFailed() {\n        return (this.status == \"fail\" ||\n            this.status == \"failed\" ||\n            this.status == \"unsuccessful\" ||\n            this.isInvalid());\n    }\n    /**\n     * Returns whether the transaction has been executed, but marked as invalid (e.g. due to \"insufficient funds\").\n     */\n    isInvalid() {\n        return this.status == \"invalid\";\n    }\n    toString() {\n        return this.status;\n    }\n    valueOf() {\n        return this.status;\n    }\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        return this.status == other.status;\n    }\n}\nexports.TransactionStatus = TransactionStatus;\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"script"}