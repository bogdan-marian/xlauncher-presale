{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\n\nvar signature_1 = require(\"./signature\");\n\nvar address_1 = require(\"./address\");\n\nvar createKeccakHash = require(\"keccak\");\n\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\n\nvar SignableMessage = /*#__PURE__*/function () {\n  function SignableMessage(init) {\n    _classCallCheck(this, SignableMessage);\n\n    this.message = Buffer.from([]);\n    this.signature = new signature_1.Signature();\n    this.version = 1;\n    this.signer = \"ErdJS\";\n    this.address = new address_1.Address();\n    Object.assign(this, init);\n  }\n\n  _createClass(SignableMessage, [{\n    key: \"serializeForSigning\",\n    value: function serializeForSigning() {\n      var messageSize = Buffer.from(this.message.length.toString());\n      var signableMessage = Buffer.concat([messageSize, this.message]);\n      var bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n      return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n  }, {\n    key: \"serializeForSigningRaw\",\n    value: function serializeForSigningRaw() {\n      return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature() {\n      return this.signature;\n    }\n  }, {\n    key: \"applySignature\",\n    value: function applySignature(signature) {\n      this.signature = signature;\n    }\n  }, {\n    key: \"getMessageSize\",\n    value: function getMessageSize() {\n      var messageSize = Buffer.alloc(4);\n      messageSize.writeUInt32BE(this.message.length, 0);\n      return messageSize;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        address: this.address.bech32(),\n        message: \"0x\" + this.message.toString('hex'),\n        signature: \"0x\" + this.signature.hex(),\n        version: this.version,\n        signer: this.signer\n      };\n    }\n  }]);\n\n  return SignableMessage;\n}();\n\nexports.SignableMessage = SignableMessage;","map":{"version":3,"sources":["../src/signableMessage.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAM,gBAAgB,GAAG,OAAO,CAAC,QAAD,CAAhC;;AAEa,OAAA,CAAA,cAAA,GAAiB,8BAAjB;;IAEA,e;EA0BX,yBAAmB,IAAnB,EAAkD;IAAA;;IAChD,KAAK,OAAL,GAAe,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAf;IACA,KAAK,SAAL,GAAiB,IAAI,WAAA,CAAA,SAAJ,EAAjB;IACA,KAAK,OAAL,GAAe,CAAf;IACA,KAAK,MAAL,GAAc,OAAd;IACA,KAAK,OAAL,GAAe,IAAI,SAAA,CAAA,OAAJ,EAAf;IAEA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,IAApB;EACD;;;;WAED,+BAAmB;MACjB,IAAM,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,KAAK,OAAL,CAAa,MAAb,CAAoB,QAApB,EAAZ,CAApB;MACA,IAAM,eAAe,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,WAAD,EAAc,KAAK,OAAnB,CAAd,CAAxB;MACA,IAAI,WAAW,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,OAAA,CAAA,cAAZ,CAAD,EAA8B,eAA9B,CAAd,CAAlB;MAEA,OAAO,gBAAgB,CAAC,WAAD,CAAhB,CAA8B,MAA9B,CAAqC,WAArC,EAAkD,MAAlD,EAAP;IACD;;;WAED,kCAAsB;MACpB,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,KAAK,cAAL,EAAD,EAAwB,KAAK,OAA7B,CAAd,CAAP;IACD;;;WAED,wBAAY;MACV,OAAO,KAAK,SAAZ;IACD;;;WAED,wBAAe,SAAf,EAAmC;MACjC,KAAK,SAAL,GAAiB,SAAjB;IACD;;;WAED,0BAAc;MACZ,IAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,CAApB;MACA,WAAW,CAAC,aAAZ,CAA0B,KAAK,OAAL,CAAa,MAAvC,EAA+C,CAA/C;MAEA,OAAO,WAAP;IACD;;;WAED,kBAAM;MACJ,OAAO;QACL,OAAO,EAAE,KAAK,OAAL,CAAa,MAAb,EADJ;QAEL,OAAO,EAAE,OAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,KAAtB,CAFX;QAGL,SAAS,EAAE,OAAO,KAAK,SAAL,CAAe,GAAf,EAHb;QAIL,OAAO,EAAE,KAAK,OAJT;QAKL,MAAM,EAAE,KAAK;MALR,CAAP;IAOD;;;;;;AAvEH,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\nconst signature_1 = require(\"./signature\");\nconst address_1 = require(\"./address\");\nconst createKeccakHash = require(\"keccak\");\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\nclass SignableMessage {\n    constructor(init) {\n        this.message = Buffer.from([]);\n        this.signature = new signature_1.Signature();\n        this.version = 1;\n        this.signer = \"ErdJS\";\n        this.address = new address_1.Address();\n        Object.assign(this, init);\n    }\n    serializeForSigning() {\n        const messageSize = Buffer.from(this.message.length.toString());\n        const signableMessage = Buffer.concat([messageSize, this.message]);\n        let bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n        return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n    serializeForSigningRaw() {\n        return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n    getSignature() {\n        return this.signature;\n    }\n    applySignature(signature) {\n        this.signature = signature;\n    }\n    getMessageSize() {\n        const messageSize = Buffer.alloc(4);\n        messageSize.writeUInt32BE(this.message.length, 0);\n        return messageSize;\n    }\n    toJSON() {\n        return {\n            address: this.address.bech32(),\n            message: \"0x\" + this.message.toString('hex'),\n            signature: \"0x\" + this.signature.hex(),\n            version: this.version,\n            signer: this.signer,\n        };\n    }\n}\nexports.SignableMessage = SignableMessage;\n//# sourceMappingURL=signableMessage.js.map"]},"metadata":{},"sourceType":"script"}