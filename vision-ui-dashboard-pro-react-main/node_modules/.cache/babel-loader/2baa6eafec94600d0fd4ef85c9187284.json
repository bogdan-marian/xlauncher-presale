{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractLogger = void 0;\n/**\n * Provides a simple interface in order to easily call or query the smart contract's methods.\n */\n\nclass ContractLogger {\n  synchronizedNetworkConfig(networkConfig) {\n    console.log(`Synchronized network config - chainID: ${networkConfig.ChainID.valueOf()}`);\n  }\n\n  transactionCreated(transaction) {\n    console.log(`Tx ${transaction.getHash()} created. Sending...`);\n  }\n\n  deployComplete(transaction, smartContractResults, smartContractAddress) {\n    logReturnMessages(transaction, smartContractResults);\n    console.log(`done. (address: ${smartContractAddress.bech32()} )`);\n  }\n\n  transactionSent(_transaction) {\n    console.log(`awaiting results...`);\n  }\n\n  transactionComplete(_result, _resultData, transaction, smartContractResults) {\n    logReturnMessages(transaction, smartContractResults);\n    console.log(`done.`);\n  }\n\n  queryCreated(_query) {\n    console.log(`Query created. Sending...`);\n  }\n\n  queryComplete(_result, _response) {\n    console.log(`done.`);\n  }\n\n}\n\nexports.ContractLogger = ContractLogger;\n\nfunction logReturnMessages(transaction, smartContractResults) {\n  let immediate = smartContractResults.getImmediate();\n  logSmartContractResultIfMessage(\"(immediate)\", transaction, immediate);\n  let resultingCalls = smartContractResults.getResultingCalls();\n\n  for (let i in resultingCalls) {\n    logSmartContractResultIfMessage(\"(resulting call)\", transaction, resultingCalls[i]);\n  }\n}\n\nfunction logSmartContractResultIfMessage(info, _transaction, smartContractResult) {\n  if (smartContractResult.returnMessage) {\n    console.log(`Return message ${info} message: ${smartContractResult.returnMessage}`);\n  }\n}","map":{"version":3,"sources":["../../../src/smartcontracts/wrapper/contractLogger.ts"],"names":[],"mappings":";;;;;;AAEA;;AAEG;;AACH,MAAa,cAAb,CAA2B;EAEvB,yBAAyB,CAAC,aAAD,EAA6B;IAClD,OAAO,CAAC,GAAR,CAAY,0CAA0C,aAAa,CAAC,OAAd,CAAsB,OAAtB,EAA+B,EAArF;EACH;;EAED,kBAAkB,CAAC,WAAD,EAAyB;IACvC,OAAO,CAAC,GAAR,CAAY,MAAM,WAAW,CAAC,OAAZ,EAAqB,sBAAvC;EACH;;EAED,cAAc,CAAC,WAAD,EAA2B,oBAA3B,EAAuE,oBAAvE,EAAoG;IAC9G,iBAAiB,CAAC,WAAD,EAAc,oBAAd,CAAjB;IACA,OAAO,CAAC,GAAR,CAAY,mBAAmB,oBAAoB,CAAC,MAArB,EAA6B,IAA5D;EACH;;EAED,eAAe,CAAC,YAAD,EAA0B;IACrC,OAAO,CAAC,GAAR,CAAY,qBAAZ;EACH;;EAED,mBAAmB,CAAC,OAAD,EAAe,WAAf,EAAoC,WAApC,EAA8D,oBAA9D,EAAwG;IACvH,iBAAiB,CAAC,WAAD,EAAc,oBAAd,CAAjB;IACA,OAAO,CAAC,GAAR,CAAY,OAAZ;EACH;;EAED,YAAY,CAAC,MAAD,EAAc;IACtB,OAAO,CAAC,GAAR,CAAY,2BAAZ;EACH;;EAED,aAAa,CAAC,OAAD,EAAe,SAAf,EAAuC;IAChD,OAAO,CAAC,GAAR,CAAY,OAAZ;EACH;;AA9BsB;;AAA3B,OAAA,CAAA,cAAA,GAAA,cAAA;;AAiCA,SAAS,iBAAT,CAA2B,WAA3B,EAAqD,oBAArD,EAA+F;EAC3F,IAAI,SAAS,GAAG,oBAAoB,CAAC,YAArB,EAAhB;EACA,+BAA+B,CAAC,aAAD,EAAgB,WAAhB,EAA6B,SAA7B,CAA/B;EAEA,IAAI,cAAc,GAAG,oBAAoB,CAAC,iBAArB,EAArB;;EACA,KAAK,IAAI,CAAT,IAAc,cAAd,EAA8B;IAC1B,+BAA+B,CAAC,kBAAD,EAAqB,WAArB,EAAkC,cAAc,CAAC,CAAD,CAAhD,CAA/B;EACH;AACJ;;AAED,SAAS,+BAAT,CAAyC,IAAzC,EAAuD,YAAvD,EAAkF,mBAAlF,EAAkH;EAC9G,IAAI,mBAAmB,CAAC,aAAxB,EAAuC;IACnC,OAAO,CAAC,GAAR,CAAY,kBAAkB,IAAI,aAAa,mBAAmB,CAAC,aAAa,EAAhF;EACH;AACJ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractLogger = void 0;\n/**\n * Provides a simple interface in order to easily call or query the smart contract's methods.\n */\nclass ContractLogger {\n    synchronizedNetworkConfig(networkConfig) {\n        console.log(`Synchronized network config - chainID: ${networkConfig.ChainID.valueOf()}`);\n    }\n    transactionCreated(transaction) {\n        console.log(`Tx ${transaction.getHash()} created. Sending...`);\n    }\n    deployComplete(transaction, smartContractResults, smartContractAddress) {\n        logReturnMessages(transaction, smartContractResults);\n        console.log(`done. (address: ${smartContractAddress.bech32()} )`);\n    }\n    transactionSent(_transaction) {\n        console.log(`awaiting results...`);\n    }\n    transactionComplete(_result, _resultData, transaction, smartContractResults) {\n        logReturnMessages(transaction, smartContractResults);\n        console.log(`done.`);\n    }\n    queryCreated(_query) {\n        console.log(`Query created. Sending...`);\n    }\n    queryComplete(_result, _response) {\n        console.log(`done.`);\n    }\n}\nexports.ContractLogger = ContractLogger;\nfunction logReturnMessages(transaction, smartContractResults) {\n    let immediate = smartContractResults.getImmediate();\n    logSmartContractResultIfMessage(\"(immediate)\", transaction, immediate);\n    let resultingCalls = smartContractResults.getResultingCalls();\n    for (let i in resultingCalls) {\n        logSmartContractResultIfMessage(\"(resulting call)\", transaction, resultingCalls[i]);\n    }\n}\nfunction logSmartContractResultIfMessage(info, _transaction, smartContractResult) {\n    if (smartContractResult.returnMessage) {\n        console.log(`Return message ${info} message: ${smartContractResult.returnMessage}`);\n    }\n}\n//# sourceMappingURL=contractLogger.js.map"]},"metadata":{},"sourceType":"script"}