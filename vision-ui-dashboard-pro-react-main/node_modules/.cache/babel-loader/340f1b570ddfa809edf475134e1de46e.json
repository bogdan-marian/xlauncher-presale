{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletConnectProvider = void 0;\n\nconst client_1 = __importDefault(require(\"@walletconnect/client\"));\n\nconst address_1 = require(\"../address\");\n\nconst signature_1 = require(\"../signature\");\n\nconst constants_1 = require(\"./constants\");\n\nconst logger_1 = require(\"../logger\");\n\nconst errors_1 = require(\"../errors\");\n\nclass WalletConnectProvider {\n  constructor(httpProvider) {\n    let walletConnectBridge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    let onClientConnect = arguments.length > 2 ? arguments[2] : undefined;\n    this.address = \"\";\n    this.signature = \"\";\n    this.provider = httpProvider;\n    this.walletConnectBridge = walletConnectBridge;\n    this.onClientConnect = onClientConnect;\n  }\n  /**\n   * Initiates wallet connect client.\n   */\n\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.walletConnector = new client_1.default({\n        bridge: this.walletConnectBridge\n      });\n      this.walletConnector.on(\"connect\", this.onConnect.bind(this));\n      this.walletConnector.on(\"session_update\", this.onDisconnect.bind(this));\n      this.walletConnector.on(\"disconnect\", this.onDisconnect.bind(this));\n\n      if (this.walletConnector.connected && this.walletConnector.accounts.length) {\n        const [account] = this.walletConnector.accounts;\n        const [address, signature] = account.split(\".\");\n        yield this.loginAccount(address, signature);\n      }\n\n      return true;\n    });\n  }\n  /**\n   * Returns true if init() was previously called successfully\n   */\n\n\n  isInitialized() {\n    return !!this.walletConnector;\n  }\n  /**\n   * Mocked function, returns isInitialized as an async function\n   */\n\n\n  isConnected() {\n    return new Promise((resolve, _) => resolve(this.isInitialized()));\n  }\n  /**\n   *\n   */\n\n\n  login() {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        yield this.init();\n      }\n\n      if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n        yield this.walletConnector.killSession();\n        logger_1.Logger.trace(\"WalletConnect login started but walletConnect not initialized\");\n        return \"\";\n      }\n\n      yield (_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.createSession({\n        chainId: constants_1.WALLETCONNECT_ELROND_CHAIN_ID\n      });\n\n      if (!((_c = this.walletConnector) === null || _c === void 0 ? void 0 : _c.uri)) {\n        return \"\";\n      }\n\n      return (_d = this.walletConnector) === null || _d === void 0 ? void 0 : _d.uri;\n    });\n  }\n  /**\n   * Mocks a logout request by returning true\n   */\n\n\n  logout() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"logout: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n        yield (_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.killSession();\n      }\n\n      return true;\n    });\n  }\n  /**\n   * Fetches the wallet connect address\n   */\n\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"getAddress: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      return this.address;\n    });\n  }\n  /**\n   * Fetches the wallet connect signature\n   */\n\n\n  getSignature() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"getSignature: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      return this.signature;\n    });\n  }\n  /**\n   * Signs and sends a transaction. Returns the transaction hash\n   * @param transaction\n   */\n\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"sendTransaction: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      transaction = yield this.signTransaction(transaction);\n      yield transaction.send(this.provider);\n      return transaction;\n    });\n  }\n  /**\n   * Method will be available once the Maiar wallet connect hook is implemented\n   * @param _\n   */\n\n\n  signMessage(_) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new errors_1.ErrNotImplemented();\n    });\n  }\n  /**\n   * Signs a transaction and returns it\n   * @param transaction\n   */\n\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"signTransaction: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      const address = yield this.getAddress();\n      const sig = yield this.walletConnector.sendCustomRequest({\n        method: \"erd_sign\",\n        params: this.prepareWalletConnectMessage(transaction, address)\n      });\n\n      if (!sig || !sig.signature) {\n        logger_1.Logger.error(\"signTransaction: Wallet Connect could not sign the transaction\");\n        throw new Error(\"Wallet Connect could not sign the transaction\");\n      }\n\n      transaction.applySignature(new signature_1.Signature(sig.signature), new address_1.Address(address));\n      return transaction;\n    });\n  }\n  /**\n   * Signs an array of transactions and returns it\n   * @param transactions\n   */\n\n\n  signTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"signTransactions: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      const address = yield this.getAddress();\n      const params = transactions.map(transaction => this.prepareWalletConnectMessage(transaction, address));\n      const signatures = yield this.walletConnector.sendCustomRequest({\n        method: \"erd_batch_sign\",\n        params\n      });\n\n      if (!signatures) {\n        logger_1.Logger.error(\"signTransactions: Wallet Connect could not sign the transactions\");\n        throw new Error(\"Wallet Connect could not sign the transactions\");\n      }\n\n      if (Array.isArray(signatures)) {\n        if (transactions.length !== signatures.length) {\n          logger_1.Logger.error(\"signTransactions: Wallet Connect could not sign the transactions. Invalid signatures.\");\n          throw new Error(\"Wallet Connect could not sign the transactions. Invalid signatures.\");\n        }\n\n        transactions.map((transaction, key) => transaction.applySignature(new signature_1.Signature(signatures[key].signature), new address_1.Address(address)));\n        return transactions;\n      }\n\n      transactions[0].applySignature(new signature_1.Signature(signatures.signature), new address_1.Address(address));\n      return transactions;\n    });\n  }\n  /**\n   * Sends a custom method and params and returns the response object\n   */\n\n\n  sendCustomMessage(_ref) {\n    let {\n      method,\n      params\n    } = _ref;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"sendCustomMessage: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      const customMessageResponse = yield this.walletConnector.sendCustomRequest({\n        method,\n        params\n      });\n\n      if (!customMessageResponse) {\n        logger_1.Logger.error(\"sendCustomMessage: Wallet Connect could not send the message\");\n        throw new Error(\"Wallet Connect could not send the message\");\n      }\n\n      return customMessageResponse;\n    });\n  }\n\n  onConnect(error, _ref2) {\n    let {\n      params\n    } = _ref2;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (error) {\n        throw error;\n      }\n\n      if (!params || !params[0]) {\n        logger_1.Logger.error(\"Wallet Connect missing payload\");\n        throw new Error(\"missing payload\");\n      }\n\n      const {\n        accounts: [account]\n      } = params[0];\n      const [address, signature] = account.split(\".\");\n      yield this.loginAccount(address, signature);\n    });\n  }\n\n  onDisconnect(error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (error) {\n        throw error;\n      }\n\n      this.onClientConnect.onClientLogout();\n    });\n  }\n\n  loginAccount(address, signature) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.addressIsValid(address)) {\n        this.address = address;\n\n        if (signature) {\n          this.signature = signature;\n        }\n\n        this.onClientConnect.onClientLogin();\n        return;\n      }\n\n      logger_1.Logger.error(`Wallet Connect invalid address ${address}`);\n\n      if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n        yield (_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.killSession();\n      }\n    });\n  }\n\n  prepareWalletConnectMessage(transaction, address) {\n    return {\n      nonce: transaction.getNonce().valueOf(),\n      from: address,\n      to: transaction.getReceiver().toString(),\n      amount: transaction.getValue().toString(),\n      gasPrice: transaction.getGasPrice().valueOf().toString(),\n      gasLimit: transaction.getGasLimit().valueOf().toString(),\n      data: Buffer.from(transaction.getData().toString().trim()).toString(),\n      chainId: transaction.getChainID().valueOf(),\n      version: transaction.getVersion().valueOf()\n    };\n  }\n\n  addressIsValid(destinationAddress) {\n    try {\n      const addr = new address_1.Address(destinationAddress);\n      return !!addr;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n}\n\nexports.WalletConnectProvider = WalletConnectProvider;","map":{"version":3,"sources":["../../src/dapp/walletConnectProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletConnectProvider = void 0;\nconst client_1 = __importDefault(require(\"@walletconnect/client\"));\nconst address_1 = require(\"../address\");\nconst signature_1 = require(\"../signature\");\nconst constants_1 = require(\"./constants\");\nconst logger_1 = require(\"../logger\");\nconst errors_1 = require(\"../errors\");\nclass WalletConnectProvider {\n    constructor(httpProvider, walletConnectBridge = \"\", onClientConnect) {\n        this.address = \"\";\n        this.signature = \"\";\n        this.provider = httpProvider;\n        this.walletConnectBridge = walletConnectBridge;\n        this.onClientConnect = onClientConnect;\n    }\n    /**\n     * Initiates wallet connect client.\n     */\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.walletConnector = new client_1.default({\n                bridge: this.walletConnectBridge,\n            });\n            this.walletConnector.on(\"connect\", this.onConnect.bind(this));\n            this.walletConnector.on(\"session_update\", this.onDisconnect.bind(this));\n            this.walletConnector.on(\"disconnect\", this.onDisconnect.bind(this));\n            if (this.walletConnector.connected &&\n                this.walletConnector.accounts.length) {\n                const [account] = this.walletConnector.accounts;\n                const [address, signature] = account.split(\".\");\n                yield this.loginAccount(address, signature);\n            }\n            return true;\n        });\n    }\n    /**\n     * Returns true if init() was previously called successfully\n     */\n    isInitialized() {\n        return !!this.walletConnector;\n    }\n    /**\n     * Mocked function, returns isInitialized as an async function\n     */\n    isConnected() {\n        return new Promise((resolve, _) => resolve(this.isInitialized()));\n    }\n    /**\n     *\n     */\n    login() {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                yield this.init();\n            }\n            if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n                yield this.walletConnector.killSession();\n                logger_1.Logger.trace(\"WalletConnect login started but walletConnect not initialized\");\n                return \"\";\n            }\n            yield ((_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.createSession({ chainId: constants_1.WALLETCONNECT_ELROND_CHAIN_ID }));\n            if (!((_c = this.walletConnector) === null || _c === void 0 ? void 0 : _c.uri)) {\n                return \"\";\n            }\n            return (_d = this.walletConnector) === null || _d === void 0 ? void 0 : _d.uri;\n        });\n    }\n    /**\n     * Mocks a logout request by returning true\n     */\n    logout() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"logout: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n                yield ((_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.killSession());\n            }\n            return true;\n        });\n    }\n    /**\n     * Fetches the wallet connect address\n     */\n    getAddress() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"getAddress: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            return this.address;\n        });\n    }\n    /**\n     * Fetches the wallet connect signature\n     */\n    getSignature() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"getSignature: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            return this.signature;\n        });\n    }\n    /**\n     * Signs and sends a transaction. Returns the transaction hash\n     * @param transaction\n     */\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"sendTransaction: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            transaction = yield this.signTransaction(transaction);\n            yield transaction.send(this.provider);\n            return transaction;\n        });\n    }\n    /**\n     * Method will be available once the Maiar wallet connect hook is implemented\n     * @param _\n     */\n    signMessage(_) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new errors_1.ErrNotImplemented();\n        });\n    }\n    /**\n     * Signs a transaction and returns it\n     * @param transaction\n     */\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"signTransaction: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            const address = yield this.getAddress();\n            const sig = yield this.walletConnector.sendCustomRequest({\n                method: \"erd_sign\",\n                params: this.prepareWalletConnectMessage(transaction, address)\n            });\n            if (!sig || !sig.signature) {\n                logger_1.Logger.error(\"signTransaction: Wallet Connect could not sign the transaction\");\n                throw new Error(\"Wallet Connect could not sign the transaction\");\n            }\n            transaction.applySignature(new signature_1.Signature(sig.signature), new address_1.Address(address));\n            return transaction;\n        });\n    }\n    /**\n     * Signs an array of transactions and returns it\n     * @param transactions\n     */\n    signTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"signTransactions: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            const address = yield this.getAddress();\n            const params = transactions.map((transaction) => this.prepareWalletConnectMessage(transaction, address));\n            const signatures = yield this.walletConnector.sendCustomRequest({\n                method: \"erd_batch_sign\",\n                params\n            });\n            if (!signatures) {\n                logger_1.Logger.error(\"signTransactions: Wallet Connect could not sign the transactions\");\n                throw new Error(\"Wallet Connect could not sign the transactions\");\n            }\n            if (Array.isArray(signatures)) {\n                if (transactions.length !== signatures.length) {\n                    logger_1.Logger.error(\"signTransactions: Wallet Connect could not sign the transactions. Invalid signatures.\");\n                    throw new Error(\"Wallet Connect could not sign the transactions. Invalid signatures.\");\n                }\n                transactions.map((transaction, key) => transaction.applySignature(new signature_1.Signature(signatures[key].signature), new address_1.Address(address)));\n                return transactions;\n            }\n            transactions[0].applySignature(new signature_1.Signature(signatures.signature), new address_1.Address(address));\n            return transactions;\n        });\n    }\n    /**\n     * Sends a custom method and params and returns the response object\n     */\n    sendCustomMessage({ method, params, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.walletConnector) {\n                logger_1.Logger.error(\"sendCustomMessage: Wallet Connect not initialised, call init() first\");\n                throw new Error(\"Wallet Connect not initialised, call init() first\");\n            }\n            const customMessageResponse = yield this.walletConnector.sendCustomRequest({\n                method,\n                params,\n            });\n            if (!customMessageResponse) {\n                logger_1.Logger.error(\"sendCustomMessage: Wallet Connect could not send the message\");\n                throw new Error(\"Wallet Connect could not send the message\");\n            }\n            return customMessageResponse;\n        });\n    }\n    onConnect(error, { params }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (error) {\n                throw error;\n            }\n            if (!params || !params[0]) {\n                logger_1.Logger.error(\"Wallet Connect missing payload\");\n                throw new Error(\"missing payload\");\n            }\n            const { accounts: [account], } = params[0];\n            const [address, signature] = account.split(\".\");\n            yield this.loginAccount(address, signature);\n        });\n    }\n    onDisconnect(error) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (error) {\n                throw error;\n            }\n            this.onClientConnect.onClientLogout();\n        });\n    }\n    loginAccount(address, signature) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.addressIsValid(address)) {\n                this.address = address;\n                if (signature) {\n                    this.signature = signature;\n                }\n                this.onClientConnect.onClientLogin();\n                return;\n            }\n            logger_1.Logger.error(`Wallet Connect invalid address ${address}`);\n            if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n                yield ((_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.killSession());\n            }\n        });\n    }\n    prepareWalletConnectMessage(transaction, address) {\n        return {\n            nonce: transaction.getNonce().valueOf(),\n            from: address,\n            to: transaction.getReceiver().toString(),\n            amount: transaction.getValue().toString(),\n            gasPrice: transaction\n                .getGasPrice()\n                .valueOf()\n                .toString(),\n            gasLimit: transaction\n                .getGasLimit()\n                .valueOf()\n                .toString(),\n            data: Buffer.from(transaction\n                .getData()\n                .toString()\n                .trim()).toString(),\n            chainId: transaction.getChainID().valueOf(),\n            version: transaction.getVersion().valueOf(),\n        };\n    }\n    addressIsValid(destinationAddress) {\n        try {\n            const addr = new address_1.Address(destinationAddress);\n            return !!addr;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n}\nexports.WalletConnectProvider = WalletConnectProvider;\n//# sourceMappingURL=walletConnectProvider.js.map"]},"metadata":{},"sourceType":"script"}