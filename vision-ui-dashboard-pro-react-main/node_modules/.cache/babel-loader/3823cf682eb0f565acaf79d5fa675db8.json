{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\n\nconst signature_1 = require(\"./signature\");\n\nconst address_1 = require(\"./address\");\n\nconst createKeccakHash = require(\"keccak\");\n\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\n\nclass SignableMessage {\n  constructor(init) {\n    this.message = Buffer.from([]);\n    this.signature = new signature_1.Signature();\n    this.version = 1;\n    this.signer = \"ErdJS\";\n    this.address = new address_1.Address();\n    Object.assign(this, init);\n  }\n\n  serializeForSigning() {\n    const messageSize = Buffer.from(this.message.length.toString());\n    const signableMessage = Buffer.concat([messageSize, this.message]);\n    let bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n    return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n  }\n\n  serializeForSigningRaw() {\n    return Buffer.concat([this.getMessageSize(), this.message]);\n  }\n\n  getSignature() {\n    return this.signature;\n  }\n\n  applySignature(signature) {\n    this.signature = signature;\n  }\n\n  getMessageSize() {\n    const messageSize = Buffer.alloc(4);\n    messageSize.writeUInt32BE(this.message.length, 0);\n    return messageSize;\n  }\n\n  toJSON() {\n    return {\n      address: this.address.bech32(),\n      message: \"0x\" + this.message.toString('hex'),\n      signature: \"0x\" + this.signature.hex(),\n      version: this.version,\n      signer: this.signer\n    };\n  }\n\n}\n\nexports.SignableMessage = SignableMessage;","map":{"version":3,"sources":["../src/signableMessage.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAM,gBAAgB,GAAG,OAAO,CAAC,QAAD,CAAhC;;AAEa,OAAA,CAAA,cAAA,GAAiB,8BAAjB;;AAEb,MAAa,eAAb,CAA4B;EA0B1B,WAAA,CAAmB,IAAnB,EAAkD;IAChD,KAAK,OAAL,GAAe,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAf;IACA,KAAK,SAAL,GAAiB,IAAI,WAAA,CAAA,SAAJ,EAAjB;IACA,KAAK,OAAL,GAAe,CAAf;IACA,KAAK,MAAL,GAAc,OAAd;IACA,KAAK,OAAL,GAAe,IAAI,SAAA,CAAA,OAAJ,EAAf;IAEA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,IAApB;EACD;;EAED,mBAAmB,GAAA;IACjB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,KAAK,OAAL,CAAa,MAAb,CAAoB,QAApB,EAAZ,CAApB;IACA,MAAM,eAAe,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,WAAD,EAAc,KAAK,OAAnB,CAAd,CAAxB;IACA,IAAI,WAAW,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,OAAA,CAAA,cAAZ,CAAD,EAA8B,eAA9B,CAAd,CAAlB;IAEA,OAAO,gBAAgB,CAAC,WAAD,CAAhB,CAA8B,MAA9B,CAAqC,WAArC,EAAkD,MAAlD,EAAP;EACD;;EAED,sBAAsB,GAAA;IACpB,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,KAAK,cAAL,EAAD,EAAwB,KAAK,OAA7B,CAAd,CAAP;EACD;;EAED,YAAY,GAAA;IACV,OAAO,KAAK,SAAZ;EACD;;EAED,cAAc,CAAC,SAAD,EAAqB;IACjC,KAAK,SAAL,GAAiB,SAAjB;EACD;;EAED,cAAc,GAAA;IACZ,MAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,CAApB;IACA,WAAW,CAAC,aAAZ,CAA0B,KAAK,OAAL,CAAa,MAAvC,EAA+C,CAA/C;IAEA,OAAO,WAAP;EACD;;EAED,MAAM,GAAA;IACJ,OAAO;MACL,OAAO,EAAE,KAAK,OAAL,CAAa,MAAb,EADJ;MAEL,OAAO,EAAE,OAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,KAAtB,CAFX;MAGL,SAAS,EAAE,OAAO,KAAK,SAAL,CAAe,GAAf,EAHb;MAIL,OAAO,EAAE,KAAK,OAJT;MAKL,MAAM,EAAE,KAAK;IALR,CAAP;EAOD;;AAvEyB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\nconst signature_1 = require(\"./signature\");\nconst address_1 = require(\"./address\");\nconst createKeccakHash = require(\"keccak\");\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\nclass SignableMessage {\n    constructor(init) {\n        this.message = Buffer.from([]);\n        this.signature = new signature_1.Signature();\n        this.version = 1;\n        this.signer = \"ErdJS\";\n        this.address = new address_1.Address();\n        Object.assign(this, init);\n    }\n    serializeForSigning() {\n        const messageSize = Buffer.from(this.message.length.toString());\n        const signableMessage = Buffer.concat([messageSize, this.message]);\n        let bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n        return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n    serializeForSigningRaw() {\n        return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n    getSignature() {\n        return this.signature;\n    }\n    applySignature(signature) {\n        this.signature = signature;\n    }\n    getMessageSize() {\n        const messageSize = Buffer.alloc(4);\n        messageSize.writeUInt32BE(this.message.length, 0);\n        return messageSize;\n    }\n    toJSON() {\n        return {\n            address: this.address.bech32(),\n            message: \"0x\" + this.message.toString('hex'),\n            signature: \"0x\" + this.signature.hex(),\n            version: this.version,\n            signer: this.signer,\n        };\n    }\n}\nexports.SignableMessage = SignableMessage;\n//# sourceMappingURL=signableMessage.js.map"]},"metadata":{},"sourceType":"script"}