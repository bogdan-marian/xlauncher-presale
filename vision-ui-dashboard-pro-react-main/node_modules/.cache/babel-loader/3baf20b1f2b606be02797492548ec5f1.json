{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldsBinaryCodec = void 0;\n\nvar typesystem_1 = require(\"../typesystem\");\n\nvar FieldsBinaryCodec = /*#__PURE__*/function () {\n  function FieldsBinaryCodec(binaryCodec) {\n    _classCallCheck(this, FieldsBinaryCodec);\n\n    this.binaryCodec = binaryCodec;\n  }\n\n  _createClass(FieldsBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, fieldDefinitions) {\n      var fields = [];\n      var totalLength = 0;\n\n      var _iterator = _createForOfIteratorHelper(fieldDefinitions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fieldDefinition = _step.value;\n\n          var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, fieldDefinition.type),\n              _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n              decoded = _this$binaryCodec$dec2[0],\n              decodedLength = _this$binaryCodec$dec2[1];\n\n          buffer = buffer.slice(decodedLength);\n          totalLength += decodedLength;\n          var field = new typesystem_1.Field(decoded, fieldDefinition.name);\n          fields.push(field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return [fields, totalLength];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(fields) {\n      var buffers = [];\n\n      var _iterator2 = _createForOfIteratorHelper(fields),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var field = _step2.value;\n          var fieldBuffer = this.binaryCodec.encodeNested(field.value);\n          buffers.push(fieldBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return Buffer.concat(buffers);\n    }\n  }]);\n\n  return FieldsBinaryCodec;\n}();\n\nexports.FieldsBinaryCodec = FieldsBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/fields.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;IAGa,iB;EAGT,2BAAY,WAAZ,EAAoC;IAAA;;IAChC,KAAK,WAAL,GAAmB,WAAnB;EACH;;;;WAED,sBAAa,MAAb,EAA6B,gBAA7B,EAAgE;MAC5D,IAAI,MAAM,GAAY,EAAtB;MACA,IAAI,WAAW,GAAG,CAAlB;;MAF4D,2CAI9B,gBAJ8B;MAAA;;MAAA;QAI5D,oDAAgD;UAAA,IAArC,eAAqC;;UAC5C,4BAA+B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,eAAe,CAAC,IAAtD,CAA/B;UAAA;UAAA,IAAK,OAAL;UAAA,IAAc,aAAd;;UACA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,aAAb,CAAT;UACA,WAAW,IAAI,aAAf;UAEA,IAAI,KAAK,GAAG,IAAI,YAAA,CAAA,KAAJ,CAAU,OAAV,EAAmB,eAAe,CAAC,IAAnC,CAAZ;UACA,MAAM,CAAC,IAAP,CAAY,KAAZ;QACH;MAX2D;QAAA;MAAA;QAAA;MAAA;;MAa5D,OAAO,CAAC,MAAD,EAAS,WAAT,CAAP;IACH;;;WAED,sBAAa,MAAb,EAAyC;MACrC,IAAI,OAAO,GAAa,EAAxB;;MADqC,4CAGjB,MAHiB;MAAA;;MAAA;QAGrC,uDAA4B;UAAA,IAAjB,KAAiB;UACxB,IAAI,WAAW,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,KAAK,CAAC,KAApC,CAAlB;UACA,OAAO,CAAC,IAAR,CAAa,WAAb;QACH;MANoC;QAAA;MAAA;QAAA;MAAA;;MAQrC,OAAO,MAAM,CAAC,MAAP,CAAc,OAAd,CAAP;IACH;;;;;;AAhCL,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldsBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nclass FieldsBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n    }\n    decodeNested(buffer, fieldDefinitions) {\n        let fields = [];\n        let totalLength = 0;\n        for (const fieldDefinition of fieldDefinitions) {\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\n            buffer = buffer.slice(decodedLength);\n            totalLength += decodedLength;\n            let field = new typesystem_1.Field(decoded, fieldDefinition.name);\n            fields.push(field);\n        }\n        return [fields, totalLength];\n    }\n    encodeNested(fields) {\n        let buffers = [];\n        for (const field of fields) {\n            let fieldBuffer = this.binaryCodec.encodeNested(field.value);\n            buffers.push(fieldBuffer);\n        }\n        return Buffer.concat(buffers);\n    }\n}\nexports.FieldsBinaryCodec = FieldsBinaryCodec;\n//# sourceMappingURL=fields.js.map"]},"metadata":{},"sourceType":"script"}