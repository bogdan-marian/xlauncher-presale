{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = void 0;\n/**\n * An object holding Network stats parameters.\n */\n\nclass Stats {\n  constructor() {\n    this.Shards = 0;\n    this.Blocks = 0;\n    this.Accounts = 0;\n    this.Transactions = 0;\n    this.RefreshRate = 0;\n    this.Epoch = 0;\n    this.RoundsPassed = 0;\n    this.RoundsPerEpoch = 0;\n  }\n  /**\n   * Synchronizes a stats object by querying the Network, through a {@link IProvider}.\n   * @param provider The provider to use\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let fresh = yield provider.getNetworkStats();\n      Object.assign(this, fresh);\n    });\n  }\n  /**\n   * Constructs a stats object from a HTTP response (as returned by the provider).\n   */\n\n\n  static fromHttpResponse(payload) {\n    let stats = new Stats();\n    stats.Shards = Number(payload[\"shards\"]);\n    stats.Blocks = Number(payload[\"blocks\"]);\n    stats.Accounts = Number(payload[\"accounts\"]);\n    stats.Transactions = Number(payload[\"transactions\"]);\n    stats.RefreshRate = Number(payload[\"refreshRate\"]);\n    stats.Epoch = Number(payload[\"epoch\"]);\n    stats.RoundsPassed = Number(payload[\"roundsPassed\"]);\n    stats.RoundsPerEpoch = Number(payload[\"roundsPerEpoch\"]);\n    return stats;\n  }\n\n}\n\nexports.Stats = Stats;","map":{"version":3,"sources":["../src/stats.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEG;;AACH,MAAa,KAAb,CAAkB;EAqCd,WAAA,GAAA;IACI,KAAK,MAAL,GAAc,CAAd;IACA,KAAK,MAAL,GAAc,CAAd;IACA,KAAK,QAAL,GAAgB,CAAhB;IACA,KAAK,YAAL,GAAoB,CAApB;IACA,KAAK,WAAL,GAAmB,CAAnB;IACA,KAAK,KAAL,GAAa,CAAb;IACA,KAAK,YAAL,GAAoB,CAApB;IACA,KAAK,cAAL,GAAsB,CAAtB;EACH;EAED;;;AAGG;;;EACG,IAAI,CAAC,QAAD,EAAuB;;MAC7B,IAAI,KAAK,GAAU,MAAM,QAAQ,CAAC,eAAT,EAAzB;MACA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,KAApB;IACH,C;EAAA;EAED;;AAEG;;;EACoB,OAAhB,gBAAgB,CAAC,OAAD,EAAa;IAChC,IAAI,KAAK,GAAG,IAAI,KAAJ,EAAZ;IAEA,KAAK,CAAC,MAAN,GAAe,MAAM,CAAC,OAAO,CAAC,QAAD,CAAR,CAArB;IACA,KAAK,CAAC,MAAN,GAAe,MAAM,CAAC,OAAO,CAAC,QAAD,CAAR,CAArB;IACA,KAAK,CAAC,QAAN,GAAiB,MAAM,CAAC,OAAO,CAAC,UAAD,CAAR,CAAvB;IACA,KAAK,CAAC,YAAN,GAAqB,MAAM,CAAC,OAAO,CAAC,cAAD,CAAR,CAA3B;IACA,KAAK,CAAC,WAAN,GAAoB,MAAM,CAAC,OAAO,CAAC,aAAD,CAAR,CAA1B;IACA,KAAK,CAAC,KAAN,GAAc,MAAM,CAAC,OAAO,CAAC,OAAD,CAAR,CAApB;IACA,KAAK,CAAC,YAAN,GAAqB,MAAM,CAAC,OAAO,CAAC,cAAD,CAAR,CAA3B;IACA,KAAK,CAAC,cAAN,GAAuB,MAAM,CAAC,OAAO,CAAC,gBAAD,CAAR,CAA7B;IAEA,OAAO,KAAP;EACH;;AAzEa;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stats = void 0;\n/**\n * An object holding Network stats parameters.\n */\nclass Stats {\n    constructor() {\n        this.Shards = 0;\n        this.Blocks = 0;\n        this.Accounts = 0;\n        this.Transactions = 0;\n        this.RefreshRate = 0;\n        this.Epoch = 0;\n        this.RoundsPassed = 0;\n        this.RoundsPerEpoch = 0;\n    }\n    /**\n     * Synchronizes a stats object by querying the Network, through a {@link IProvider}.\n     * @param provider The provider to use\n     */\n    sync(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let fresh = yield provider.getNetworkStats();\n            Object.assign(this, fresh);\n        });\n    }\n    /**\n     * Constructs a stats object from a HTTP response (as returned by the provider).\n     */\n    static fromHttpResponse(payload) {\n        let stats = new Stats();\n        stats.Shards = Number(payload[\"shards\"]);\n        stats.Blocks = Number(payload[\"blocks\"]);\n        stats.Accounts = Number(payload[\"accounts\"]);\n        stats.Transactions = Number(payload[\"transactions\"]);\n        stats.RefreshRate = Number(payload[\"refreshRate\"]);\n        stats.Epoch = Number(payload[\"epoch\"]);\n        stats.RoundsPassed = Number(payload[\"roundsPassed\"]);\n        stats.RoundsPerEpoch = Number(payload[\"roundsPerEpoch\"]);\n        return stats;\n    }\n}\nexports.Stats = Stats;\n//# sourceMappingURL=stats.js.map"]},"metadata":{},"sourceType":"script"}