{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeMetadata = void 0;\n/**\n * The metadata of a Smart Contract, as an abstraction.\n */\n\nclass CodeMetadata {\n  /**\n   * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\n   *\n   * @param upgradeable Whether the contract is upgradeable\n   * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\n   * @param payable Whether the contract is payable\n   */\n  constructor() {\n    let upgradeable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let readable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let payable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.upgradeable = upgradeable;\n    this.readable = readable;\n    this.payable = payable;\n  }\n  /**\n   * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\n   */\n\n\n  toggleUpgradeable(value) {\n    this.upgradeable = value;\n  }\n  /**\n   * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\n   */\n\n\n  toggleReadable(value) {\n    this.readable = value;\n  }\n  /**\n   * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\n   */\n\n\n  togglePayable(value) {\n    this.payable = value;\n  }\n  /**\n   * Converts the metadata to the protocol-friendly representation.\n   */\n\n\n  toBuffer() {\n    let byteZero = 0;\n    let byteOne = 0;\n\n    if (this.upgradeable) {\n      byteZero |= ByteZero.Upgradeable;\n    }\n\n    if (this.readable) {\n      byteZero |= ByteZero.Readable;\n    }\n\n    if (this.payable) {\n      byteOne |= ByteOne.Payable;\n    }\n\n    return Buffer.from([byteZero, byteOne]);\n  }\n  /**\n   * Converts the metadata to a hex-encoded string.\n   */\n\n\n  toString() {\n    return this.toBuffer().toString(\"hex\");\n  }\n  /**\n   * Converts the metadata to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      upgradeable: this.upgradeable,\n      readable: this.readable,\n      payable: this.payable\n    };\n  }\n\n  equals(other) {\n    return this.upgradeable == other.upgradeable && this.readable == other.readable && this.payable == other.payable;\n  }\n\n}\n\nexports.CodeMetadata = CodeMetadata;\nvar ByteZero;\n\n(function (ByteZero) {\n  ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\n  ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\n  ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\n})(ByteZero || (ByteZero = {}));\n\nvar ByteOne;\n\n(function (ByteOne) {\n  ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\n  ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\n})(ByteOne || (ByteOne = {}));","map":{"version":3,"sources":["../../src/smartcontracts/codeMetadata.ts"],"names":[],"mappings":";;;;;;AAAA;;AAEG;;AACH,MAAa,YAAb,CAAyB;EAKrB;;;;;;AAMG;EACH,WAAA,GAA4F;IAAA,IAAhF,WAAgF,uEAAzD,IAAyD;IAAA,IAAnD,QAAmD,uEAA/B,KAA+B;IAAA,IAAxB,OAAwB,uEAAL,KAAK;IACxF,KAAK,WAAL,GAAmB,WAAnB;IACA,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,OAAL,GAAe,OAAf;EACH;EAED;;AAEG;;;EACH,iBAAiB,CAAC,KAAD,EAAe;IAC5B,KAAK,WAAL,GAAmB,KAAnB;EACH;EAED;;AAEG;;;EACH,cAAc,CAAC,KAAD,EAAe;IACzB,KAAK,QAAL,GAAgB,KAAhB;EACH;EAED;;AAEG;;;EACH,aAAa,CAAC,KAAD,EAAe;IACxB,KAAK,OAAL,GAAe,KAAf;EACH;EAED;;AAEG;;;EACH,QAAQ,GAAA;IACJ,IAAI,QAAQ,GAAG,CAAf;IACA,IAAI,OAAO,GAAG,CAAd;;IAEA,IAAI,KAAK,WAAT,EAAsB;MAClB,QAAQ,IAAI,QAAQ,CAAC,WAArB;IACH;;IACD,IAAI,KAAK,QAAT,EAAmB;MACf,QAAQ,IAAI,QAAQ,CAAC,QAArB;IACH;;IACD,IAAI,KAAK,OAAT,EAAkB;MACd,OAAO,IAAI,OAAO,CAAC,OAAnB;IACH;;IAED,OAAO,MAAM,CAAC,IAAP,CAAY,CAAC,QAAD,EAAW,OAAX,CAAZ,CAAP;EACH;EAED;;AAEG;;;EACH,QAAQ,GAAA;IACJ,OAAO,KAAK,QAAL,GAAgB,QAAhB,CAAyB,KAAzB,CAAP;EACH;EAED;;AAEG;;;EACH,MAAM,GAAA;IACF,OAAO;MACH,WAAW,EAAE,KAAK,WADf;MAEH,QAAQ,EAAE,KAAK,QAFZ;MAGH,OAAO,EAAE,KAAK;IAHX,CAAP;EAKH;;EAED,MAAM,CAAC,KAAD,EAAoB;IACtB,OAAO,KAAK,WAAL,IAAoB,KAAK,CAAC,WAA1B,IACH,KAAK,QAAL,IAAiB,KAAK,CAAC,QADpB,IAEH,KAAK,OAAL,IAAgB,KAAK,CAAC,OAF1B;EAGH;;AAjFoB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA;AAoFA,IAAK,QAAL;;AAAA,CAAA,UAAK,QAAL,EAAa;EACT,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;EACA,QAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACH,CAJD,EAAK,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAb;;AAMA,IAAK,OAAL;;AAAA,CAAA,UAAK,OAAL,EAAY;EACR,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACH,CAHD,EAAK,OAAO,KAAP,OAAO,GAAA,EAAA,CAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeMetadata = void 0;\n/**\n * The metadata of a Smart Contract, as an abstraction.\n */\nclass CodeMetadata {\n    /**\n     * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\n     *\n     * @param upgradeable Whether the contract is upgradeable\n     * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\n     * @param payable Whether the contract is payable\n     */\n    constructor(upgradeable = true, readable = false, payable = false) {\n        this.upgradeable = upgradeable;\n        this.readable = readable;\n        this.payable = payable;\n    }\n    /**\n     * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\n     */\n    toggleUpgradeable(value) {\n        this.upgradeable = value;\n    }\n    /**\n     * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\n     */\n    toggleReadable(value) {\n        this.readable = value;\n    }\n    /**\n     * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\n     */\n    togglePayable(value) {\n        this.payable = value;\n    }\n    /**\n     * Converts the metadata to the protocol-friendly representation.\n     */\n    toBuffer() {\n        let byteZero = 0;\n        let byteOne = 0;\n        if (this.upgradeable) {\n            byteZero |= ByteZero.Upgradeable;\n        }\n        if (this.readable) {\n            byteZero |= ByteZero.Readable;\n        }\n        if (this.payable) {\n            byteOne |= ByteOne.Payable;\n        }\n        return Buffer.from([byteZero, byteOne]);\n    }\n    /**\n     * Converts the metadata to a hex-encoded string.\n     */\n    toString() {\n        return this.toBuffer().toString(\"hex\");\n    }\n    /**\n     * Converts the metadata to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            upgradeable: this.upgradeable,\n            readable: this.readable,\n            payable: this.payable\n        };\n    }\n    equals(other) {\n        return this.upgradeable == other.upgradeable &&\n            this.readable == other.readable &&\n            this.payable == other.payable;\n    }\n}\nexports.CodeMetadata = CodeMetadata;\nvar ByteZero;\n(function (ByteZero) {\n    ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\n    ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\n    ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\n})(ByteZero || (ByteZero = {}));\nvar ByteOne;\n(function (ByteOne) {\n    ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\n    ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\n})(ByteOne || (ByteOne = {}));\n//# sourceMappingURL=codeMetadata.js.map"]},"metadata":{},"sourceType":"script"}