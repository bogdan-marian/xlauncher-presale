{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Egld = exports.createBalanceBuilder = void 0;\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar _1 = require(\".\");\n\nvar errors_1 = require(\"./errors\");\n\nvar token_1 = require(\"./token\");\n\nvar BalanceBuilderImpl = /*#__PURE__*/function () {\n  function BalanceBuilderImpl(token) {\n    _classCallCheck(this, BalanceBuilderImpl);\n\n    this.token = token;\n    this.nonce_ = null;\n\n    if (token.isFungible()) {\n      this.setNonce(0);\n    }\n  }\n\n  _createClass(BalanceBuilderImpl, [{\n    key: \"value\",\n    value: function value(_value) {\n      _value = applyDenomination(_value, this.token.decimals);\n      return new _1.Balance(this.token, this.getNonce(), _value);\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(value) {\n      return new _1.Balance(this.token, this.getNonce(), value);\n    }\n  }, {\n    key: \"nonce\",\n    value: function nonce(_nonce) {\n      var builder = createBalanceBuilder(this.token);\n      builder.setNonce(_nonce);\n      return builder;\n    }\n  }, {\n    key: \"setNonce\",\n    value: function setNonce(nonce) {\n      this.nonce_ = new bignumber_js_1.default(nonce);\n    }\n  }, {\n    key: \"one\",\n    value: function one() {\n      return this.value(1);\n    }\n  }, {\n    key: \"hasNonce\",\n    value: function hasNonce() {\n      return this.token.isFungible() || this.nonce_ != null;\n    }\n  }, {\n    key: \"getNonce\",\n    value: function getNonce() {\n      if (this.nonce_ == null) {\n        throw new _1.ErrInvariantFailed(\"Nonce was not provided\");\n      }\n\n      return new bignumber_js_1.default(this.nonce_);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return this.token;\n    }\n  }, {\n    key: \"getTokenIdentifier\",\n    value: function getTokenIdentifier() {\n      return this.getToken().getTokenIdentifier();\n    }\n  }]);\n\n  return BalanceBuilderImpl;\n}();\n\nfunction createBalanceBuilder(token) {\n  var impl = new BalanceBuilderImpl(token);\n  var denominated = impl.value.bind(impl);\n  var others = {\n    value: impl.value.bind(impl),\n    raw: impl.raw.bind(impl),\n    nonce: impl.nonce.bind(impl),\n    setNonce: impl.setNonce.bind(impl),\n    one: impl.one.bind(impl),\n    hasNonce: impl.hasNonce.bind(impl),\n    getNonce: impl.getNonce.bind(impl),\n    getToken: impl.getToken.bind(impl),\n    getTokenIdentifier: impl.getTokenIdentifier.bind(impl)\n  };\n  return Object.assign(denominated, others);\n}\n\nexports.createBalanceBuilder = createBalanceBuilder;\n/**\n * Builder for an EGLD value.\n */\n\nexports.Egld = createBalanceBuilder(new token_1.Token({\n  identifier: \"EGLD\",\n  name: \"eGold\",\n  decimals: 18,\n  type: token_1.TokenType.Fungible\n}));\n\nfunction applyDenomination(value, decimals) {\n  if (decimals < 0) {\n    throw new errors_1.ErrInvalidArgument(\"The number of decimals must be positive\");\n  }\n\n  return new bignumber_js_1.default(value).shiftedBy(decimals).decimalPlaces(0);\n}","map":{"version":3,"sources":["../src/balanceBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Egld = exports.createBalanceBuilder = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst _1 = require(\".\");\nconst errors_1 = require(\"./errors\");\nconst token_1 = require(\"./token\");\nclass BalanceBuilderImpl {\n    constructor(token) {\n        this.token = token;\n        this.nonce_ = null;\n        if (token.isFungible()) {\n            this.setNonce(0);\n        }\n    }\n    value(value) {\n        value = applyDenomination(value, this.token.decimals);\n        return new _1.Balance(this.token, this.getNonce(), value);\n    }\n    raw(value) {\n        return new _1.Balance(this.token, this.getNonce(), value);\n    }\n    nonce(nonce) {\n        let builder = createBalanceBuilder(this.token);\n        builder.setNonce(nonce);\n        return builder;\n    }\n    setNonce(nonce) {\n        this.nonce_ = new bignumber_js_1.default(nonce);\n    }\n    one() {\n        return this.value(1);\n    }\n    hasNonce() {\n        return this.token.isFungible() || this.nonce_ != null;\n    }\n    getNonce() {\n        if (this.nonce_ == null) {\n            throw new _1.ErrInvariantFailed(\"Nonce was not provided\");\n        }\n        return new bignumber_js_1.default(this.nonce_);\n    }\n    getToken() {\n        return this.token;\n    }\n    getTokenIdentifier() {\n        return this.getToken().getTokenIdentifier();\n    }\n}\nfunction createBalanceBuilder(token) {\n    let impl = new BalanceBuilderImpl(token);\n    let denominated = impl.value.bind(impl);\n    let others = {\n        value: impl.value.bind(impl),\n        raw: impl.raw.bind(impl),\n        nonce: impl.nonce.bind(impl),\n        setNonce: impl.setNonce.bind(impl),\n        one: impl.one.bind(impl),\n        hasNonce: impl.hasNonce.bind(impl),\n        getNonce: impl.getNonce.bind(impl),\n        getToken: impl.getToken.bind(impl),\n        getTokenIdentifier: impl.getTokenIdentifier.bind(impl)\n    };\n    return Object.assign(denominated, others);\n}\nexports.createBalanceBuilder = createBalanceBuilder;\n/**\n * Builder for an EGLD value.\n */\nexports.Egld = createBalanceBuilder(new token_1.Token({ identifier: \"EGLD\", name: \"eGold\", decimals: 18, type: token_1.TokenType.Fungible }));\nfunction applyDenomination(value, decimals) {\n    if (decimals < 0) {\n        throw new errors_1.ErrInvalidArgument(\"The number of decimals must be positive\");\n    }\n    return new bignumber_js_1.default(value).shiftedBy(decimals).decimalPlaces(0);\n}\n//# sourceMappingURL=balanceBuilder.js.map"]},"metadata":{},"sourceType":"script"}