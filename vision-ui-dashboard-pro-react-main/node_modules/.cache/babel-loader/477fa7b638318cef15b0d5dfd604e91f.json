{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Token = exports.TokenType = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst address_1 = require(\"./address\");\n\nvar TokenType;\n\n(function (TokenType) {\n  TokenType[TokenType[\"Fungible\"] = 0] = \"Fungible\";\n  TokenType[TokenType[\"Semifungible\"] = 1] = \"Semifungible\";\n  TokenType[TokenType[\"Nonfungible\"] = 2] = \"Nonfungible\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\n\nclass Token {\n  constructor(init) {\n    this.identifier = ''; // Token identifier (ticker + random string, eg. MYTOKEN-12345)\n\n    this.name = ''; // Token name (eg. MyTokenName123)\n\n    this.ticker = '';\n    this.type = TokenType.Fungible;\n    this.owner = new address_1.Address();\n    this.supply = '0'; // Circulating supply = initial minted supply + local mints - local burns\n\n    this.decimals = 18;\n    this.isPaused = false;\n    this.canUpgrade = false;\n    this.canMint = false;\n    this.canBurn = false;\n    this.canChangeOwner = false;\n    this.canPause = false;\n    this.canFreeze = false;\n    this.canWipe = false;\n    this.canAddSpecialRoles = false;\n    this.canTransferNftCreateRole = false;\n    this.nftCreateStopped = false;\n    this.wiped = false;\n    Object.assign(this, init);\n  }\n\n  static fromHttpResponse(response) {\n    return new Token({\n      identifier: response.identifier,\n      name: response.name,\n      ticker: response.ticker,\n      type: TokenType[response.type],\n      owner: new address_1.Address(response.owner),\n      supply: response.supply,\n      decimals: response.decimals,\n      isPaused: response.isPaused,\n      canUpgrade: response.canUpgrade,\n      canMint: response.canMint,\n      canBurn: response.canBurn,\n      canChangeOwner: response.canChangeOwner,\n      canPause: response.canPause,\n      canFreeze: response.canFreeze,\n      canWipe: response.canWipe\n    });\n  }\n\n  static fromTokenProperties(tokenIdentifier, results) {\n    let [tokenName, tokenType, owner, supply, ...propertiesBuffers] = results;\n    let properties = parseTokenProperties(propertiesBuffers);\n    return new Token({\n      identifier: tokenIdentifier,\n      type: TokenType[tokenType.toString()],\n      name: tokenName.toString(),\n      owner,\n      supply: supply,\n      decimals: properties.NumDecimals.toNumber(),\n      isPaused: properties.IsPaused,\n      canUpgrade: properties.CanUpgrade,\n      canMint: properties.CanMint,\n      canBurn: properties.CanBurn,\n      canChangeOwner: properties.CanChangeOwner,\n      canPause: properties.CanPause,\n      canFreeze: properties.CanFreeze,\n      canWipe: properties.CanWipe,\n      canAddSpecialRoles: properties.CanAddSpecialRoles,\n      canTransferNftCreateRole: properties.CanTransferNFTCreateRole,\n      nftCreateStopped: properties.NFTCreateStopped,\n      wiped: properties.NumWiped\n    });\n  }\n\n  getTokenName() {\n    return this.name;\n  }\n\n  typeAsString() {\n    return TokenType[this.type];\n  }\n\n  getTokenIdentifier() {\n    return this.identifier;\n  }\n\n  isEgld() {\n    return this.getTokenIdentifier() == \"EGLD\";\n  }\n\n  isFungible() {\n    return !this.isNft();\n  }\n\n  isNft() {\n    switch (this.type) {\n      case TokenType.Fungible:\n        return false;\n\n      case TokenType.Semifungible:\n      case TokenType.Nonfungible:\n        return true;\n    }\n  }\n\n}\n\nexports.Token = Token;\n\nfunction parseValue(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      return new bignumber_js_1.default(value);\n  }\n}\n\nfunction parseTokenProperties(propertiesBuffers) {\n  let properties = {};\n\n  for (let buffer of propertiesBuffers) {\n    let [name, value] = buffer.toString().split(\"-\");\n    properties[name] = parseValue(value);\n  }\n\n  return properties;\n}","map":{"version":3,"sources":["../src/token.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;EACjB,SAAA,CAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;EACA,SAAA,CAAA,SAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;EACA,SAAA,CAAA,SAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACH,CAJD,EAAY,SAAS,GAAT,OAAA,CAAA,SAAA,KAAA,OAAA,CAAA,SAAA,GAAS,EAAT,CAAZ;;AAMA,MAAa,KAAb,CAAkB;EAqBd,WAAA,CAAY,IAAZ,EAAiC;IApBjC,KAAA,UAAA,GAAqB,EAArB,CAoBiC,CApBR;;IACzB,KAAA,IAAA,GAAe,EAAf,CAmBiC,CAnBd;;IACnB,KAAA,MAAA,GAAiB,EAAjB;IACA,KAAA,IAAA,GAAkB,SAAS,CAAC,QAA5B;IACA,KAAA,KAAA,GAAiB,IAAI,SAAA,CAAA,OAAJ,EAAjB;IACA,KAAA,MAAA,GAAiB,GAAjB,CAeiC,CAfX;;IACtB,KAAA,QAAA,GAAmB,EAAnB;IACA,KAAA,QAAA,GAAoB,KAApB;IACA,KAAA,UAAA,GAAsB,KAAtB;IACA,KAAA,OAAA,GAAmB,KAAnB;IACA,KAAA,OAAA,GAAmB,KAAnB;IACA,KAAA,cAAA,GAA0B,KAA1B;IACA,KAAA,QAAA,GAAoB,KAApB;IACA,KAAA,SAAA,GAAqB,KAArB;IACA,KAAA,OAAA,GAAmB,KAAnB;IACA,KAAA,kBAAA,GAA8B,KAA9B;IACA,KAAA,wBAAA,GAAoC,KAApC;IACA,KAAA,gBAAA,GAA4B,KAA5B;IACA,KAAA,KAAA,GAAiB,KAAjB;IAGI,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,IAApB;EACH;;EAEsB,OAAhB,gBAAgB,CAAC,QAAD,EAgBtB;IACG,OAAO,IAAI,KAAJ,CAAU;MACb,UAAU,EAAE,QAAQ,CAAC,UADR;MAEb,IAAI,EAAE,QAAQ,CAAC,IAFF;MAGb,MAAM,EAAE,QAAQ,CAAC,MAHJ;MAIb,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAV,CAJF;MAKb,KAAK,EAAE,IAAI,SAAA,CAAA,OAAJ,CAAY,QAAQ,CAAC,KAArB,CALM;MAMb,MAAM,EAAE,QAAQ,CAAC,MANJ;MAOb,QAAQ,EAAE,QAAQ,CAAC,QAPN;MAQb,QAAQ,EAAE,QAAQ,CAAC,QARN;MASb,UAAU,EAAE,QAAQ,CAAC,UATR;MAUb,OAAO,EAAE,QAAQ,CAAC,OAVL;MAWb,OAAO,EAAE,QAAQ,CAAC,OAXL;MAYb,cAAc,EAAE,QAAQ,CAAC,cAZZ;MAab,QAAQ,EAAE,QAAQ,CAAC,QAbN;MAcb,SAAS,EAAE,QAAQ,CAAC,SAdP;MAeb,OAAO,EAAE,QAAQ,CAAC;IAfL,CAAV,CAAP;EAiBH;;EAEyB,OAAnB,mBAAmB,CAAC,eAAD,EAA0B,OAA1B,EAAwC;IAC9D,IAAI,CAAC,SAAD,EAAY,SAAZ,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,GAAG,iBAAzC,IAA8D,OAAlE;IACA,IAAI,UAAU,GAAG,oBAAoB,CAAC,iBAAD,CAArC;IACA,OAAO,IAAI,KAAJ,CAAU;MACb,UAAU,EAAE,eADC;MAEb,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,QAAV,EAAD,CAFF;MAGb,IAAI,EAAE,SAAS,CAAC,QAAV,EAHO;MAIb,KAJa;MAKb,MAAM,EAAE,MALK;MAMb,QAAQ,EAAE,UAAU,CAAC,WAAX,CAAuB,QAAvB,EANG;MAOb,QAAQ,EAAE,UAAU,CAAC,QAPR;MAQb,UAAU,EAAE,UAAU,CAAC,UARV;MASb,OAAO,EAAE,UAAU,CAAC,OATP;MAUb,OAAO,EAAE,UAAU,CAAC,OAVP;MAWb,cAAc,EAAE,UAAU,CAAC,cAXd;MAYb,QAAQ,EAAE,UAAU,CAAC,QAZR;MAab,SAAS,EAAE,UAAU,CAAC,SAbT;MAcb,OAAO,EAAE,UAAU,CAAC,OAdP;MAeb,kBAAkB,EAAE,UAAU,CAAC,kBAflB;MAgBb,wBAAwB,EAAE,UAAU,CAAC,wBAhBxB;MAiBb,gBAAgB,EAAE,UAAU,CAAC,gBAjBhB;MAkBb,KAAK,EAAE,UAAU,CAAC;IAlBL,CAAV,CAAP;EAoBH;;EAED,YAAY,GAAA;IACR,OAAO,KAAK,IAAZ;EACH;;EAED,YAAY,GAAA;IACR,OAAO,SAAS,CAAC,KAAK,IAAN,CAAhB;EACH;;EAED,kBAAkB,GAAA;IACd,OAAO,KAAK,UAAZ;EACH;;EAED,MAAM,GAAA;IACF,OAAO,KAAK,kBAAL,MAA6B,MAApC;EACH;;EAED,UAAU,GAAA;IACN,OAAO,CAAC,KAAK,KAAL,EAAR;EACH;;EAED,KAAK,GAAA;IACD,QAAQ,KAAK,IAAb;MACI,KAAK,SAAS,CAAC,QAAf;QACI,OAAO,KAAP;;MACJ,KAAK,SAAS,CAAC,YAAf;MACA,KAAK,SAAS,CAAC,WAAf;QACI,OAAO,IAAP;IALR;EAOH;;AAlHa;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA;;AAqHA,SAAS,UAAT,CAAoB,KAApB,EAAiC;EAC7B,QAAQ,KAAR;IACI,KAAK,MAAL;MAAa,OAAO,IAAP;;IACb,KAAK,OAAL;MAAc,OAAO,KAAP;;IACd;MAAS,OAAO,IAAI,cAAA,CAAA,OAAJ,CAAc,KAAd,CAAP;EAHb;AAKH;;AAED,SAAS,oBAAT,CAA8B,iBAA9B,EAAyD;EACrD,IAAI,UAAU,GAAwB,EAAtC;;EACA,KAAK,IAAI,MAAT,IAAmB,iBAAnB,EAAsC;IAClC,IAAI,CAAC,IAAD,EAAO,KAAP,IAAgB,MAAM,CAAC,QAAP,GAAkB,KAAlB,CAAwB,GAAxB,CAApB;IACA,UAAU,CAAC,IAAD,CAAV,GAAmB,UAAU,CAAC,KAAD,CAA7B;EACH;;EACD,OAAO,UAAP;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Token = exports.TokenType = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst address_1 = require(\"./address\");\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"Fungible\"] = 0] = \"Fungible\";\n    TokenType[TokenType[\"Semifungible\"] = 1] = \"Semifungible\";\n    TokenType[TokenType[\"Nonfungible\"] = 2] = \"Nonfungible\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\nclass Token {\n    constructor(init) {\n        this.identifier = ''; // Token identifier (ticker + random string, eg. MYTOKEN-12345)\n        this.name = ''; // Token name (eg. MyTokenName123)\n        this.ticker = '';\n        this.type = TokenType.Fungible;\n        this.owner = new address_1.Address();\n        this.supply = '0'; // Circulating supply = initial minted supply + local mints - local burns\n        this.decimals = 18;\n        this.isPaused = false;\n        this.canUpgrade = false;\n        this.canMint = false;\n        this.canBurn = false;\n        this.canChangeOwner = false;\n        this.canPause = false;\n        this.canFreeze = false;\n        this.canWipe = false;\n        this.canAddSpecialRoles = false;\n        this.canTransferNftCreateRole = false;\n        this.nftCreateStopped = false;\n        this.wiped = false;\n        Object.assign(this, init);\n    }\n    static fromHttpResponse(response) {\n        return new Token({\n            identifier: response.identifier,\n            name: response.name,\n            ticker: response.ticker,\n            type: TokenType[response.type],\n            owner: new address_1.Address(response.owner),\n            supply: response.supply,\n            decimals: response.decimals,\n            isPaused: response.isPaused,\n            canUpgrade: response.canUpgrade,\n            canMint: response.canMint,\n            canBurn: response.canBurn,\n            canChangeOwner: response.canChangeOwner,\n            canPause: response.canPause,\n            canFreeze: response.canFreeze,\n            canWipe: response.canWipe,\n        });\n    }\n    static fromTokenProperties(tokenIdentifier, results) {\n        let [tokenName, tokenType, owner, supply, ...propertiesBuffers] = results;\n        let properties = parseTokenProperties(propertiesBuffers);\n        return new Token({\n            identifier: tokenIdentifier,\n            type: TokenType[tokenType.toString()],\n            name: tokenName.toString(),\n            owner,\n            supply: supply,\n            decimals: properties.NumDecimals.toNumber(),\n            isPaused: properties.IsPaused,\n            canUpgrade: properties.CanUpgrade,\n            canMint: properties.CanMint,\n            canBurn: properties.CanBurn,\n            canChangeOwner: properties.CanChangeOwner,\n            canPause: properties.CanPause,\n            canFreeze: properties.CanFreeze,\n            canWipe: properties.CanWipe,\n            canAddSpecialRoles: properties.CanAddSpecialRoles,\n            canTransferNftCreateRole: properties.CanTransferNFTCreateRole,\n            nftCreateStopped: properties.NFTCreateStopped,\n            wiped: properties.NumWiped\n        });\n    }\n    getTokenName() {\n        return this.name;\n    }\n    typeAsString() {\n        return TokenType[this.type];\n    }\n    getTokenIdentifier() {\n        return this.identifier;\n    }\n    isEgld() {\n        return this.getTokenIdentifier() == \"EGLD\";\n    }\n    isFungible() {\n        return !this.isNft();\n    }\n    isNft() {\n        switch (this.type) {\n            case TokenType.Fungible:\n                return false;\n            case TokenType.Semifungible:\n            case TokenType.Nonfungible:\n                return true;\n        }\n    }\n}\nexports.Token = Token;\nfunction parseValue(value) {\n    switch (value) {\n        case \"true\": return true;\n        case \"false\": return false;\n        default: return new bignumber_js_1.default(value);\n    }\n}\nfunction parseTokenProperties(propertiesBuffers) {\n    let properties = {};\n    for (let buffer of propertiesBuffers) {\n        let [name, value] = buffer.toString().split(\"-\");\n        properties[name] = parseValue(value);\n    }\n    return properties;\n}\n//# sourceMappingURL=token.js.map"]},"metadata":{},"sourceType":"script"}