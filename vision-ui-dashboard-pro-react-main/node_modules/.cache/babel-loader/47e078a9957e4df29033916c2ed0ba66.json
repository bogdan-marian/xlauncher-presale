{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n\nvar _bech = __importStar(require(\"bech32\"));\n\nvar errors = __importStar(require(\"./errors\"));\n/**\n * The human-readable-part of the bech32 addresses.\n */\n\n\nvar HRP = \"erd\";\n/**\n * The length (in bytes) of a public key (from which a bech32 address can be obtained).\n */\n\nvar PUBKEY_LENGTH = 32;\nvar SMART_CONTRACT_HEX_PUBKEY_PREFIX = \"0\".repeat(16);\n/**\n * An Elrond Address, as an immutable object.\n */\n\nvar Address = /*#__PURE__*/function () {\n  /**\n   * Creates an address object, given a raw string (whether a hex pubkey or a Bech32 address), a sequence of bytes, or another Address object.\n   */\n  function Address(value) {\n    _classCallCheck(this, Address);\n\n    // We keep a hex-encoded string as the \"backing\" value\n    this.valueHex = \"\";\n\n    if (!value) {\n      return;\n    }\n\n    if (value instanceof Address) {\n      return Address.fromAddress(value);\n    }\n\n    if (value instanceof Buffer) {\n      return Address.fromBuffer(value);\n    }\n\n    if (typeof value === \"string\") {\n      return Address.fromString(value);\n    }\n\n    throw new errors.ErrAddressCannotCreate(value);\n  }\n  /**\n   * Creates an address object from another address object\n   */\n\n\n  _createClass(Address, [{\n    key: \"hex\",\n    value:\n    /**\n     * Returns the hex representation of the address (pubkey)\n     */\n    function hex() {\n      if (this.isEmpty()) {\n        return \"\";\n      }\n\n      return this.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n\n  }, {\n    key: \"bech32\",\n    value: function bech32() {\n      if (this.isEmpty()) {\n        return \"\";\n      }\n\n      var words = _bech.toWords(this.pubkey());\n\n      var address = _bech.encode(HRP, words);\n\n      return address;\n    }\n    /**\n     * Returns the pubkey as raw bytes (buffer)\n     */\n\n  }, {\n    key: \"pubkey\",\n    value: function pubkey() {\n      if (this.isEmpty()) {\n        return Buffer.from([]);\n      }\n\n      return Buffer.from(this.valueHex, \"hex\");\n    }\n    /**\n     * Throws an error if the address is empty.\n     */\n\n  }, {\n    key: \"assertNotEmpty\",\n    value: function assertNotEmpty() {\n      if (this.isEmpty()) {\n        throw new errors.ErrAddressEmpty();\n      }\n    }\n    /**\n     * Returns whether the address is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.valueHex;\n    }\n    /**\n     * Compares the address to another address\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!other) {\n        return false;\n      }\n\n      return this.valueHex == other.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.bech32();\n    }\n    /**\n     * Converts the address to a pretty, plain JavaScript object.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        bech32: this.bech32(),\n        pubkey: this.hex()\n      };\n    }\n    /**\n     * Creates the Zero address (the one that should be used when deploying smart contracts)\n     */\n\n  }, {\n    key: \"isContractAddress\",\n    value: function isContractAddress() {\n      return this.hex().startsWith(SMART_CONTRACT_HEX_PUBKEY_PREFIX);\n    }\n  }], [{\n    key: \"fromAddress\",\n    value: function fromAddress(address) {\n      return Address.fromValidHex(address.valueHex);\n    }\n  }, {\n    key: \"fromValidHex\",\n    value: function fromValidHex(value) {\n      var result = new Address();\n      result.valueHex = value;\n      return result;\n    }\n    /**\n     * Creates an address object from a Buffer\n     */\n\n  }, {\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer) {\n      if (buffer.length != PUBKEY_LENGTH) {\n        throw new errors.ErrAddressCannotCreate(buffer);\n      }\n\n      return Address.fromValidHex(buffer.toString(\"hex\"));\n    }\n    /**\n     * Creates an address object from a string (hex or bech32)\n     */\n\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      if (Address.isValidHex(value)) {\n        return Address.fromValidHex(value);\n      }\n\n      return Address.fromBech32(value);\n    }\n  }, {\n    key: \"isValidHex\",\n    value: function isValidHex(value) {\n      return Buffer.from(value, \"hex\").length == PUBKEY_LENGTH;\n    }\n    /**\n     * Creates an address object from a hex-encoded string\n     */\n\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(value) {\n      if (!Address.isValidHex(value)) {\n        throw new errors.ErrAddressCannotCreate(value);\n      }\n\n      return Address.fromValidHex(value);\n    }\n    /**\n     * Creates an address object from a bech32-encoded string\n     */\n\n  }, {\n    key: \"fromBech32\",\n    value: function fromBech32(value) {\n      var decoded;\n\n      try {\n        decoded = _bech.decode(value);\n      } catch (err) {\n        throw new errors.ErrAddressCannotCreate(value, err);\n      }\n\n      var prefix = decoded.prefix;\n\n      if (prefix != HRP) {\n        throw new errors.ErrAddressBadHrp(HRP, prefix);\n      }\n\n      var pubkey = Buffer.from(_bech.fromWords(decoded.words));\n\n      if (pubkey.length != PUBKEY_LENGTH) {\n        throw new errors.ErrAddressCannotCreate(value);\n      }\n\n      return Address.fromValidHex(pubkey.toString(\"hex\"));\n    }\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Address(\"0\".repeat(64));\n    }\n  }]);\n\n  return Address;\n}();\n\nexports.Address = Address;","map":{"version":3,"sources":["../src/address.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nconst errors = __importStar(require(\"./errors\"));\n/**\n * The human-readable-part of the bech32 addresses.\n */\nconst HRP = \"erd\";\n/**\n * The length (in bytes) of a public key (from which a bech32 address can be obtained).\n */\nconst PUBKEY_LENGTH = 32;\nconst SMART_CONTRACT_HEX_PUBKEY_PREFIX = \"0\".repeat(16);\n/**\n * An Elrond Address, as an immutable object.\n */\nclass Address {\n    /**\n     * Creates an address object, given a raw string (whether a hex pubkey or a Bech32 address), a sequence of bytes, or another Address object.\n     */\n    constructor(value) {\n        // We keep a hex-encoded string as the \"backing\" value\n        this.valueHex = \"\";\n        if (!value) {\n            return;\n        }\n        if (value instanceof Address) {\n            return Address.fromAddress(value);\n        }\n        if (value instanceof Buffer) {\n            return Address.fromBuffer(value);\n        }\n        if (typeof value === \"string\") {\n            return Address.fromString(value);\n        }\n        throw new errors.ErrAddressCannotCreate(value);\n    }\n    /**\n     * Creates an address object from another address object\n     */\n    static fromAddress(address) {\n        return Address.fromValidHex(address.valueHex);\n    }\n    static fromValidHex(value) {\n        let result = new Address();\n        result.valueHex = value;\n        return result;\n    }\n    /**\n     * Creates an address object from a Buffer\n     */\n    static fromBuffer(buffer) {\n        if (buffer.length != PUBKEY_LENGTH) {\n            throw new errors.ErrAddressCannotCreate(buffer);\n        }\n        return Address.fromValidHex(buffer.toString(\"hex\"));\n    }\n    /**\n     * Creates an address object from a string (hex or bech32)\n     */\n    static fromString(value) {\n        if (Address.isValidHex(value)) {\n            return Address.fromValidHex(value);\n        }\n        return Address.fromBech32(value);\n    }\n    static isValidHex(value) {\n        return Buffer.from(value, \"hex\").length == PUBKEY_LENGTH;\n    }\n    /**\n     * Creates an address object from a hex-encoded string\n     */\n    static fromHex(value) {\n        if (!Address.isValidHex(value)) {\n            throw new errors.ErrAddressCannotCreate(value);\n        }\n        return Address.fromValidHex(value);\n    }\n    /**\n     * Creates an address object from a bech32-encoded string\n     */\n    static fromBech32(value) {\n        let decoded;\n        try {\n            decoded = bech32.decode(value);\n        }\n        catch (err) {\n            throw new errors.ErrAddressCannotCreate(value, err);\n        }\n        let prefix = decoded.prefix;\n        if (prefix != HRP) {\n            throw new errors.ErrAddressBadHrp(HRP, prefix);\n        }\n        let pubkey = Buffer.from(bech32.fromWords(decoded.words));\n        if (pubkey.length != PUBKEY_LENGTH) {\n            throw new errors.ErrAddressCannotCreate(value);\n        }\n        return Address.fromValidHex(pubkey.toString(\"hex\"));\n    }\n    /**\n     * Returns the hex representation of the address (pubkey)\n     */\n    hex() {\n        if (this.isEmpty()) {\n            return \"\";\n        }\n        return this.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n    bech32() {\n        if (this.isEmpty()) {\n            return \"\";\n        }\n        let words = bech32.toWords(this.pubkey());\n        let address = bech32.encode(HRP, words);\n        return address;\n    }\n    /**\n     * Returns the pubkey as raw bytes (buffer)\n     */\n    pubkey() {\n        if (this.isEmpty()) {\n            return Buffer.from([]);\n        }\n        return Buffer.from(this.valueHex, \"hex\");\n    }\n    /**\n     * Throws an error if the address is empty.\n     */\n    assertNotEmpty() {\n        if (this.isEmpty()) {\n            throw new errors.ErrAddressEmpty();\n        }\n    }\n    /**\n     * Returns whether the address is empty.\n     */\n    isEmpty() {\n        return !this.valueHex;\n    }\n    /**\n     * Compares the address to another address\n     */\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        return this.valueHex == other.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n    toString() {\n        return this.bech32();\n    }\n    /**\n     * Converts the address to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            bech32: this.bech32(),\n            pubkey: this.hex()\n        };\n    }\n    /**\n     * Creates the Zero address (the one that should be used when deploying smart contracts)\n     */\n    static Zero() {\n        return new Address(\"0\".repeat(64));\n    }\n    isContractAddress() {\n        return this.hex().startsWith(SMART_CONTRACT_HEX_PUBKEY_PREFIX);\n    }\n}\nexports.Address = Address;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}