{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.H256BinaryCodec = void 0;\n\nconst h256_1 = require(\"../typesystem/h256\");\n\nclass H256BinaryCodec {\n  /**\n   * Reads and decodes a H256Value from a given buffer.\n   *\n   * @param buffer the input buffer\n   */\n  decodeNested(buffer) {\n    // We don't check the size of the buffer, we just read 32 bytes.\n    let slice = buffer.slice(0, 32);\n    return [new h256_1.H256Value(slice), 32];\n  }\n  /**\n   * Reads and decodes a H256Value from a given buffer.\n   *\n   * @param buffer the input buffer\n   */\n\n\n  decodeTopLevel(buffer) {\n    let [decoded, length] = this.decodeNested(buffer);\n    return decoded;\n  }\n  /**\n   * Encodes a H256Value to a buffer.\n   */\n\n\n  encodeNested(primitive) {\n    return primitive.valueOf();\n  }\n  /**\n   * Encodes a H256Value to a buffer.\n   */\n\n\n  encodeTopLevel(primitive) {\n    return primitive.valueOf();\n  }\n\n}\n\nexports.H256BinaryCodec = H256BinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/h256.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,MAAa,eAAb,CAA4B;EACxB;;;;AAIG;EACH,YAAY,CAAC,MAAD,EAAe;IACvB;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAZ;IACA,OAAO,CAAC,IAAI,MAAA,CAAA,SAAJ,CAAc,KAAd,CAAD,EAAuB,EAAvB,CAAP;EACH;EAED;;;;AAIG;;;EACH,cAAc,CAAC,MAAD,EAAe;IACzB,IAAI,CAAC,OAAD,EAAU,MAAV,IAAoB,KAAK,YAAL,CAAkB,MAAlB,CAAxB;IACA,OAAO,OAAP;EACH;EAED;;AAEG;;;EACH,YAAY,CAAC,SAAD,EAAqB;IAC7B,OAAO,SAAS,CAAC,OAAV,EAAP;EACH;EAED;;AAEG;;;EACH,cAAc,CAAC,SAAD,EAAqB;IAC/B,OAAO,SAAS,CAAC,OAAV,EAAP;EACH;;AAlCuB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.H256BinaryCodec = void 0;\nconst h256_1 = require(\"../typesystem/h256\");\nclass H256BinaryCodec {\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeNested(buffer) {\n        // We don't check the size of the buffer, we just read 32 bytes.\n        let slice = buffer.slice(0, 32);\n        return [new h256_1.H256Value(slice), 32];\n    }\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeTopLevel(buffer) {\n        let [decoded, length] = this.decodeNested(buffer);\n        return decoded;\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n    encodeNested(primitive) {\n        return primitive.valueOf();\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n    encodeTopLevel(primitive) {\n        return primitive.valueOf();\n    }\n}\nexports.H256BinaryCodec = H256BinaryCodec;\n//# sourceMappingURL=h256.js.map"]},"metadata":{},"sourceType":"script"}