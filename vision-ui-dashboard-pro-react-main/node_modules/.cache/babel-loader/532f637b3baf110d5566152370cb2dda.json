{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressBinaryCodec = void 0;\n\nconst address_1 = require(\"../../address\");\n\nconst typesystem_1 = require(\"../typesystem\");\n\nclass AddressBinaryCodec {\n  /**\n   * Reads and decodes an AddressValue from a given buffer.\n   *\n   * @param buffer the input buffer\n   */\n  decodeNested(buffer) {\n    // We don't check the size of the buffer, we just read 32 bytes.\n    let slice = buffer.slice(0, 32);\n    let value = new address_1.Address(slice);\n    return [new typesystem_1.AddressValue(value), 32];\n  }\n  /**\n   * Reads and decodes an AddressValue from a given buffer.\n   *\n   * @param buffer the input buffer\n   */\n\n\n  decodeTopLevel(buffer) {\n    let [decoded, length] = this.decodeNested(buffer);\n    return decoded;\n  }\n  /**\n   * Encodes an AddressValue to a buffer.\n   */\n\n\n  encodeNested(primitive) {\n    return primitive.valueOf().pubkey();\n  }\n  /**\n   * Encodes an AddressValue to a buffer.\n   */\n\n\n  encodeTopLevel(primitive) {\n    return primitive.valueOf().pubkey();\n  }\n\n}\n\nexports.AddressBinaryCodec = AddressBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/address.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAa,kBAAb,CAA+B;EAC3B;;;;AAIG;EACH,YAAY,CAAC,MAAD,EAAe;IACvB;IAEA,IAAI,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAZ;IACA,IAAI,KAAK,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY,KAAZ,CAAZ;IACA,OAAO,CAAC,IAAI,YAAA,CAAA,YAAJ,CAAiB,KAAjB,CAAD,EAA0B,EAA1B,CAAP;EACH;EAED;;;;AAIG;;;EACH,cAAc,CAAC,MAAD,EAAe;IACzB,IAAI,CAAC,OAAD,EAAU,MAAV,IAAoB,KAAK,YAAL,CAAkB,MAAlB,CAAxB;IACA,OAAO,OAAP;EACH;EAED;;AAEG;;;EACH,YAAY,CAAC,SAAD,EAAwB;IAChC,OAAO,SAAS,CAAC,OAAV,GAAoB,MAApB,EAAP;EACH;EAED;;AAEG;;;EACH,cAAc,CAAC,SAAD,EAAwB;IAClC,OAAO,SAAS,CAAC,OAAV,GAAoB,MAApB,EAAP;EACH;;AApC0B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressBinaryCodec = void 0;\nconst address_1 = require(\"../../address\");\nconst typesystem_1 = require(\"../typesystem\");\nclass AddressBinaryCodec {\n    /**\n     * Reads and decodes an AddressValue from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeNested(buffer) {\n        // We don't check the size of the buffer, we just read 32 bytes.\n        let slice = buffer.slice(0, 32);\n        let value = new address_1.Address(slice);\n        return [new typesystem_1.AddressValue(value), 32];\n    }\n    /**\n     * Reads and decodes an AddressValue from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeTopLevel(buffer) {\n        let [decoded, length] = this.decodeNested(buffer);\n        return decoded;\n    }\n    /**\n     * Encodes an AddressValue to a buffer.\n     */\n    encodeNested(primitive) {\n        return primitive.valueOf().pubkey();\n    }\n    /**\n     * Encodes an AddressValue to a buffer.\n     */\n    encodeTopLevel(primitive) {\n        return primitive.valueOf().pubkey();\n    }\n}\nexports.AddressBinaryCodec = AddressBinaryCodec;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}