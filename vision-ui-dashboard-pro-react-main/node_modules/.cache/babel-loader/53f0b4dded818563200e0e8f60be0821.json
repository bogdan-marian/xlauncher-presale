{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValueBinaryCodec = void 0;\n\nvar errors = __importStar(require(\"../../errors\"));\n\nvar typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"OptionValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nvar OptionValueBinaryCodec = /*#__PURE__*/function () {\n  function OptionValueBinaryCodec(binaryCodec) {\n    _classCallCheck(this, OptionValueBinaryCodec);\n\n    this.binaryCodec = binaryCodec;\n  }\n\n  _createClass(OptionValueBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      if (buffer[0] == 0x00) {\n        return [typesystem_1.OptionValue.newMissingType(type), 1];\n      }\n\n      if (buffer[0] != 0x01) {\n        throw new errors.ErrCodec(\"invalid buffer for optional value\");\n      }\n\n      var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer.slice(1), type),\n          _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n          decoded = _this$binaryCodec$dec2[0],\n          decodedLength = _this$binaryCodec$dec2[1];\n\n      return [typesystem_1.OptionValue.newProvided(decoded), decodedLength + 1];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      if (buffer.length == 0) {\n        return new typesystem_1.OptionValue(type);\n      }\n\n      if (buffer[0] != 0x01) {\n        throw new errors.ErrCodec(\"invalid buffer for optional value\");\n      }\n\n      var _this$binaryCodec$dec3 = this.binaryCodec.decodeNested(buffer.slice(1), type),\n          _this$binaryCodec$dec4 = _slicedToArray(_this$binaryCodec$dec3, 2),\n          decoded = _this$binaryCodec$dec4[0],\n          decodedLength = _this$binaryCodec$dec4[1];\n\n      return new typesystem_1.OptionValue(type, decoded);\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(optionValue) {\n      if (optionValue.isSet()) {\n        return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n      }\n\n      return Buffer.from([0]);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(optionValue) {\n      if (optionValue.isSet()) {\n        return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n      }\n\n      return Buffer.from([]);\n    }\n  }]);\n\n  return OptionValueBinaryCodec;\n}();\n\nexports.OptionValueBinaryCodec = OptionValueBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/option.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAGA;;;AAGG;;;IACU,sB;EAGT,gCAAY,WAAZ,EAAoC;IAAA;;IAChC,KAAK,WAAL,GAAmB,WAAnB;EACH;;;;WAED,sBAAa,MAAb,EAA6B,IAA7B,EAAuC;MACnC,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;QACnB,OAAO,CAAC,YAAA,CAAA,WAAA,CAAY,cAAZ,CAA2B,IAA3B,CAAD,EAAmC,CAAnC,CAAP;MACH;;MAED,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;QACnB,MAAM,IAAI,MAAM,CAAC,QAAX,CAAoB,mCAApB,CAAN;MACH;;MAED,4BAA+B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAAM,CAAC,KAAP,CAAa,CAAb,CAA9B,EAA+C,IAA/C,CAA/B;MAAA;MAAA,IAAK,OAAL;MAAA,IAAc,aAAd;;MACA,OAAO,CAAC,YAAA,CAAA,WAAA,CAAY,WAAZ,CAAwB,OAAxB,CAAD,EAAmC,aAAa,GAAG,CAAnD,CAAP;IACH;;;WAED,wBAAe,MAAf,EAA+B,IAA/B,EAAyC;MACrC,IAAI,MAAM,CAAC,MAAP,IAAiB,CAArB,EAAwB;QACpB,OAAO,IAAI,YAAA,CAAA,WAAJ,CAAgB,IAAhB,CAAP;MACH;;MAED,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;QACnB,MAAM,IAAI,MAAM,CAAC,QAAX,CAAoB,mCAApB,CAAN;MACH;;MAED,6BAA+B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAAM,CAAC,KAAP,CAAa,CAAb,CAA9B,EAA+C,IAA/C,CAA/B;MAAA;MAAA,IAAK,OAAL;MAAA,IAAc,aAAd;;MACA,OAAO,IAAI,YAAA,CAAA,WAAJ,CAAgB,IAAhB,EAAsB,OAAtB,CAAP;IACH;;;WAED,sBAAa,WAAb,EAAqC;MACjC,IAAI,WAAW,CAAC,KAAZ,EAAJ,EAAyB;QACrB,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CAAD,EAAmB,KAAK,WAAL,CAAiB,YAAjB,CAA8B,WAAW,CAAC,aAAZ,EAA9B,CAAnB,CAAd,CAAP;MACH;;MAED,OAAO,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CAAP;IACH;;;WAED,wBAAe,WAAf,EAAuC;MACnC,IAAI,WAAW,CAAC,KAAZ,EAAJ,EAAyB;QACrB,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CAAD,EAAmB,KAAK,WAAL,CAAiB,YAAjB,CAA8B,WAAW,CAAC,aAAZ,EAA9B,CAAnB,CAAd,CAAP;MACH;;MAED,OAAO,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAP;IACH;;;;;;AA/CL,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionValueBinaryCodec = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"OptionValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nclass OptionValueBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n    }\n    decodeNested(buffer, type) {\n        if (buffer[0] == 0x00) {\n            return [typesystem_1.OptionValue.newMissingType(type), 1];\n        }\n        if (buffer[0] != 0x01) {\n            throw new errors.ErrCodec(\"invalid buffer for optional value\");\n        }\n        let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);\n        return [typesystem_1.OptionValue.newProvided(decoded), decodedLength + 1];\n    }\n    decodeTopLevel(buffer, type) {\n        if (buffer.length == 0) {\n            return new typesystem_1.OptionValue(type);\n        }\n        if (buffer[0] != 0x01) {\n            throw new errors.ErrCodec(\"invalid buffer for optional value\");\n        }\n        let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);\n        return new typesystem_1.OptionValue(type, decoded);\n    }\n    encodeNested(optionValue) {\n        if (optionValue.isSet()) {\n            return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n        }\n        return Buffer.from([0]);\n    }\n    encodeTopLevel(optionValue) {\n        if (optionValue.isSet()) {\n            return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n        }\n        return Buffer.from([]);\n    }\n}\nexports.OptionValueBinaryCodec = OptionValueBinaryCodec;\n//# sourceMappingURL=option.js.map"]},"metadata":{},"sourceType":"script"}