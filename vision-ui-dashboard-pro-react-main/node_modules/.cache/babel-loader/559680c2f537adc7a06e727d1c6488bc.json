{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGasFromValue = exports.SystemWrapper = exports.SystemConstants = void 0;\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst __1 = require(\"..\");\n\nconst __2 = require(\"../..\");\n\nconst testutils_1 = require(\"../../testutils\");\n\nconst nativeSerializer_1 = require(\"../nativeSerializer\");\n\nconst argumentErrorContext_1 = require(\"../argumentErrorContext\");\n\nconst chainSendContext_1 = require(\"./chainSendContext\");\n\nvar SystemConstants;\n\n(function (SystemConstants) {\n  SystemConstants.SYSTEM_ABI_PATH = path_1.default.join(path_1.default.dirname(__filename), \"../../abi\");\n  SystemConstants.ESDT_CONTRACT_ADDRESS = new __2.Address(\"erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzllls8a5w6u\");\n  SystemConstants.MIN_TRANSACTION_GAS = 50000;\n  SystemConstants.ESDT_ISSUE_GAS_LIMIT = 60000000;\n  SystemConstants.ESDT_TRANSFER_GAS_LIMIT = 500000;\n  SystemConstants.ESDT_NFT_TRANSFER_GAS_LIMIT = 1000000;\n  SystemConstants.ESDT_BASE_GAS_LIMIT = 6000000;\n})(SystemConstants = exports.SystemConstants || (exports.SystemConstants = {}));\n\nclass SystemWrapper extends chainSendContext_1.ChainSendContext {\n  constructor(provider, context, sendContract, esdtSystemContract, issueCost, builtinFunctions) {\n    super(context);\n    this.provider = provider;\n    this.sendWrapper = sendContract;\n    this.esdtSystemContract = esdtSystemContract;\n    this.issueCost = issueCost;\n    this.builtinFunctions = builtinFunctions;\n  }\n\n  loadWrapper(projectPath, filenameHint, context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield __1.ContractWrapper.loadProject(this.provider, this.builtinFunctions, projectPath, filenameHint, context);\n    });\n  }\n\n  static getEsdtContractConfig(esdtSystemContract) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let [ownerAddress, baseIssuingCost, minTokenNameLength, maxTokenNameLength] = yield esdtSystemContract.query.getContractConfig();\n      return {\n        ownerAddress,\n        baseIssuingCost: __2.Egld.raw(baseIssuingCost),\n        minTokenNameLength,\n        maxTokenNameLength\n      };\n    });\n  }\n\n  static load(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let context = new __1.SendContext(provider).logger(new __1.ContractLogger());\n      let builtinFunctions = yield __1.ContractWrapper.loadProject(provider, null, SystemConstants.SYSTEM_ABI_PATH, \"builtinFunctions\", context);\n      let sendWrapper = yield __1.ContractWrapper.loadProject(provider, builtinFunctions, SystemConstants.SYSTEM_ABI_PATH, \"sendWrapper\", context);\n      let esdtSystemContract = yield __1.ContractWrapper.loadProject(provider, builtinFunctions, SystemConstants.SYSTEM_ABI_PATH, \"esdtSystemContract\", context);\n      esdtSystemContract.address(SystemConstants.ESDT_CONTRACT_ADDRESS);\n      let issueCost;\n\n      if (provider instanceof testutils_1.MockProvider) {\n        issueCost = __2.Balance.Zero();\n      } else {\n        let contractConfig = yield this.getEsdtContractConfig(esdtSystemContract);\n        issueCost = contractConfig.baseIssuingCost;\n      }\n\n      return new SystemWrapper(provider, context, sendWrapper, esdtSystemContract, issueCost, builtinFunctions);\n    });\n  }\n\n  send(receiver) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let address = nativeSerializer_1.NativeSerializer.convertNativeToAddress(receiver, new argumentErrorContext_1.ArgumentErrorContext(\"send\", \"0\", new __1.EndpointParameterDefinition(\"receiver\", \"\", new __1.AddressType())));\n      yield this.sendWrapper.address(address).autoGas(0).call[\"\"]();\n    });\n  }\n\n  issueFungible() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let {\n        resultingCalls: [issueResult]\n      } = yield this.esdtSystemContract.gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT).value(this.issueCost).results.issue(...args);\n\n      let {\n        tokenIdentifier\n      } = __2.EsdtHelpers.extractFieldsFromEsdtTransferDataField(issueResult.data);\n\n      tokenIdentifier = Buffer.from(tokenIdentifier, \"hex\").toString();\n      return this.recallToken(tokenIdentifier);\n    });\n  }\n\n  issueSemiFungible() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenIdentifier = (yield this.esdtSystemContract.gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT).value(this.issueCost).call.issueSemiFungible(...args)).toString();\n      return this.recallToken(tokenIdentifier);\n    });\n  }\n\n  issueNonFungible() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenIdentifier = (yield this.esdtSystemContract.gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT).value(this.issueCost).call.issueNonFungible(...args)).toString();\n      return this.recallToken(tokenIdentifier);\n    });\n  }\n\n  esdtNftCreate(balanceBuilder) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let nonce = yield this.builtinFunctions.address(this.context.getSender()).gas(SystemConstants.ESDT_BASE_GAS_LIMIT).call.ESDTNFTCreate(balanceBuilder, ...args);\n      return balanceBuilder.nonce(nonce);\n    });\n  }\n\n  recallToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenProperties = yield this.esdtSystemContract.query.getTokenProperties(tokenIdentifier);\n\n      let token = __2.Token.fromTokenProperties(tokenIdentifier, tokenProperties);\n\n      return __2.createBalanceBuilder(token);\n    });\n  }\n\n  getBalance(address, balanceBuilder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let typedAddress = nativeSerializer_1.NativeSerializer.convertNativeToAddress(address, new argumentErrorContext_1.ArgumentErrorContext(\"getBalance\", \"0\", new __1.EndpointParameterDefinition(\"account\", \"\", new __1.AddressType())));\n\n      if (balanceBuilder.getToken().isEgld()) {\n        return yield this.provider.getAccount(typedAddress).then(account => account.balance);\n      }\n\n      let tokenData = yield this.getTokenData(typedAddress, balanceBuilder);\n      return balanceBuilder.raw(tokenData.balance);\n    });\n  }\n\n  getBalanceList(address, balanceBuilder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let typedAddress = nativeSerializer_1.NativeSerializer.convertNativeToAddress(address, new argumentErrorContext_1.ArgumentErrorContext(\"getBalanceList\", \"0\", new __1.EndpointParameterDefinition(\"account\", \"\", new __1.AddressType())));\n\n      if (balanceBuilder.getToken().isNft() && balanceBuilder.hasNonce()) {\n        return [yield this.getBalance(typedAddress, balanceBuilder)];\n      }\n\n      return yield this.provider.getAddressEsdtList(typedAddress).then(esdtList => {\n        let tokenBalances = [];\n        let filterIdentifier = balanceBuilder.getTokenIdentifier() + '-';\n\n        for (let [identifier, details] of Object.entries(esdtList)) {\n          if (identifier.startsWith(filterIdentifier)) {\n            tokenBalances.push(balanceBuilder.nonce(details.nonce).raw(details.balance));\n          }\n        }\n\n        return tokenBalances;\n      });\n    });\n  }\n\n  getTokenData(address, balanceBuilder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenIdentifier = balanceBuilder.getTokenIdentifier();\n\n      if (balanceBuilder.getToken().isFungible()) {\n        return yield this.provider.getAddressEsdt(address, tokenIdentifier);\n      } else {\n        return yield this.provider.getAddressNft(address, tokenIdentifier, balanceBuilder.getNonce());\n      }\n    });\n  }\n\n  currentNonce() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let networkStatus = yield this.provider.getNetworkStatus();\n      return networkStatus.Nonce;\n    });\n  }\n\n}\n\nexports.SystemWrapper = SystemWrapper;\n\nfunction getGasFromValue(baseGas, value) {\n  if (!value || value.isEgld()) {\n    return Math.max(baseGas, SystemConstants.MIN_TRANSACTION_GAS);\n  }\n\n  if (value.token.isFungible()) {\n    return baseGas + SystemConstants.ESDT_TRANSFER_GAS_LIMIT;\n  } else {\n    return baseGas + SystemConstants.ESDT_NFT_TRANSFER_GAS_LIMIT;\n  }\n}\n\nexports.getGasFromValue = getGasFromValue;","map":{"version":3,"sources":["../../../src/smartcontracts/wrapper/systemWrapper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGasFromValue = exports.SystemWrapper = exports.SystemConstants = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst __1 = require(\"..\");\nconst __2 = require(\"../..\");\nconst testutils_1 = require(\"../../testutils\");\nconst nativeSerializer_1 = require(\"../nativeSerializer\");\nconst argumentErrorContext_1 = require(\"../argumentErrorContext\");\nconst chainSendContext_1 = require(\"./chainSendContext\");\nvar SystemConstants;\n(function (SystemConstants) {\n    SystemConstants.SYSTEM_ABI_PATH = path_1.default.join(path_1.default.dirname(__filename), \"../../abi\");\n    SystemConstants.ESDT_CONTRACT_ADDRESS = new __2.Address(\"erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzllls8a5w6u\");\n    SystemConstants.MIN_TRANSACTION_GAS = 50000;\n    SystemConstants.ESDT_ISSUE_GAS_LIMIT = 60000000;\n    SystemConstants.ESDT_TRANSFER_GAS_LIMIT = 500000;\n    SystemConstants.ESDT_NFT_TRANSFER_GAS_LIMIT = 1000000;\n    SystemConstants.ESDT_BASE_GAS_LIMIT = 6000000;\n})(SystemConstants = exports.SystemConstants || (exports.SystemConstants = {}));\nclass SystemWrapper extends chainSendContext_1.ChainSendContext {\n    constructor(provider, context, sendContract, esdtSystemContract, issueCost, builtinFunctions) {\n        super(context);\n        this.provider = provider;\n        this.sendWrapper = sendContract;\n        this.esdtSystemContract = esdtSystemContract;\n        this.issueCost = issueCost;\n        this.builtinFunctions = builtinFunctions;\n    }\n    loadWrapper(projectPath, filenameHint, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield __1.ContractWrapper.loadProject(this.provider, this.builtinFunctions, projectPath, filenameHint, context);\n        });\n    }\n    static getEsdtContractConfig(esdtSystemContract) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let [ownerAddress, baseIssuingCost, minTokenNameLength, maxTokenNameLength] = yield esdtSystemContract.query.getContractConfig();\n            return { ownerAddress, baseIssuingCost: __2.Egld.raw(baseIssuingCost), minTokenNameLength, maxTokenNameLength };\n        });\n    }\n    static load(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context = new __1.SendContext(provider).logger(new __1.ContractLogger());\n            let builtinFunctions = yield __1.ContractWrapper.loadProject(provider, null, SystemConstants.SYSTEM_ABI_PATH, \"builtinFunctions\", context);\n            let sendWrapper = yield __1.ContractWrapper.loadProject(provider, builtinFunctions, SystemConstants.SYSTEM_ABI_PATH, \"sendWrapper\", context);\n            let esdtSystemContract = yield __1.ContractWrapper.loadProject(provider, builtinFunctions, SystemConstants.SYSTEM_ABI_PATH, \"esdtSystemContract\", context);\n            esdtSystemContract.address(SystemConstants.ESDT_CONTRACT_ADDRESS);\n            let issueCost;\n            if (provider instanceof testutils_1.MockProvider) {\n                issueCost = __2.Balance.Zero();\n            }\n            else {\n                let contractConfig = yield this.getEsdtContractConfig(esdtSystemContract);\n                issueCost = contractConfig.baseIssuingCost;\n            }\n            return new SystemWrapper(provider, context, sendWrapper, esdtSystemContract, issueCost, builtinFunctions);\n        });\n    }\n    send(receiver) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let address = nativeSerializer_1.NativeSerializer.convertNativeToAddress(receiver, new argumentErrorContext_1.ArgumentErrorContext(\"send\", \"0\", new __1.EndpointParameterDefinition(\"receiver\", \"\", new __1.AddressType())));\n            yield this.sendWrapper.address(address).autoGas(0).call[\"\"]();\n        });\n    }\n    issueFungible(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { resultingCalls: [issueResult] } = yield this.esdtSystemContract\n                .gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT)\n                .value(this.issueCost)\n                .results.issue(...args);\n            let { tokenIdentifier } = __2.EsdtHelpers.extractFieldsFromEsdtTransferDataField(issueResult.data);\n            tokenIdentifier = Buffer.from(tokenIdentifier, \"hex\").toString();\n            return this.recallToken(tokenIdentifier);\n        });\n    }\n    issueSemiFungible(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let tokenIdentifier = (yield this.esdtSystemContract\n                .gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT)\n                .value(this.issueCost)\n                .call.issueSemiFungible(...args)).toString();\n            return this.recallToken(tokenIdentifier);\n        });\n    }\n    issueNonFungible(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let tokenIdentifier = (yield this.esdtSystemContract\n                .gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT)\n                .value(this.issueCost)\n                .call.issueNonFungible(...args)).toString();\n            return this.recallToken(tokenIdentifier);\n        });\n    }\n    esdtNftCreate(balanceBuilder, ...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let nonce = yield this.builtinFunctions\n                .address(this.context.getSender())\n                .gas(SystemConstants.ESDT_BASE_GAS_LIMIT)\n                .call\n                .ESDTNFTCreate(balanceBuilder, ...args);\n            return balanceBuilder.nonce(nonce);\n        });\n    }\n    recallToken(tokenIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let tokenProperties = yield this.esdtSystemContract.query.getTokenProperties(tokenIdentifier);\n            let token = __2.Token.fromTokenProperties(tokenIdentifier, tokenProperties);\n            return __2.createBalanceBuilder(token);\n        });\n    }\n    getBalance(address, balanceBuilder) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let typedAddress = nativeSerializer_1.NativeSerializer.convertNativeToAddress(address, new argumentErrorContext_1.ArgumentErrorContext(\"getBalance\", \"0\", new __1.EndpointParameterDefinition(\"account\", \"\", new __1.AddressType())));\n            if (balanceBuilder.getToken().isEgld()) {\n                return yield this.provider.getAccount(typedAddress).then((account) => account.balance);\n            }\n            let tokenData = yield this.getTokenData(typedAddress, balanceBuilder);\n            return balanceBuilder.raw(tokenData.balance);\n        });\n    }\n    getBalanceList(address, balanceBuilder) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let typedAddress = nativeSerializer_1.NativeSerializer.convertNativeToAddress(address, new argumentErrorContext_1.ArgumentErrorContext(\"getBalanceList\", \"0\", new __1.EndpointParameterDefinition(\"account\", \"\", new __1.AddressType())));\n            if (balanceBuilder.getToken().isNft() && balanceBuilder.hasNonce()) {\n                return [yield this.getBalance(typedAddress, balanceBuilder)];\n            }\n            return yield this.provider.getAddressEsdtList(typedAddress).then((esdtList) => {\n                let tokenBalances = [];\n                let filterIdentifier = balanceBuilder.getTokenIdentifier() + '-';\n                for (let [identifier, details] of Object.entries(esdtList)) {\n                    if (identifier.startsWith(filterIdentifier)) {\n                        tokenBalances.push(balanceBuilder.nonce(details.nonce).raw(details.balance));\n                    }\n                }\n                return tokenBalances;\n            });\n        });\n    }\n    getTokenData(address, balanceBuilder) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let tokenIdentifier = balanceBuilder.getTokenIdentifier();\n            if (balanceBuilder.getToken().isFungible()) {\n                return yield this.provider.getAddressEsdt(address, tokenIdentifier);\n            }\n            else {\n                return yield this.provider.getAddressNft(address, tokenIdentifier, balanceBuilder.getNonce());\n            }\n        });\n    }\n    currentNonce() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let networkStatus = yield this.provider.getNetworkStatus();\n            return networkStatus.Nonce;\n        });\n    }\n}\nexports.SystemWrapper = SystemWrapper;\nfunction getGasFromValue(baseGas, value) {\n    if (!value || value.isEgld()) {\n        return Math.max(baseGas, SystemConstants.MIN_TRANSACTION_GAS);\n    }\n    if (value.token.isFungible()) {\n        return baseGas + SystemConstants.ESDT_TRANSFER_GAS_LIMIT;\n    }\n    else {\n        return baseGas + SystemConstants.ESDT_NFT_TRANSFER_GAS_LIMIT;\n    }\n}\nexports.getGasFromValue = getGasFromValue;\n//# sourceMappingURL=systemWrapper.js.map"]},"metadata":{},"sourceType":"script"}