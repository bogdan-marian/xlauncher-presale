{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionOnNetwork = void 0;\n\nvar address_1 = require(\"../address\");\n\nvar balance_1 = require(\"../balance\");\n\nvar hash_1 = require(\"../hash\");\n\nvar networkParams_1 = require(\"../networkParams\");\n\nvar nonce_1 = require(\"../nonce\");\n\nvar signature_1 = require(\"../signature\");\n\nvar transaction_1 = require(\"../transaction\");\n\nvar transactionLogs_1 = require(\"../transactionLogs\");\n\nvar transactionPayload_1 = require(\"../transactionPayload\");\n\nvar contractResults_1 = require(\"./contractResults\");\n\nvar TransactionOnNetwork = /*#__PURE__*/function () {\n  function TransactionOnNetwork() {\n    _classCallCheck(this, TransactionOnNetwork);\n\n    this.hash = new transaction_1.TransactionHash(\"\");\n    this.nonce = new nonce_1.Nonce(0);\n    this.round = 0;\n    this.epoch = 0;\n    this.value = balance_1.Balance.Zero();\n    this.receiver = new address_1.Address();\n    this.sender = new address_1.Address();\n    this.gasPrice = new networkParams_1.GasPrice(0);\n    this.gasLimit = new networkParams_1.GasLimit(0);\n    this.data = new transactionPayload_1.TransactionPayload();\n    this.signature = signature_1.Signature.empty();\n    this.status = transaction_1.TransactionStatus.createUnknown();\n    this.timestamp = 0;\n    this.blockNonce = new nonce_1.Nonce(0);\n    this.hyperblockNonce = new nonce_1.Nonce(0);\n    this.hyperblockHash = hash_1.Hash.empty();\n    this.logs = transactionLogs_1.TransactionLogs.empty();\n    this.contractResults = contractResults_1.ContractResults.empty();\n  }\n\n  _createClass(TransactionOnNetwork, [{\n    key: \"getDateTime\",\n    value: function getDateTime() {\n      return new Date(this.timestamp * 1000);\n    }\n  }], [{\n    key: \"fromProxyHttpResponse\",\n    value: function fromProxyHttpResponse(txHash, response) {\n      var result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n      result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []); // TODO: uniformize transaction status\n\n      return result;\n    }\n  }, {\n    key: \"fromApiHttpResponse\",\n    value: function fromApiHttpResponse(txHash, response) {\n      var result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n      result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []); // TODO: uniformize transaction status\n\n      return result;\n    }\n  }, {\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(txHash, response) {\n      var result = new TransactionOnNetwork();\n      result.hash = txHash;\n      result.nonce = new nonce_1.Nonce(response.nonce || 0);\n      result.round = response.round;\n      result.epoch = response.epoch || 0;\n      result.value = balance_1.Balance.fromString(response.value);\n      result.sender = address_1.Address.fromBech32(response.sender);\n      result.receiver = address_1.Address.fromBech32(response.receiver);\n      result.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n      result.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n      result.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);\n      result.status = new transaction_1.TransactionStatus(response.status);\n      result.timestamp = response.timestamp || 0;\n      result.blockNonce = new nonce_1.Nonce(response.blockNonce || 0);\n      result.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);\n      result.hyperblockHash = new hash_1.Hash(response.hyperblockHash);\n      result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n      return result;\n    }\n  }]);\n\n  return TransactionOnNetwork;\n}();\n\nexports.TransactionOnNetwork = TransactionOnNetwork;","map":{"version":3,"sources":["../../src/networkProvider/transactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionOnNetwork = void 0;\nconst address_1 = require(\"../address\");\nconst balance_1 = require(\"../balance\");\nconst hash_1 = require(\"../hash\");\nconst networkParams_1 = require(\"../networkParams\");\nconst nonce_1 = require(\"../nonce\");\nconst signature_1 = require(\"../signature\");\nconst transaction_1 = require(\"../transaction\");\nconst transactionLogs_1 = require(\"../transactionLogs\");\nconst transactionPayload_1 = require(\"../transactionPayload\");\nconst contractResults_1 = require(\"./contractResults\");\nclass TransactionOnNetwork {\n    constructor() {\n        this.hash = new transaction_1.TransactionHash(\"\");\n        this.nonce = new nonce_1.Nonce(0);\n        this.round = 0;\n        this.epoch = 0;\n        this.value = balance_1.Balance.Zero();\n        this.receiver = new address_1.Address();\n        this.sender = new address_1.Address();\n        this.gasPrice = new networkParams_1.GasPrice(0);\n        this.gasLimit = new networkParams_1.GasLimit(0);\n        this.data = new transactionPayload_1.TransactionPayload();\n        this.signature = signature_1.Signature.empty();\n        this.status = transaction_1.TransactionStatus.createUnknown();\n        this.timestamp = 0;\n        this.blockNonce = new nonce_1.Nonce(0);\n        this.hyperblockNonce = new nonce_1.Nonce(0);\n        this.hyperblockHash = hash_1.Hash.empty();\n        this.logs = transactionLogs_1.TransactionLogs.empty();\n        this.contractResults = contractResults_1.ContractResults.empty();\n    }\n    static fromProxyHttpResponse(txHash, response) {\n        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n        result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);\n        // TODO: uniformize transaction status\n        return result;\n    }\n    static fromApiHttpResponse(txHash, response) {\n        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n        result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);\n        // TODO: uniformize transaction status\n        return result;\n    }\n    static fromHttpResponse(txHash, response) {\n        let result = new TransactionOnNetwork();\n        result.hash = txHash;\n        result.nonce = new nonce_1.Nonce(response.nonce || 0);\n        result.round = response.round;\n        result.epoch = response.epoch || 0;\n        result.value = balance_1.Balance.fromString(response.value);\n        result.sender = address_1.Address.fromBech32(response.sender);\n        result.receiver = address_1.Address.fromBech32(response.receiver);\n        result.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n        result.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n        result.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);\n        result.status = new transaction_1.TransactionStatus(response.status);\n        result.timestamp = response.timestamp || 0;\n        result.blockNonce = new nonce_1.Nonce(response.blockNonce || 0);\n        result.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);\n        result.hyperblockHash = new hash_1.Hash(response.hyperblockHash);\n        result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n        return result;\n    }\n    getDateTime() {\n        return new Date(this.timestamp * 1000);\n    }\n}\nexports.TransactionOnNetwork = TransactionOnNetwork;\n//# sourceMappingURL=transactions.js.map"]},"metadata":{},"sourceType":"script"}