{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EsdtHelpers = void 0;\n\nvar scArgumentsParser_1 = require(\"./scArgumentsParser\");\n\nvar errors_1 = require(\"./errors\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar constants_1 = require(\"./constants\");\n/**\n * This class exposes static methods that are useful for parsing ESDT transfer transactions\n */\n\n\nvar EsdtHelpers = /*#__PURE__*/function () {\n  function EsdtHelpers() {\n    _classCallCheck(this, EsdtHelpers);\n  }\n\n  _createClass(EsdtHelpers, null, [{\n    key: \"extractFieldsFromEsdtTransferDataField\",\n    value:\n    /**\n     * This function will return the token identifier and the amount from a given data field for an ESDT transfer, or\n     * an exception if something went wrong\n     * @param dataField this field represents the data filed to extract esdt transfer data from\n     * @throws ErrInvalidEsdtTransferDataField this function throws an ErrInvalidEsdtTransferDataField if the provided data field isn't meant to be an ESDT transfer\n     * @return {tokenIdentifier, amount} this function returns a pair of token identifier and amount to transfer\n     */\n    function extractFieldsFromEsdtTransferDataField(dataField) {\n      if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n        throw new errors_1.ErrInvalidEsdtTransferDataField();\n      }\n\n      var _scArgumentsParser_1$ = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField),\n          args = _scArgumentsParser_1$.args;\n\n      if (args.length != 2) {\n        throw new errors_1.ErrInvalidEsdtTransferDataField();\n      }\n\n      var tokenIdentifier = args[0];\n      var amount = new bignumber_js_1.default(args[1], 16).toString(10);\n      return {\n        tokenIdentifier: tokenIdentifier,\n        amount: amount\n      };\n    }\n    /**\n     * This function checks if the data field represents a valid ESDT transfer call\n     * @param dataField this field represents the string to be checked if it would trigger an ESDT transfer call\n     * @return true if the provided data field is meant to be an ESDT transfer\n     */\n\n  }, {\n    key: \"isEsdtTransferTransaction\",\n    value: function isEsdtTransferTransaction(dataField) {\n      if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n        return false;\n      }\n\n      var args;\n\n      try {\n        args = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField).args;\n      } catch (e) {\n        return false;\n      }\n\n      return args.length === 2;\n    }\n    /**\n     * getTxFieldsForEsdtTransfer returns the needed value, gasLimit and data field (in string format) for sending an amount of ESDT token\n     * @param tokenIdentifier this field represents the identifier of the token to transfer\n     * @param amount this field represents the denominated amount of the token to send\n     * @return {value, gasLimit, data} this function returns the value, the gas limit and the data field to use\n     */\n\n  }, {\n    key: \"getTxFieldsForEsdtTransfer\",\n    value: function getTxFieldsForEsdtTransfer(tokenIdentifier, amount) {\n      var encodedAmount = new bignumber_js_1.default(amount, 10).toString(16);\n      var txDataField = [constants_1.ESDT_TRANSFER_FUNCTION_NAME, tokenIdentifier, encodedAmount].join(\"@\");\n      return {\n        value: constants_1.ESDT_TRANSFER_VALUE,\n        gasLimit: constants_1.ESDT_TRANSFER_GAS_LIMIT,\n        data: txDataField\n      };\n    }\n  }]);\n\n  return EsdtHelpers;\n}();\n\nexports.EsdtHelpers = EsdtHelpers;","map":{"version":3,"sources":["../src/esdtHelpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;AAEG;;;IACU,W;;;;;;;;IAET;;;;;;AAMG;IACI,gDAA8C,SAA9C,EAA+D;MAClE,IAAI,CAAC,SAAS,CAAC,UAAV,CAAqB,WAAA,CAAA,2BAAA,GAA8B,GAAnD,CAAL,EAA8D;QAC1D,MAAM,IAAI,QAAA,CAAA,+BAAJ,EAAN;MACH;;MAED,4BAAa,mBAAA,CAAA,iBAAA,CAAkB,+BAAlB,CAAkD,SAAlD,CAAb;MAAA,IAAK,IAAL,yBAAK,IAAL;;MAEA,IAAI,IAAI,CAAC,MAAL,IAAe,CAAnB,EAAsB;QAClB,MAAM,IAAI,QAAA,CAAA,+BAAJ,EAAN;MACH;;MAED,IAAI,eAAe,GAAG,IAAI,CAAC,CAAD,CAA1B;MACA,IAAI,MAAM,GAAG,IAAI,cAAA,CAAA,OAAJ,CAAc,IAAI,CAAC,CAAD,CAAlB,EAAuB,EAAvB,EAA2B,QAA3B,CAAoC,EAApC,CAAb;MAEA,OAAO;QACH,eAAe,EAAE,eADd;QAEH,MAAM,EAAE;MAFL,CAAP;IAIH;IAED;;;;AAIG;;;;WACI,mCAAiC,SAAjC,EAAkD;MACrD,IAAI,CAAC,SAAS,CAAC,UAAV,CAAqB,WAAA,CAAA,2BAAA,GAA8B,GAAnD,CAAL,EAA8D;QAC1D,OAAO,KAAP;MACH;;MAED,IAAI,IAAJ;;MACA,IAAI;QACA,IAAI,GAAG,mBAAA,CAAA,iBAAA,CAAkB,+BAAlB,CAAkD,SAAlD,EAA6D,IAApE;MACH,CAFD,CAEE,OAAO,CAAP,EAAU;QACR,OAAO,KAAP;MACH;;MAED,OAAO,IAAI,CAAC,MAAL,KAAgB,CAAvB;IACH;IAED;;;;;AAKG;;;;WACI,oCAAkC,eAAlC,EAA2D,MAA3D,EAAyE;MAC5E,IAAM,aAAa,GAAG,IAAI,cAAA,CAAA,OAAJ,CAAc,MAAd,EAAsB,EAAtB,EAA0B,QAA1B,CAAmC,EAAnC,CAAtB;MACA,IAAM,WAAW,GAAG,CAAC,WAAA,CAAA,2BAAD,EAA8B,eAA9B,EAA+C,aAA/C,EAA8D,IAA9D,CAAmE,GAAnE,CAApB;MAEA,OAAO;QACH,KAAK,EAAE,WAAA,CAAA,mBADJ;QAEH,QAAQ,EAAE,WAAA,CAAA,uBAFP;QAGH,IAAI,EAAE;MAHH,CAAP;IAKH;;;;;;AAhEL,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EsdtHelpers = void 0;\nconst scArgumentsParser_1 = require(\"./scArgumentsParser\");\nconst errors_1 = require(\"./errors\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst constants_1 = require(\"./constants\");\n/**\n * This class exposes static methods that are useful for parsing ESDT transfer transactions\n */\nclass EsdtHelpers {\n    /**\n     * This function will return the token identifier and the amount from a given data field for an ESDT transfer, or\n     * an exception if something went wrong\n     * @param dataField this field represents the data filed to extract esdt transfer data from\n     * @throws ErrInvalidEsdtTransferDataField this function throws an ErrInvalidEsdtTransferDataField if the provided data field isn't meant to be an ESDT transfer\n     * @return {tokenIdentifier, amount} this function returns a pair of token identifier and amount to transfer\n     */\n    static extractFieldsFromEsdtTransferDataField(dataField) {\n        if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n            throw new errors_1.ErrInvalidEsdtTransferDataField();\n        }\n        let { args } = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField);\n        if (args.length != 2) {\n            throw new errors_1.ErrInvalidEsdtTransferDataField();\n        }\n        let tokenIdentifier = args[0];\n        let amount = new bignumber_js_1.default(args[1], 16).toString(10);\n        return {\n            tokenIdentifier: tokenIdentifier,\n            amount: amount\n        };\n    }\n    /**\n     * This function checks if the data field represents a valid ESDT transfer call\n     * @param dataField this field represents the string to be checked if it would trigger an ESDT transfer call\n     * @return true if the provided data field is meant to be an ESDT transfer\n     */\n    static isEsdtTransferTransaction(dataField) {\n        if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n            return false;\n        }\n        let args;\n        try {\n            args = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField).args;\n        }\n        catch (e) {\n            return false;\n        }\n        return args.length === 2;\n    }\n    /**\n     * getTxFieldsForEsdtTransfer returns the needed value, gasLimit and data field (in string format) for sending an amount of ESDT token\n     * @param tokenIdentifier this field represents the identifier of the token to transfer\n     * @param amount this field represents the denominated amount of the token to send\n     * @return {value, gasLimit, data} this function returns the value, the gas limit and the data field to use\n     */\n    static getTxFieldsForEsdtTransfer(tokenIdentifier, amount) {\n        const encodedAmount = new bignumber_js_1.default(amount, 10).toString(16);\n        const txDataField = [constants_1.ESDT_TRANSFER_FUNCTION_NAME, tokenIdentifier, encodedAmount].join(\"@\");\n        return {\n            value: constants_1.ESDT_TRANSFER_VALUE,\n            gasLimit: constants_1.ESDT_TRANSFER_GAS_LIMIT,\n            data: txDataField\n        };\n    }\n}\nexports.EsdtHelpers = EsdtHelpers;\n//# sourceMappingURL=esdtHelpers.js.map"]},"metadata":{},"sourceType":"script"}