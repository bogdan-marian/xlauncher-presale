{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\n\nconst transactionPayload_1 = require(\"../transactionPayload\");\n\nconst utils_1 = require(\"../utils\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst argSerializer_1 = require(\"./argSerializer\");\n\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\n\nclass ContractDeployPayloadBuilder {\n  constructor() {\n    this.code = null;\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n\n\n  setCode(code) {\n    this.code = code;\n    return this;\n  }\n  /**\n   * Sets the code metadata of the Smart Contract.\n   */\n\n\n  setCodeMetadata(codeMetadata) {\n    this.codeMetadata = codeMetadata;\n    return this;\n  }\n  /**\n   * Adds constructor (`init`) arguments.\n   */\n\n\n  addInitArg(arg) {\n    this.arguments.push(arg);\n    return this;\n  }\n  /**\n   * Sets constructor (`init`) arguments.\n   */\n\n\n  setInitArgs(args) {\n    this.arguments = args;\n    return this;\n  }\n  /**\n   * Builds the {@link TransactionPayload}.\n   */\n\n\n  build() {\n    utils_1.guardValueIsSet(\"code\", this.code);\n    let code = this.code.toString();\n    let codeMetadata = this.codeMetadata.toString();\n    let data = `${code}@${exports.ArwenVirtualMachine}@${codeMetadata}`;\n    data = appendArgumentsToString(data, this.arguments);\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\n\nclass ContractUpgradePayloadBuilder {\n  constructor() {\n    this.code = null;\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n\n\n  setCode(code) {\n    this.code = code;\n    return this;\n  }\n  /**\n   * Sets the code metadata of the Smart Contract.\n   */\n\n\n  setCodeMetadata(codeMetadata) {\n    this.codeMetadata = codeMetadata;\n    return this;\n  }\n  /**\n   * Adds upgrade (`init`) arguments.\n   */\n\n\n  addInitArg(arg) {\n    this.arguments.push(arg);\n    return this;\n  }\n  /**\n   * Sets upgrade (`init`) arguments.\n   */\n\n\n  setInitArgs(args) {\n    this.arguments = args;\n    return this;\n  }\n  /**\n   * Builds the {@link TransactionPayload}.\n   */\n\n\n  build() {\n    utils_1.guardValueIsSet(\"code\", this.code);\n    let code = this.code.toString();\n    let codeMetadata = this.codeMetadata.toString();\n    let data = `upgradeContract@${code}@${codeMetadata}`;\n    data = appendArgumentsToString(data, this.arguments);\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\n\nclass ContractCallPayloadBuilder {\n  constructor() {\n    this.contractFunction = null;\n    this.arguments = [];\n  }\n  /**\n   * Sets the function to be called (executed).\n   */\n\n\n  setFunction(contractFunction) {\n    this.contractFunction = contractFunction;\n    return this;\n  }\n  /**\n   * Adds a function argument.\n   */\n\n\n  addArg(arg) {\n    this.arguments.push(arg);\n    return this;\n  }\n  /**\n   * Sets the function arguments.\n   */\n\n\n  setArgs(args) {\n    this.arguments = args;\n    return this;\n  }\n  /**\n   * Builds the {@link TransactionPayload}.\n   */\n\n\n  build() {\n    utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n    let data = this.contractFunction.name;\n    data = appendArgumentsToString(data, this.arguments);\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\n\nfunction appendArgumentsToString(to, values) {\n  let {\n    argumentsString,\n    count\n  } = new argSerializer_1.ArgSerializer().valuesToString(values);\n\n  if (count == 0) {\n    return to;\n  }\n\n  return `${to}@${argumentsString}`;\n}","map":{"version":3,"sources":["../../src/smartcontracts/transactionPayloadBuilders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\nconst transactionPayload_1 = require(\"../transactionPayload\");\nconst utils_1 = require(\"../utils\");\nconst codeMetadata_1 = require(\"./codeMetadata\");\nconst argSerializer_1 = require(\"./argSerializer\");\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\nclass ContractDeployPayloadBuilder {\n    constructor() {\n        this.code = null;\n        this.codeMetadata = new codeMetadata_1.CodeMetadata();\n        this.arguments = [];\n    }\n    /**\n     * Sets the code of the Smart Contract.\n     */\n    setCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n    setCodeMetadata(codeMetadata) {\n        this.codeMetadata = codeMetadata;\n        return this;\n    }\n    /**\n     * Adds constructor (`init`) arguments.\n     */\n    addInitArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets constructor (`init`) arguments.\n     */\n    setInitArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"code\", this.code);\n        let code = this.code.toString();\n        let codeMetadata = this.codeMetadata.toString();\n        let data = `${code}@${exports.ArwenVirtualMachine}@${codeMetadata}`;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\nclass ContractUpgradePayloadBuilder {\n    constructor() {\n        this.code = null;\n        this.codeMetadata = new codeMetadata_1.CodeMetadata();\n        this.arguments = [];\n    }\n    /**\n     * Sets the code of the Smart Contract.\n     */\n    setCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n    setCodeMetadata(codeMetadata) {\n        this.codeMetadata = codeMetadata;\n        return this;\n    }\n    /**\n     * Adds upgrade (`init`) arguments.\n     */\n    addInitArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets upgrade (`init`) arguments.\n     */\n    setInitArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"code\", this.code);\n        let code = this.code.toString();\n        let codeMetadata = this.codeMetadata.toString();\n        let data = `upgradeContract@${code}@${codeMetadata}`;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\nclass ContractCallPayloadBuilder {\n    constructor() {\n        this.contractFunction = null;\n        this.arguments = [];\n    }\n    /**\n     * Sets the function to be called (executed).\n     */\n    setFunction(contractFunction) {\n        this.contractFunction = contractFunction;\n        return this;\n    }\n    /**\n     * Adds a function argument.\n     */\n    addArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets the function arguments.\n     */\n    setArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n        let data = this.contractFunction.name;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\nfunction appendArgumentsToString(to, values) {\n    let { argumentsString, count } = new argSerializer_1.ArgSerializer().valuesToString(values);\n    if (count == 0) {\n        return to;\n    }\n    return `${to}@${argumentsString}`;\n}\n//# sourceMappingURL=transactionPayloadBuilders.js.map"]},"metadata":{},"sourceType":"script"}