{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BytesBinaryCodec = void 0;\n\nconst bytes_1 = require(\"../typesystem/bytes\");\n\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"BytesValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nclass BytesBinaryCodec {\n  decodeNested(buffer) {\n    let length = buffer.readUInt32BE(0);\n    let payload = buffer.slice(constants_1.SizeOfU32, constants_1.SizeOfU32 + length);\n    let result = new bytes_1.BytesValue(payload);\n    return [result, constants_1.SizeOfU32 + length];\n  }\n\n  decodeTopLevel(buffer) {\n    return new bytes_1.BytesValue(buffer);\n  }\n\n  encodeNested(bytes) {\n    let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n    lengthBuffer.writeUInt32BE(bytes.getLength());\n    let buffer = Buffer.concat([lengthBuffer, bytes.valueOf()]);\n    return buffer;\n  }\n\n  encodeTopLevel(bytes) {\n    return bytes.valueOf();\n  }\n\n}\n\nexports.BytesBinaryCodec = BytesBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/bytes.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;AAGG;;;AACH,MAAa,gBAAb,CAA6B;EACzB,YAAY,CAAC,MAAD,EAAe;IACvB,IAAI,MAAM,GAAG,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAb;IACA,IAAI,OAAO,GAAG,MAAM,CAAC,KAAP,CAAa,WAAA,CAAA,SAAb,EAAwB,WAAA,CAAA,SAAA,GAAY,MAApC,CAAd;IACA,IAAI,MAAM,GAAG,IAAI,OAAA,CAAA,UAAJ,CAAe,OAAf,CAAb;IACA,OAAO,CAAC,MAAD,EAAS,WAAA,CAAA,SAAA,GAAY,MAArB,CAAP;EACH;;EAED,cAAc,CAAC,MAAD,EAAe;IACzB,OAAO,IAAI,OAAA,CAAA,UAAJ,CAAe,MAAf,CAAP;EACH;;EAED,YAAY,CAAC,KAAD,EAAkB;IAC1B,IAAI,YAAY,GAAG,MAAM,CAAC,KAAP,CAAa,WAAA,CAAA,SAAb,CAAnB;IACA,YAAY,CAAC,aAAb,CAA2B,KAAK,CAAC,SAAN,EAA3B;IACA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,YAAD,EAAe,KAAK,CAAC,OAAN,EAAf,CAAd,CAAb;IACA,OAAO,MAAP;EACH;;EAED,cAAc,CAAC,KAAD,EAAkB;IAC5B,OAAO,KAAK,CAAC,OAAN,EAAP;EACH;;AArBwB;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BytesBinaryCodec = void 0;\nconst bytes_1 = require(\"../typesystem/bytes\");\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"BytesValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nclass BytesBinaryCodec {\n    decodeNested(buffer) {\n        let length = buffer.readUInt32BE(0);\n        let payload = buffer.slice(constants_1.SizeOfU32, constants_1.SizeOfU32 + length);\n        let result = new bytes_1.BytesValue(payload);\n        return [result, constants_1.SizeOfU32 + length];\n    }\n    decodeTopLevel(buffer) {\n        return new bytes_1.BytesValue(buffer);\n    }\n    encodeNested(bytes) {\n        let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n        lengthBuffer.writeUInt32BE(bytes.getLength());\n        let buffer = Buffer.concat([lengthBuffer, bytes.valueOf()]);\n        return buffer;\n    }\n    encodeTopLevel(bytes) {\n        return bytes.valueOf();\n    }\n}\nexports.BytesBinaryCodec = BytesBinaryCodec;\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}