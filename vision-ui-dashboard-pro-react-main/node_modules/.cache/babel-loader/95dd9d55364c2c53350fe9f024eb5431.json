{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _createForOfIteratorHelper = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SmartContract = void 0;\n\nvar balance_1 = require(\"../balance\");\n\nvar address_1 = require(\"../address\");\n\nvar transaction_1 = require(\"../transaction\");\n\nvar transactionPayload_1 = require(\"../transactionPayload\");\n\nvar code_1 = require(\"./code\");\n\nvar codeMetadata_1 = require(\"./codeMetadata\");\n\nvar transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\n\nvar function_1 = require(\"./function\");\n\nvar query_1 = require(\"./query\");\n\nvar utils_1 = require(\"../utils\");\n\nvar utils_2 = require(\"./codec/utils\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar interaction_1 = require(\"./interaction\");\n\nvar createKeccakHash = require(\"keccak\");\n/**\n * An abstraction for deploying and interacting with Smart Contracts.\n */\n\n\nvar SmartContract = /*#__PURE__*/function () {\n  /**\n   * Create a SmartContract object by providing its address on the Network.\n   */\n  function SmartContract(_ref) {\n    var address = _ref.address,\n        abi = _ref.abi;\n\n    _classCallCheck(this, SmartContract);\n\n    this.owner = new address_1.Address();\n    this.address = new address_1.Address();\n    this.code = code_1.Code.nothing();\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.trackOfTransactions = [];\n    /**\n     * This object contains a function for each endpoint defined by the contract.\n     * (a bit similar to web3js's \"contract.methods\").\n     */\n\n    this.methods = {};\n    this.address = address || new address_1.Address();\n    this.abi = abi;\n    this.methods = {};\n\n    if (abi) {\n      this.setupMethods();\n    }\n  }\n\n  _createClass(SmartContract, [{\n    key: \"setupMethods\",\n    value: function setupMethods() {\n      var _this = this;\n\n      var contract = this;\n      var abi = this.getAbi();\n\n      var _iterator = _createForOfIteratorHelper(abi.getAllEndpoints()),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var definition = _step.value;\n          var functionName = definition.name; // For each endpoint defined by the ABI, we attach a function to the \"methods\" object,\n          // a function that receives typed values as arguments\n          // and returns a prepared contract interaction.\n\n          _this.methods[functionName] = function (args) {\n            var func = new function_1.ContractFunction(functionName);\n            var interaction = new interaction_1.Interaction(contract, func, func, args || []);\n            return interaction;\n          };\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Sets the address, as on Network.\n     */\n\n  }, {\n    key: \"setAddress\",\n    value: function setAddress(address) {\n      this.address = address;\n    }\n    /**\n     * Gets the address, as on Network.\n     */\n\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return this.address;\n    }\n    /**\n     * Gets the owner address.\n     *\n     * Note that this function doesn't query the Network, but uses the information acquired when signing a deployment transaction.\n     * Therefore, currently, this function is useful only in the context of deploying Smart Contracts.\n     */\n\n  }, {\n    key: \"getOwner\",\n    value: function getOwner() {\n      this.owner.assertNotEmpty();\n      return this.owner;\n    }\n    /**\n     * Gets the {@link Code} of the Smart Contract. Does not query the Network.\n     */\n\n  }, {\n    key: \"getCode\",\n    value: function getCode() {\n      return this.code;\n    }\n    /**\n     * Gets the {@link CodeMetadata} of the Smart Contract. Does not query the Network.\n     */\n\n  }, {\n    key: \"getCodeMetadata\",\n    value: function getCodeMetadata() {\n      return this.codeMetadata;\n    }\n  }, {\n    key: \"setAbi\",\n    value: function setAbi(abi) {\n      this.abi = abi;\n    }\n  }, {\n    key: \"getAbi\",\n    value: function getAbi() {\n      utils_1.guardValueIsSet(\"abi\", this.abi);\n      return this.abi;\n    }\n    /**\n     * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\n     */\n\n  }, {\n    key: \"deploy\",\n    value: function deploy(_ref2) {\n      var code = _ref2.code,\n          codeMetadata = _ref2.codeMetadata,\n          initArguments = _ref2.initArguments,\n          value = _ref2.value,\n          gasLimit = _ref2.gasLimit;\n      codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n      initArguments = initArguments || [];\n      value = value || balance_1.Balance.Zero();\n      var payload = transactionPayload_1.TransactionPayload.contractDeploy().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n      var transaction = new transaction_1.Transaction({\n        receiver: address_1.Address.Zero(),\n        value: value,\n        gasLimit: gasLimit,\n        data: payload\n      });\n      this.code = code;\n      this.codeMetadata = codeMetadata;\n      transaction.onSigned.on(this.onDeploySigned.bind(this));\n      return transaction;\n    }\n  }, {\n    key: \"onDeploySigned\",\n    value: function onDeploySigned(_ref3) {\n      var transaction = _ref3.transaction,\n          signedBy = _ref3.signedBy;\n      this.owner = signedBy;\n      var nonce = transaction.getNonce();\n      var address = SmartContract.computeAddress(this.owner, nonce);\n      this.setAddress(address);\n      this.trackOfTransactions.push(transaction);\n    }\n    /**\n     * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\n     */\n\n  }, {\n    key: \"upgrade\",\n    value: function upgrade(_ref4) {\n      var code = _ref4.code,\n          codeMetadata = _ref4.codeMetadata,\n          initArguments = _ref4.initArguments,\n          value = _ref4.value,\n          gasLimit = _ref4.gasLimit;\n      codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n      initArguments = initArguments || [];\n      value = value || balance_1.Balance.Zero();\n      var payload = transactionPayload_1.TransactionPayload.contractUpgrade().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n      var transaction = new transaction_1.Transaction({\n        receiver: this.getAddress(),\n        value: value,\n        gasLimit: gasLimit,\n        data: payload\n      });\n      this.code = code;\n      this.codeMetadata = codeMetadata;\n      transaction.onSigned.on(this.onUpgradeSigned.bind(this));\n      return transaction;\n    }\n  }, {\n    key: \"onUpgradeSigned\",\n    value: function onUpgradeSigned(_ref5) {\n      var transaction = _ref5.transaction;\n      this.trackOfTransactions.push(transaction);\n    }\n    /**\n     * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(_ref6) {\n      var func = _ref6.func,\n          args = _ref6.args,\n          value = _ref6.value,\n          gasLimit = _ref6.gasLimit,\n          receiver = _ref6.receiver;\n      args = args || [];\n      value = value || balance_1.Balance.Zero();\n      var payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(func).setArgs(args).build();\n      var transaction = new transaction_1.Transaction({\n        receiver: receiver ? receiver : this.getAddress(),\n        value: value,\n        gasLimit: gasLimit,\n        data: payload\n      });\n      transaction.onSigned.on(this.onCallSigned.bind(this));\n      return transaction;\n    }\n  }, {\n    key: \"onCallSigned\",\n    value: function onCallSigned(_ref7) {\n      var transaction = _ref7.transaction;\n      this.trackOfTransactions.push(transaction);\n    }\n  }, {\n    key: \"runQuery\",\n    value: function runQuery(provider, _ref8) {\n      var func = _ref8.func,\n          args = _ref8.args,\n          value = _ref8.value,\n          caller = _ref8.caller;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var query, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = new query_1.Query({\n                  address: this.address,\n                  func: func,\n                  args: args,\n                  value: value,\n                  caller: caller\n                });\n                _context.next = 3;\n                return provider.queryContract(query);\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Computes the address of a Smart Contract.\n     * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\n     *\n     * @param owner The owner of the Smart Contract\n     * @param nonce The owner nonce used for the deployment transaction\n     */\n\n  }], [{\n    key: \"computeAddress\",\n    value: function computeAddress(owner, nonce) {\n      var initialPadding = Buffer.alloc(8, 0);\n      var ownerPubkey = owner.pubkey();\n      var shardSelector = ownerPubkey.slice(30);\n      var ownerNonceBytes = Buffer.alloc(8);\n      var bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\n      var bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\n      ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\n      var bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\n      var hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n      var vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\n      var addressBytes = Buffer.concat([initialPadding, vmTypeBytes, hash.slice(10, 30), shardSelector]);\n      var address = new address_1.Address(addressBytes);\n      return address;\n    }\n  }]);\n\n  return SmartContract;\n}();\n\nexports.SmartContract = SmartContract;","map":{"version":3,"sources":["../../src/smartcontracts/smartContract.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SmartContract = void 0;\nconst balance_1 = require(\"../balance\");\nconst address_1 = require(\"../address\");\nconst transaction_1 = require(\"../transaction\");\nconst transactionPayload_1 = require(\"../transactionPayload\");\nconst code_1 = require(\"./code\");\nconst codeMetadata_1 = require(\"./codeMetadata\");\nconst transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\nconst function_1 = require(\"./function\");\nconst query_1 = require(\"./query\");\nconst utils_1 = require(\"../utils\");\nconst utils_2 = require(\"./codec/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst interaction_1 = require(\"./interaction\");\nconst createKeccakHash = require(\"keccak\");\n/**\n * An abstraction for deploying and interacting with Smart Contracts.\n */\nclass SmartContract {\n    /**\n     * Create a SmartContract object by providing its address on the Network.\n     */\n    constructor({ address, abi }) {\n        this.owner = new address_1.Address();\n        this.address = new address_1.Address();\n        this.code = code_1.Code.nothing();\n        this.codeMetadata = new codeMetadata_1.CodeMetadata();\n        this.trackOfTransactions = [];\n        /**\n         * This object contains a function for each endpoint defined by the contract.\n         * (a bit similar to web3js's \"contract.methods\").\n         */\n        this.methods = {};\n        this.address = address || new address_1.Address();\n        this.abi = abi;\n        this.methods = {};\n        if (abi) {\n            this.setupMethods();\n        }\n    }\n    setupMethods() {\n        let contract = this;\n        let abi = this.getAbi();\n        for (const definition of abi.getAllEndpoints()) {\n            let functionName = definition.name;\n            // For each endpoint defined by the ABI, we attach a function to the \"methods\" object,\n            // a function that receives typed values as arguments\n            // and returns a prepared contract interaction.\n            this.methods[functionName] = function (args) {\n                let func = new function_1.ContractFunction(functionName);\n                let interaction = new interaction_1.Interaction(contract, func, func, args || []);\n                return interaction;\n            };\n        }\n    }\n    /**\n     * Sets the address, as on Network.\n     */\n    setAddress(address) {\n        this.address = address;\n    }\n    /**\n     * Gets the address, as on Network.\n     */\n    getAddress() {\n        return this.address;\n    }\n    /**\n     * Gets the owner address.\n     *\n     * Note that this function doesn't query the Network, but uses the information acquired when signing a deployment transaction.\n     * Therefore, currently, this function is useful only in the context of deploying Smart Contracts.\n     */\n    getOwner() {\n        this.owner.assertNotEmpty();\n        return this.owner;\n    }\n    /**\n     * Gets the {@link Code} of the Smart Contract. Does not query the Network.\n     */\n    getCode() {\n        return this.code;\n    }\n    /**\n     * Gets the {@link CodeMetadata} of the Smart Contract. Does not query the Network.\n     */\n    getCodeMetadata() {\n        return this.codeMetadata;\n    }\n    setAbi(abi) {\n        this.abi = abi;\n    }\n    getAbi() {\n        utils_1.guardValueIsSet(\"abi\", this.abi);\n        return this.abi;\n    }\n    /**\n     * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\n     */\n    deploy({ code, codeMetadata, initArguments, value, gasLimit }) {\n        codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n        initArguments = initArguments || [];\n        value = value || balance_1.Balance.Zero();\n        let payload = transactionPayload_1.TransactionPayload.contractDeploy()\n            .setCode(code)\n            .setCodeMetadata(codeMetadata)\n            .setInitArgs(initArguments)\n            .build();\n        let transaction = new transaction_1.Transaction({\n            receiver: address_1.Address.Zero(),\n            value: value,\n            gasLimit: gasLimit,\n            data: payload\n        });\n        this.code = code;\n        this.codeMetadata = codeMetadata;\n        transaction.onSigned.on(this.onDeploySigned.bind(this));\n        return transaction;\n    }\n    onDeploySigned({ transaction, signedBy }) {\n        this.owner = signedBy;\n        let nonce = transaction.getNonce();\n        let address = SmartContract.computeAddress(this.owner, nonce);\n        this.setAddress(address);\n        this.trackOfTransactions.push(transaction);\n    }\n    /**\n     * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\n     */\n    upgrade({ code, codeMetadata, initArguments, value, gasLimit }) {\n        codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n        initArguments = initArguments || [];\n        value = value || balance_1.Balance.Zero();\n        let payload = transactionPayload_1.TransactionPayload.contractUpgrade()\n            .setCode(code)\n            .setCodeMetadata(codeMetadata)\n            .setInitArgs(initArguments)\n            .build();\n        let transaction = new transaction_1.Transaction({\n            receiver: this.getAddress(),\n            value: value,\n            gasLimit: gasLimit,\n            data: payload\n        });\n        this.code = code;\n        this.codeMetadata = codeMetadata;\n        transaction.onSigned.on(this.onUpgradeSigned.bind(this));\n        return transaction;\n    }\n    onUpgradeSigned({ transaction }) {\n        this.trackOfTransactions.push(transaction);\n    }\n    /**\n     * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\n     */\n    call({ func, args, value, gasLimit, receiver }) {\n        args = args || [];\n        value = value || balance_1.Balance.Zero();\n        let payload = transactionPayload_1.TransactionPayload.contractCall()\n            .setFunction(func)\n            .setArgs(args)\n            .build();\n        let transaction = new transaction_1.Transaction({\n            receiver: receiver ? receiver : this.getAddress(),\n            value: value,\n            gasLimit: gasLimit,\n            data: payload\n        });\n        transaction.onSigned.on(this.onCallSigned.bind(this));\n        return transaction;\n    }\n    onCallSigned({ transaction }) {\n        this.trackOfTransactions.push(transaction);\n    }\n    runQuery(provider, { func, args, value, caller }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let query = new query_1.Query({\n                address: this.address,\n                func: func,\n                args: args,\n                value: value,\n                caller: caller\n            });\n            let response = yield provider.queryContract(query);\n            return response;\n        });\n    }\n    /**\n     * Computes the address of a Smart Contract.\n     * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\n     *\n     * @param owner The owner of the Smart Contract\n     * @param nonce The owner nonce used for the deployment transaction\n     */\n    static computeAddress(owner, nonce) {\n        let initialPadding = Buffer.alloc(8, 0);\n        let ownerPubkey = owner.pubkey();\n        let shardSelector = ownerPubkey.slice(30);\n        let ownerNonceBytes = Buffer.alloc(8);\n        const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\n        const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\n        ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\n        let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\n        let hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n        let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\n        let addressBytes = Buffer.concat([\n            initialPadding,\n            vmTypeBytes,\n            hash.slice(10, 30),\n            shardSelector\n        ]);\n        let address = new address_1.Address(addressBytes);\n        return address;\n    }\n}\nexports.SmartContract = SmartContract;\n//# sourceMappingURL=smartContract.js.map"]},"metadata":{},"sourceType":"script"}