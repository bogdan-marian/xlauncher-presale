{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractInterface = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar endpoint_1 = require(\"./endpoint\");\n\nvar NamePlaceholder = \"?\";\n/**\n * An Interace represents a (sub)set of endpoints (with their signatures included) defined by a contract.\n */\n\nvar ContractInterface = /*#__PURE__*/function () {\n  function ContractInterface(name, constructor_definition, endpoints) {\n    _classCallCheck(this, ContractInterface);\n\n    this.endpoints = [];\n    this.name = name;\n    this.constructorDefinition = constructor_definition;\n    this.endpoints = endpoints;\n  }\n\n  _createClass(ContractInterface, [{\n    key: \"getConstructorDefinition\",\n    value: function getConstructorDefinition() {\n      return this.constructorDefinition;\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint(name) {\n      var result = this.endpoints.find(function (e) {\n        return e.name == name;\n      });\n      utils_1.guardValueIsSetWithMessage(\"endpoint [\".concat(name, \"] not found\"), result);\n      return result;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      json.name = json.name || NamePlaceholder;\n      json.endpoints = json.endpoints || [];\n      var constructorDefinition = constructorFromJSON(json);\n      var endpoints = json.endpoints.map(function (item) {\n        return endpoint_1.EndpointDefinition.fromJSON(item);\n      });\n      return new ContractInterface(json.name, constructorDefinition, endpoints);\n    }\n  }]);\n\n  return ContractInterface;\n}();\n\nexports.ContractInterface = ContractInterface;\n\nfunction constructorFromJSON(json) {\n  if (json.constructor.inputs === undefined || json.constructor.outputs === undefined) {\n    return null;\n  } // the name will be missing, so we add it manually\n\n\n  var constructorWithName = Object.assign({\n    name: \"constructor\"\n  }, json.constructor);\n  return endpoint_1.EndpointDefinition.fromJSON(constructorWithName);\n}","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/contractInterface.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,IAAM,eAAe,GAAG,GAAxB;AAEA;;AAEG;;IACU,iB;EAKT,2BAAY,IAAZ,EAA0B,sBAA1B,EAA6E,SAA7E,EAA4G;IAAA;;IAFnG,KAAA,SAAA,GAAkC,EAAlC;IAGL,KAAK,IAAL,GAAY,IAAZ;IACA,KAAK,qBAAL,GAA6B,sBAA7B;IACA,KAAK,SAAL,GAAiB,SAAjB;EACH;;;;WAWD,oCAAwB;MACpB,OAAO,KAAK,qBAAZ;IACH;;;WAED,qBAAY,IAAZ,EAAwB;MACpB,IAAI,MAAM,GAAG,KAAK,SAAL,CAAe,IAAf,CAAoB,UAAA,CAAC;QAAA,OAAI,CAAC,CAAC,IAAF,IAAU,IAAd;MAAA,CAArB,CAAb;MACA,OAAA,CAAA,0BAAA,qBAAwC,IAAxC,kBAA2D,MAA3D;MACA,OAAO,MAAP;IACH;;;WAjBD,kBAAgB,IAAhB,EAA0E;MACtE,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAL,IAAa,eAAzB;MACA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAL,IAAkB,EAAnC;MAEA,IAAI,qBAAqB,GAAG,mBAAmB,CAAC,IAAD,CAA/C;MACA,IAAI,SAAS,GAAG,IAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,UAAA,IAAI;QAAA,OAAI,UAAA,CAAA,kBAAA,CAAmB,QAAnB,CAA4B,IAA5B,CAAJ;MAAA,CAAvB,CAAhB;MACA,OAAO,IAAI,iBAAJ,CAAsB,IAAI,CAAC,IAA3B,EAAiC,qBAAjC,EAAwD,SAAxD,CAAP;IACH;;;;;;AAlBL,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AA+BA,SAAS,mBAAT,CAA6B,IAA7B,EAAsC;EAClC,IAAI,IAAI,CAAC,WAAL,CAAiB,MAAjB,KAA4B,SAA5B,IAAyC,IAAI,CAAC,WAAL,CAAiB,OAAjB,KAA6B,SAA1E,EAAqF;IACjF,OAAO,IAAP;EACH,CAHiC,CAKlC;;;EACA,IAAI,mBAAmB,GAAA,MAAA,CAAA,MAAA,CAAA;IAAK,IAAI,EAAE;EAAX,CAAA,EAA6B,IAAI,CAAC,WAAlC,CAAvB;EAEA,OAAO,UAAA,CAAA,kBAAA,CAAmB,QAAnB,CAA4B,mBAA5B,CAAP;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractInterface = void 0;\nconst utils_1 = require(\"../../utils\");\nconst endpoint_1 = require(\"./endpoint\");\nconst NamePlaceholder = \"?\";\n/**\n * An Interace represents a (sub)set of endpoints (with their signatures included) defined by a contract.\n */\nclass ContractInterface {\n    constructor(name, constructor_definition, endpoints) {\n        this.endpoints = [];\n        this.name = name;\n        this.constructorDefinition = constructor_definition;\n        this.endpoints = endpoints;\n    }\n    static fromJSON(json) {\n        json.name = json.name || NamePlaceholder;\n        json.endpoints = json.endpoints || [];\n        let constructorDefinition = constructorFromJSON(json);\n        let endpoints = json.endpoints.map(item => endpoint_1.EndpointDefinition.fromJSON(item));\n        return new ContractInterface(json.name, constructorDefinition, endpoints);\n    }\n    getConstructorDefinition() {\n        return this.constructorDefinition;\n    }\n    getEndpoint(name) {\n        let result = this.endpoints.find(e => e.name == name);\n        utils_1.guardValueIsSetWithMessage(`endpoint [${name}] not found`, result);\n        return result;\n    }\n}\nexports.ContractInterface = ContractInterface;\nfunction constructorFromJSON(json) {\n    if (json.constructor.inputs === undefined || json.constructor.outputs === undefined) {\n        return null;\n    }\n    // the name will be missing, so we add it manually\n    let constructorWithName = Object.assign({ name: \"constructor\" }, json.constructor);\n    return endpoint_1.EndpointDefinition.fromJSON(constructorWithName);\n}\n//# sourceMappingURL=contractInterface.js.map"]},"metadata":{},"sourceType":"script"}