{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenOfAccountOnNetwork = exports.AccountOnNetwork = exports.Account = void 0;\n\nconst address_1 = require(\"./address\");\n\nconst nonce_1 = require(\"./nonce\");\n\nconst balance_1 = require(\"./balance\");\n\nconst balanceBuilder_1 = require(\"./balanceBuilder\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * An abstraction representing an account (user or Smart Contract) on the Network.\n */\n\n\nclass Account {\n  /**\n   * Creates an account object from an address\n   */\n  constructor(address) {\n    /**\n     * The address of the account.\n     */\n    this.address = new address_1.Address();\n    /**\n     * The nonce of the account (the account sequence number).\n     */\n\n    this.nonce = new nonce_1.Nonce(0);\n    /**\n     * The balance of the account.\n     */\n\n    this.balance = balanceBuilder_1.Egld(\"0\");\n    this.asOnNetwork = new AccountOnNetwork();\n    this.address = address;\n  }\n  /**\n   * Queries the details of the account on the Network\n   * @param provider the Network provider\n   * @param cacheLocally whether to save the query response within the object, locally\n   */\n\n\n  getAsOnNetwork(provider) {\n    let cacheLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      this.address.assertNotEmpty();\n      let response = yield provider.getAccount(this.address);\n\n      if (cacheLocally) {\n        this.asOnNetwork = response;\n      }\n\n      return response;\n    });\n  }\n  /**\n   * Gets a previously saved query response\n   */\n\n\n  getAsOnNetworkCached() {\n    return this.asOnNetwork;\n  }\n  /**\n   * Synchronizes account properties (such as nonce, balance) with the ones queried from the Network\n   * @param provider the Network provider\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getAsOnNetwork(provider, true);\n      this.nonce = this.asOnNetwork.nonce;\n      this.balance = this.asOnNetwork.balance;\n    });\n  }\n  /**\n   * Increments (locally) the nonce (the account sequence number).\n   */\n\n\n  incrementNonce() {\n    this.nonce = this.nonce.increment();\n  }\n  /**\n   * Gets then increments (locally) the nonce (the account sequence number).\n   */\n\n\n  getNonceThenIncrement() {\n    let nonce = this.nonce;\n    this.nonce = this.nonce.increment();\n    return nonce;\n  }\n  /**\n   * Converts the account to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      address: this.address.bech32(),\n      nonce: this.nonce.valueOf(),\n      balance: this.balance.toString()\n    };\n  }\n\n}\n\nexports.Account = Account;\n/**\n * A plain view of an account, as queried from the Network.\n */\n\nclass AccountOnNetwork {\n  constructor(init) {\n    this.address = new address_1.Address();\n    this.nonce = new nonce_1.Nonce(0);\n    this.balance = balanceBuilder_1.Egld(0);\n    this.code = \"\";\n    this.userName = \"\";\n    Object.assign(this, init);\n  }\n\n  static fromHttpResponse(payload) {\n    let result = new AccountOnNetwork();\n    result.address = new address_1.Address(payload[\"address\"] || 0);\n    result.nonce = new nonce_1.Nonce(payload[\"nonce\"] || 0);\n    result.balance = balance_1.Balance.fromString(payload[\"balance\"] || \"0\");\n    result.code = payload[\"code\"] || \"\";\n    result.userName = payload[\"username\"] || \"\";\n    return result;\n  }\n\n}\n\nexports.AccountOnNetwork = AccountOnNetwork;\n\nclass TokenOfAccountOnNetwork {\n  constructor() {\n    this.tokenIdentifier = \"\";\n    this.attributes = Buffer.from([]);\n    this.balance = new bignumber_js_1.default(0);\n    this.nonce = new nonce_1.Nonce(0);\n    this.creator = new address_1.Address(\"\");\n    this.royalties = new bignumber_js_1.default(0);\n  }\n\n  static fromHttpResponse(payload) {\n    let result = new TokenOfAccountOnNetwork();\n    result.tokenIdentifier = payload.tokenIdentifier;\n    result.attributes = Buffer.from(payload.attributes || \"\", \"base64\");\n    result.balance = new bignumber_js_1.default(payload.balance || 0);\n    result.nonce = new nonce_1.Nonce(payload.nonce || 0);\n    result.creator = new address_1.Address(payload.creator || \"\");\n    result.royalties = new bignumber_js_1.default(payload.royalties || 0);\n    return result;\n  }\n\n}\n\nexports.TokenOfAccountOnNetwork = TokenOfAccountOnNetwork;","map":{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenOfAccountOnNetwork = exports.AccountOnNetwork = exports.Account = void 0;\nconst address_1 = require(\"./address\");\nconst nonce_1 = require(\"./nonce\");\nconst balance_1 = require(\"./balance\");\nconst balanceBuilder_1 = require(\"./balanceBuilder\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * An abstraction representing an account (user or Smart Contract) on the Network.\n */\nclass Account {\n    /**\n     * Creates an account object from an address\n     */\n    constructor(address) {\n        /**\n         * The address of the account.\n         */\n        this.address = new address_1.Address();\n        /**\n         * The nonce of the account (the account sequence number).\n         */\n        this.nonce = new nonce_1.Nonce(0);\n        /**\n         * The balance of the account.\n         */\n        this.balance = balanceBuilder_1.Egld(\"0\");\n        this.asOnNetwork = new AccountOnNetwork();\n        this.address = address;\n    }\n    /**\n     * Queries the details of the account on the Network\n     * @param provider the Network provider\n     * @param cacheLocally whether to save the query response within the object, locally\n     */\n    getAsOnNetwork(provider, cacheLocally = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.address.assertNotEmpty();\n            let response = yield provider.getAccount(this.address);\n            if (cacheLocally) {\n                this.asOnNetwork = response;\n            }\n            return response;\n        });\n    }\n    /**\n     * Gets a previously saved query response\n     */\n    getAsOnNetworkCached() {\n        return this.asOnNetwork;\n    }\n    /**\n     * Synchronizes account properties (such as nonce, balance) with the ones queried from the Network\n     * @param provider the Network provider\n     */\n    sync(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getAsOnNetwork(provider, true);\n            this.nonce = this.asOnNetwork.nonce;\n            this.balance = this.asOnNetwork.balance;\n        });\n    }\n    /**\n     * Increments (locally) the nonce (the account sequence number).\n     */\n    incrementNonce() {\n        this.nonce = this.nonce.increment();\n    }\n    /**\n     * Gets then increments (locally) the nonce (the account sequence number).\n     */\n    getNonceThenIncrement() {\n        let nonce = this.nonce;\n        this.nonce = this.nonce.increment();\n        return nonce;\n    }\n    /**\n     * Converts the account to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            address: this.address.bech32(),\n            nonce: this.nonce.valueOf(),\n            balance: this.balance.toString(),\n        };\n    }\n}\nexports.Account = Account;\n/**\n * A plain view of an account, as queried from the Network.\n */\nclass AccountOnNetwork {\n    constructor(init) {\n        this.address = new address_1.Address();\n        this.nonce = new nonce_1.Nonce(0);\n        this.balance = balanceBuilder_1.Egld(0);\n        this.code = \"\";\n        this.userName = \"\";\n        Object.assign(this, init);\n    }\n    static fromHttpResponse(payload) {\n        let result = new AccountOnNetwork();\n        result.address = new address_1.Address(payload[\"address\"] || 0);\n        result.nonce = new nonce_1.Nonce(payload[\"nonce\"] || 0);\n        result.balance = balance_1.Balance.fromString(payload[\"balance\"] || \"0\");\n        result.code = payload[\"code\"] || \"\";\n        result.userName = payload[\"username\"] || \"\";\n        return result;\n    }\n}\nexports.AccountOnNetwork = AccountOnNetwork;\nclass TokenOfAccountOnNetwork {\n    constructor() {\n        this.tokenIdentifier = \"\";\n        this.attributes = Buffer.from([]);\n        this.balance = new bignumber_js_1.default(0);\n        this.nonce = new nonce_1.Nonce(0);\n        this.creator = new address_1.Address(\"\");\n        this.royalties = new bignumber_js_1.default(0);\n    }\n    static fromHttpResponse(payload) {\n        let result = new TokenOfAccountOnNetwork();\n        result.tokenIdentifier = payload.tokenIdentifier;\n        result.attributes = Buffer.from(payload.attributes || \"\", \"base64\");\n        result.balance = new bignumber_js_1.default(payload.balance || 0);\n        result.nonce = new nonce_1.Nonce(payload.nonce || 0);\n        result.creator = new address_1.Address(payload.creator || \"\");\n        result.royalties = new bignumber_js_1.default(payload.royalties || 0);\n        return result;\n    }\n}\nexports.TokenOfAccountOnNetwork = TokenOfAccountOnNetwork;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}