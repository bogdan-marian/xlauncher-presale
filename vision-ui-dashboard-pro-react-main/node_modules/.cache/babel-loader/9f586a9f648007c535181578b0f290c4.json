{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddImmediateResult = exports.MarkNotarized = exports.Wait = exports.MockProvider = void 0;\n\nconst transaction_1 = require(\"../transaction\");\n\nconst transactionOnNetwork_1 = require(\"../transactionOnNetwork\");\n\nconst networkConfig_1 = require(\"../networkConfig\");\n\nconst address_1 = require(\"../address\");\n\nconst nonce_1 = require(\"../nonce\");\n\nconst asyncTimer_1 = require(\"../asyncTimer\");\n\nconst account_1 = require(\"../account\");\n\nconst balance_1 = require(\"../balance\");\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst queryResponse_1 = require(\"../smartcontracts/queryResponse\");\n\nconst hash_1 = require(\"../hash\");\n\nconst networkStatus_1 = require(\"../networkStatus\");\n\nconst events_1 = require(\"../events\");\n/**\n * A mock {@link IProvider}, used for tests only.\n */\n\n\nclass MockProvider {\n  constructor() {\n    this.queryResponders = [];\n    this.transactions = new Map();\n    this.onTransactionSent = new events_1.TypedEvent();\n    this.accounts = new Map();\n    this.accounts.set(MockProvider.AddressOfAlice.bech32(), new account_1.AccountOnNetwork({\n      nonce: new nonce_1.Nonce(0),\n      balance: balance_1.Balance.egld(1000)\n    }));\n    this.accounts.set(MockProvider.AddressOfBob.bech32(), new account_1.AccountOnNetwork({\n      nonce: new nonce_1.Nonce(5),\n      balance: balance_1.Balance.egld(500)\n    }));\n    this.accounts.set(MockProvider.AddressOfCarol.bech32(), new account_1.AccountOnNetwork({\n      nonce: new nonce_1.Nonce(42),\n      balance: balance_1.Balance.egld(300)\n    }));\n  }\n\n  getAccountEsdtBalance(_address, _tokenBalanceBuilder) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  doPostGeneric(_resourceUrl, _payload, _callback) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  doGetGeneric(_resourceUrl, _callback) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  mockUpdateAccount(address, mutate) {\n    let account = this.accounts.get(address.bech32());\n\n    if (account) {\n      mutate(account);\n    }\n  }\n\n  mockUpdateTransaction(hash, mutate) {\n    let transaction = this.transactions.get(hash.toString());\n\n    if (transaction) {\n      mutate(transaction);\n    }\n  }\n\n  mockPutTransaction(hash, item) {\n    this.transactions.set(hash.toString(), item);\n  }\n\n  mockQueryResponseOnFunction(functionName, response) {\n    let predicate = query => query.func.name == functionName;\n\n    this.queryResponders.push(new QueryResponder(predicate, response));\n  }\n\n  mockQueryResponse(predicate, response) {\n    this.queryResponders.push(new QueryResponder(predicate, response));\n  }\n\n  mockTransactionTimeline(transaction, timelinePoints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield transaction.awaitHashed();\n      return this.mockTransactionTimelineByHash(transaction.getHash(), timelinePoints);\n    });\n  }\n\n  mockNextTransactionTimeline(timelinePoints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let transaction = yield this.nextTransactionSent();\n      return this.mockTransactionTimelineByHash(transaction.getHash(), timelinePoints);\n    });\n  }\n\n  nextTransactionSent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, _reject) => {\n        this.onTransactionSent.on(eventArgs => resolve(eventArgs.transaction));\n      });\n    });\n  }\n\n  mockTransactionTimelineByHash(hash, timelinePoints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let timeline = new asyncTimer_1.AsyncTimer(`mock timeline of ${hash}`);\n      yield timeline.start(0);\n\n      for (const point of timelinePoints) {\n        if (point instanceof transaction_1.TransactionStatus) {\n          this.mockUpdateTransaction(hash, transaction => {\n            transaction.status = point;\n          });\n        } else if (point instanceof MarkNotarized) {\n          this.mockUpdateTransaction(hash, transaction => {\n            transaction.hyperblockNonce = new nonce_1.Nonce(42);\n            transaction.hyperblockHash = new hash_1.Hash(\"a\".repeat(32));\n          });\n        } else if (point instanceof AddImmediateResult) {\n          this.mockUpdateTransaction(hash, transaction => {\n            transaction.getSmartContractResults().getImmediate().data = point.data;\n          });\n        } else if (point instanceof Wait) {\n          yield timeline.start(point.milliseconds);\n        }\n      }\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let account = this.accounts.get(address.bech32());\n\n      if (account) {\n        return account;\n      }\n\n      return new account_1.AccountOnNetwork();\n    });\n  }\n\n  getAddressEsdt(_address, _tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  getAddressEsdtList(_address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  getAddressNft(_address, _tokenIdentifier, _nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.mockPutTransaction(transaction.getHash(), new transactionOnNetwork_1.TransactionOnNetwork({\n        nonce: transaction.getNonce(),\n        sender: transaction.getSender(),\n        receiver: transaction.getReceiver(),\n        data: transaction.getData(),\n        status: new transaction_1.TransactionStatus(\"pending\")\n      }));\n      this.onTransactionSent.emit({\n        transaction: transaction\n      });\n      return transaction.getHash();\n    });\n  }\n\n  simulateTransaction(_transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  getTransaction(txHash, _hintSender, _withResults) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let transaction = this.transactions.get(txHash.toString());\n\n      if (transaction) {\n        return transaction;\n      }\n\n      throw new errors.ErrMock(\"Transaction not found\");\n    });\n  }\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let transaction = this.transactions.get(txHash.toString());\n\n      if (transaction) {\n        return transaction.status;\n      }\n\n      throw new errors.ErrMock(\"Transaction not found\");\n    });\n  }\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new networkConfig_1.NetworkConfig();\n    });\n  }\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new networkStatus_1.NetworkStatus();\n    });\n  }\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const responder of this.queryResponders) {\n        if (responder.matches(query)) {\n          return responder.response;\n        }\n      }\n\n      return new queryResponse_1.QueryResponse();\n    });\n  }\n\n}\n\nexports.MockProvider = MockProvider;\nMockProvider.AddressOfAlice = new address_1.Address(\"erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th\");\nMockProvider.AddressOfBob = new address_1.Address(\"erd1spyavw0956vq68xj8y4tenjpq2wd5a9p2c6j8gsz7ztyrnpxrruqzu66jx\");\nMockProvider.AddressOfCarol = new address_1.Address(\"erd1k2s324ww2g0yj38qn2ch2jwctdy8mnfxep94q9arncc6xecg3xaq6mjse8\");\n\nclass Wait {\n  constructor(milliseconds) {\n    this.milliseconds = milliseconds;\n  }\n\n}\n\nexports.Wait = Wait;\n\nclass MarkNotarized {}\n\nexports.MarkNotarized = MarkNotarized;\n\nclass AddImmediateResult {\n  constructor(data) {\n    this.data = data;\n  }\n\n}\n\nexports.AddImmediateResult = AddImmediateResult;\n\nclass QueryResponder {\n  constructor(matches, response) {\n    this.matches = matches || (_ => true);\n\n    this.response = response || new queryResponse_1.QueryResponse();\n  }\n\n}","map":{"version":3,"sources":["../../src/testutils/mockProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddImmediateResult = exports.MarkNotarized = exports.Wait = exports.MockProvider = void 0;\nconst transaction_1 = require(\"../transaction\");\nconst transactionOnNetwork_1 = require(\"../transactionOnNetwork\");\nconst networkConfig_1 = require(\"../networkConfig\");\nconst address_1 = require(\"../address\");\nconst nonce_1 = require(\"../nonce\");\nconst asyncTimer_1 = require(\"../asyncTimer\");\nconst account_1 = require(\"../account\");\nconst balance_1 = require(\"../balance\");\nconst errors = __importStar(require(\"../errors\"));\nconst queryResponse_1 = require(\"../smartcontracts/queryResponse\");\nconst hash_1 = require(\"../hash\");\nconst networkStatus_1 = require(\"../networkStatus\");\nconst events_1 = require(\"../events\");\n/**\n * A mock {@link IProvider}, used for tests only.\n */\nclass MockProvider {\n    constructor() {\n        this.queryResponders = [];\n        this.transactions = new Map();\n        this.onTransactionSent = new events_1.TypedEvent();\n        this.accounts = new Map();\n        this.accounts.set(MockProvider.AddressOfAlice.bech32(), new account_1.AccountOnNetwork({ nonce: new nonce_1.Nonce(0), balance: balance_1.Balance.egld(1000) }));\n        this.accounts.set(MockProvider.AddressOfBob.bech32(), new account_1.AccountOnNetwork({ nonce: new nonce_1.Nonce(5), balance: balance_1.Balance.egld(500) }));\n        this.accounts.set(MockProvider.AddressOfCarol.bech32(), new account_1.AccountOnNetwork({ nonce: new nonce_1.Nonce(42), balance: balance_1.Balance.egld(300) }));\n    }\n    getAccountEsdtBalance(_address, _tokenBalanceBuilder) {\n        throw new Error(\"Method not implemented.\");\n    }\n    doPostGeneric(_resourceUrl, _payload, _callback) {\n        throw new Error(\"Method not implemented.\");\n    }\n    doGetGeneric(_resourceUrl, _callback) {\n        throw new Error(\"Method not implemented.\");\n    }\n    mockUpdateAccount(address, mutate) {\n        let account = this.accounts.get(address.bech32());\n        if (account) {\n            mutate(account);\n        }\n    }\n    mockUpdateTransaction(hash, mutate) {\n        let transaction = this.transactions.get(hash.toString());\n        if (transaction) {\n            mutate(transaction);\n        }\n    }\n    mockPutTransaction(hash, item) {\n        this.transactions.set(hash.toString(), item);\n    }\n    mockQueryResponseOnFunction(functionName, response) {\n        let predicate = (query) => query.func.name == functionName;\n        this.queryResponders.push(new QueryResponder(predicate, response));\n    }\n    mockQueryResponse(predicate, response) {\n        this.queryResponders.push(new QueryResponder(predicate, response));\n    }\n    mockTransactionTimeline(transaction, timelinePoints) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield transaction.awaitHashed();\n            return this.mockTransactionTimelineByHash(transaction.getHash(), timelinePoints);\n        });\n    }\n    mockNextTransactionTimeline(timelinePoints) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let transaction = yield this.nextTransactionSent();\n            return this.mockTransactionTimelineByHash(transaction.getHash(), timelinePoints);\n        });\n    }\n    nextTransactionSent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, _reject) => {\n                this.onTransactionSent.on((eventArgs) => resolve(eventArgs.transaction));\n            });\n        });\n    }\n    mockTransactionTimelineByHash(hash, timelinePoints) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let timeline = new asyncTimer_1.AsyncTimer(`mock timeline of ${hash}`);\n            yield timeline.start(0);\n            for (const point of timelinePoints) {\n                if (point instanceof transaction_1.TransactionStatus) {\n                    this.mockUpdateTransaction(hash, (transaction) => {\n                        transaction.status = point;\n                    });\n                }\n                else if (point instanceof MarkNotarized) {\n                    this.mockUpdateTransaction(hash, (transaction) => {\n                        transaction.hyperblockNonce = new nonce_1.Nonce(42);\n                        transaction.hyperblockHash = new hash_1.Hash(\"a\".repeat(32));\n                    });\n                }\n                else if (point instanceof AddImmediateResult) {\n                    this.mockUpdateTransaction(hash, (transaction) => {\n                        transaction.getSmartContractResults().getImmediate().data = point.data;\n                    });\n                }\n                else if (point instanceof Wait) {\n                    yield timeline.start(point.milliseconds);\n                }\n            }\n        });\n    }\n    getAccount(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let account = this.accounts.get(address.bech32());\n            if (account) {\n                return account;\n            }\n            return new account_1.AccountOnNetwork();\n        });\n    }\n    getAddressEsdt(_address, _tokenIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {};\n        });\n    }\n    getAddressEsdtList(_address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {};\n        });\n    }\n    getAddressNft(_address, _tokenIdentifier, _nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {};\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.mockPutTransaction(transaction.getHash(), new transactionOnNetwork_1.TransactionOnNetwork({\n                nonce: transaction.getNonce(),\n                sender: transaction.getSender(),\n                receiver: transaction.getReceiver(),\n                data: transaction.getData(),\n                status: new transaction_1.TransactionStatus(\"pending\"),\n            }));\n            this.onTransactionSent.emit({ transaction: transaction });\n            return transaction.getHash();\n        });\n    }\n    simulateTransaction(_transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {};\n        });\n    }\n    getTransaction(txHash, _hintSender, _withResults) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let transaction = this.transactions.get(txHash.toString());\n            if (transaction) {\n                return transaction;\n            }\n            throw new errors.ErrMock(\"Transaction not found\");\n        });\n    }\n    getTransactionStatus(txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let transaction = this.transactions.get(txHash.toString());\n            if (transaction) {\n                return transaction.status;\n            }\n            throw new errors.ErrMock(\"Transaction not found\");\n        });\n    }\n    getNetworkConfig() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new networkConfig_1.NetworkConfig();\n        });\n    }\n    getNetworkStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new networkStatus_1.NetworkStatus();\n        });\n    }\n    queryContract(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const responder of this.queryResponders) {\n                if (responder.matches(query)) {\n                    return responder.response;\n                }\n            }\n            return new queryResponse_1.QueryResponse();\n        });\n    }\n}\nexports.MockProvider = MockProvider;\nMockProvider.AddressOfAlice = new address_1.Address(\"erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th\");\nMockProvider.AddressOfBob = new address_1.Address(\"erd1spyavw0956vq68xj8y4tenjpq2wd5a9p2c6j8gsz7ztyrnpxrruqzu66jx\");\nMockProvider.AddressOfCarol = new address_1.Address(\"erd1k2s324ww2g0yj38qn2ch2jwctdy8mnfxep94q9arncc6xecg3xaq6mjse8\");\nclass Wait {\n    constructor(milliseconds) {\n        this.milliseconds = milliseconds;\n    }\n}\nexports.Wait = Wait;\nclass MarkNotarized {\n}\nexports.MarkNotarized = MarkNotarized;\nclass AddImmediateResult {\n    constructor(data) {\n        this.data = data;\n    }\n}\nexports.AddImmediateResult = AddImmediateResult;\nclass QueryResponder {\n    constructor(matches, response) {\n        this.matches = matches || ((_) => true);\n        this.response = response || new queryResponse_1.QueryResponse();\n    }\n}\n//# sourceMappingURL=mockProvider.js.map"]},"metadata":{},"sourceType":"script"}