{"ast":null,"code":"import _asyncToGenerator from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/regenerator/index.js\";\nvar SIGN_RAW_TX_INS = 0x04;\nvar SIGN_HASH_TX_INS = 0x07;\nvar SIGN_MESSAGE_INS = 0x06;\nvar GET_ADDRESS_AUTH_TOKEN_INS = 0x09;\nvar ACTIVE_SIGNERS = [SIGN_RAW_TX_INS, SIGN_HASH_TX_INS, SIGN_MESSAGE_INS, GET_ADDRESS_AUTH_TOKEN_INS];\n\nvar Elrond = /*#__PURE__*/function () {\n  function Elrond(transport) {\n    var scrambleKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"eGLD\";\n\n    _classCallCheck(this, Elrond);\n\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"setAddress\", \"signTransaction\", \"signMessage\", \"getAppConfiguration\", \"getAddressAndSignAuthToken\"], scrambleKey);\n  }\n\n  _createClass(Elrond, [{\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account, index, display) {\n        var cla, ins, p1, p2, data, response, addressLength, address;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cla = 0xed;\n                ins = 0x03;\n                p1 = display ? 0x01 : 0x00;\n                p2 = 0x00;\n                data = Buffer.alloc(8);\n                data.writeInt32BE(account, 0);\n                data.writeUInt32BE(index, 4);\n                _context.next = 9;\n                return this.transport.send(cla, ins, p1, p2, data);\n\n              case 9:\n                response = _context.sent;\n                addressLength = response[0];\n                address = response.slice(1, 1 + addressLength).toString(\"ascii\");\n                return _context.abrupt(\"return\", {\n                  address: address\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAddress(_x, _x2, _x3) {\n        return _getAddress.apply(this, arguments);\n      }\n\n      return getAddress;\n    }()\n  }, {\n    key: \"setAddress\",\n    value: function () {\n      var _setAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account, index, display) {\n        var cla, ins, p1, p2, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cla = 0xed;\n                ins = 0x05;\n                p1 = display ? 0x01 : 0x00;\n                p2 = 0x00;\n                data = Buffer.alloc(8);\n                data.writeInt32BE(account, 0);\n                data.writeUInt32BE(index, 4);\n                _context2.next = 9;\n                return this.transport.send(cla, ins, p1, p2, data);\n\n              case 9:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setAddress(_x4, _x5, _x6) {\n        return _setAddress.apply(this, arguments);\n      }\n\n      return setAddress;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(rawTx, usingHash) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", usingHash ? this.sign(rawTx, SIGN_HASH_TX_INS) : this.sign(rawTx, SIGN_RAW_TX_INS));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signTransaction(_x7, _x8) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(message) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.sign(message, SIGN_MESSAGE_INS));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function signMessage(_x9) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }()\n  }, {\n    key: \"getAddressAndSignAuthToken\",\n    value: function () {\n      var _getAddressAndSignAuthToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(account, index, token) {\n        var data, buffersArray, result, splitRes;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                data = Buffer.alloc(12);\n                data.writeInt32BE(account, 0);\n                data.writeUInt32BE(index, 4);\n                data.writeUInt32BE(token.length, 8);\n                buffersArray = [data, token];\n                _context5.next = 7;\n                return this.sign(Buffer.concat(buffersArray), GET_ADDRESS_AUTH_TOKEN_INS);\n\n              case 7:\n                result = _context5.sent;\n                splitRes = result.split(\"|\");\n                return _context5.abrupt(\"return\", {\n                  address: splitRes[0],\n                  signature: splitRes[1]\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAddressAndSignAuthToken(_x10, _x11, _x12) {\n        return _getAddressAndSignAuthToken.apply(this, arguments);\n      }\n\n      return getAddressAndSignAuthToken;\n    }()\n  }, {\n    key: \"getAppConfiguration\",\n    value: function () {\n      var _getAppConfiguration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.transport.send(0xed, 0x02, 0x00, 0x00);\n\n              case 2:\n                response = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  contractData: response[0],\n                  accountIndex: response[1],\n                  addressIndex: response[2],\n                  version: \"\".concat(response[3], \".\").concat(response[4], \".\").concat(response[5])\n                });\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAppConfiguration() {\n        return _getAppConfiguration.apply(this, arguments);\n      }\n\n      return getAppConfiguration;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(message, type) {\n        var apdus, offset, isFirst, maxChunkSize, hasMore, chunkSize, apdu, response, _i, _apdus, _apdu;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (ACTIVE_SIGNERS.includes(type)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error(\"invalid sign instruction called: \".concat(type));\n\n              case 2:\n                apdus = [];\n                offset = 0;\n\n                while (offset !== message.length) {\n                  isFirst = offset === 0;\n                  maxChunkSize = 150;\n                  hasMore = offset + maxChunkSize < message.length;\n                  chunkSize = hasMore ? maxChunkSize : message.length - offset;\n                  apdu = {\n                    cla: 0xed,\n                    ins: type,\n                    p1: isFirst ? 0x00 : 0x80,\n                    p2: 0x00,\n                    data: Buffer.alloc(chunkSize)\n                  };\n                  message.copy(apdu.data, 0, offset, offset + chunkSize);\n                  apdus.push(apdu);\n                  offset += chunkSize;\n                }\n\n                response = Buffer.alloc(0);\n                _i = 0, _apdus = apdus;\n\n              case 7:\n                if (!(_i < _apdus.length)) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                _apdu = _apdus[_i];\n                _context7.next = 11;\n                return this.transport.send(_apdu.cla, _apdu.ins, _apdu.p1, _apdu.p2, _apdu.data);\n\n              case 11:\n                response = _context7.sent;\n\n              case 12:\n                _i++;\n                _context7.next = 7;\n                break;\n\n              case 15:\n                if (!(GET_ADDRESS_AUTH_TOKEN_INS === type)) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", this.handleAuthTokenResponse(response));\n\n              case 17:\n                if (!(response.length !== 67 || response[0] !== 64)) {\n                  _context7.next = 19;\n                  break;\n                }\n\n                throw new Error(\"invalid signature received from ledger device\");\n\n              case 19:\n                return _context7.abrupt(\"return\", response.slice(1, response.length - 2).toString(\"hex\"));\n\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function sign(_x13, _x14) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"handleAuthTokenResponse\",\n    value: function handleAuthTokenResponse(response) {\n      if (response.length !== 129 && response[0] !== 126) {\n        throw new Error(\"invalid address and token signature received from ledger device\");\n      }\n\n      var address = response.slice(1, 63).toString(\"ascii\");\n      var signature = response.slice(63, response.length - 2).toString(\"hex\");\n      return address + \"|\" + signature;\n    }\n  }]);\n\n  return Elrond;\n}();\n\nexport { Elrond as default };","map":{"version":3,"sources":["../src/Elrond.js"],"names":["SIGN_RAW_TX_INS","SIGN_HASH_TX_INS","SIGN_MESSAGE_INS","GET_ADDRESS_AUTH_TOKEN_INS","ACTIVE_SIGNERS","transport","constructor","scrambleKey","cla","ins","p1","display","p2","data","Buffer","response","addressLength","address","usingHash","token","buffersArray","result","splitRes","signature","contractData","accountIndex","addressIndex","version","apdus","offset","message","isFirst","maxChunkSize","hasMore","chunkSize","apdu","handleAuthTokenResponse"],"mappings":"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","sourcesContent":["//@flow\n\nimport type Transport from \"@ledgerhq/hw-transport\";\n\nconst SIGN_RAW_TX_INS = 0x04;\nconst SIGN_HASH_TX_INS = 0x07;\nconst SIGN_MESSAGE_INS = 0x06;\nconst GET_ADDRESS_AUTH_TOKEN_INS = 0x09;\n\nconst ACTIVE_SIGNERS = [\n    SIGN_RAW_TX_INS,\n    SIGN_HASH_TX_INS,\n    SIGN_MESSAGE_INS,\n    GET_ADDRESS_AUTH_TOKEN_INS\n];\n\nexport default class Elrond {\n    transport: Transport<*>;\n\n    constructor(transport: Transport<*>, scrambleKey: string = \"eGLD\") {\n        this.transport = transport;\n        transport.decorateAppAPIMethods(\n            this,\n            [\"getAddress\", \"setAddress\", \"signTransaction\", \"signMessage\", \"getAppConfiguration\", \"getAddressAndSignAuthToken\"],\n            scrambleKey\n        );\n    }\n\n    async getAddress(\n        account: number,\n        index: number,\n        display?: boolean,\n    ): Promise<{\n        publicKey: string,\n        address: string,\n        chainCode?: string,\n    }> {\n        const cla = 0xed;\n        const ins = 0x03;\n        const p1 = display ? 0x01 : 0x00;\n        const p2 = 0x00;\n        const data = Buffer.alloc(8);\n\n        data.writeInt32BE(account, 0);\n        data.writeUInt32BE(index, 4);\n\n        const response = await this.transport.send(cla, ins, p1, p2, data);\n\n        const addressLength = response[0];\n        const address = response.slice(1, 1 + addressLength).toString(\"ascii\");\n\n        return {address};\n    }\n\n    async setAddress(\n        account: number,\n        index: number,\n        display?: boolean,\n    ) {\n        const cla = 0xed;\n        const ins = 0x05;\n        const p1 = display ? 0x01 : 0x00;\n        const p2 = 0x00;\n        const data = Buffer.alloc(8);\n\n        data.writeInt32BE(account, 0);\n        data.writeUInt32BE(index, 4);\n\n        return await this.transport.send(cla, ins, p1, p2, data);\n    }\n\n    async signTransaction(\n        rawTx: Buffer,\n        usingHash: boolean,\n    ): Promise<string> {\n        return usingHash ? this.sign(rawTx, SIGN_HASH_TX_INS) :\n            this.sign(rawTx, SIGN_RAW_TX_INS);\n    }\n\n    async signMessage(message: Buffer): Promise<string> {\n        return this.sign(message, SIGN_MESSAGE_INS);\n    }\n\n    async getAddressAndSignAuthToken(\n        account: number,\n        index: number,\n        token: Buffer,\n    ): Promise<{\n        address: string,\n        signature: string,\n    }> {\n        const data = Buffer.alloc(12);\n\n        data.writeInt32BE(account, 0);\n        data.writeUInt32BE(index, 4);\n        data.writeUInt32BE(token.length, 8);\n\n        let buffersArray = [data, token];\n        let result = await this.sign(Buffer.concat(buffersArray), GET_ADDRESS_AUTH_TOKEN_INS);\n\n        let splitRes = result.split(\"|\");\n        return {\n            address: splitRes[0],\n            signature: splitRes[1]\n        }\n    }\n\n    async getAppConfiguration(): Promise<{\n        version: string,\n    }> {\n        const response = await this.transport.send(0xed, 0x02, 0x00, 0x00);\n        return {\n            contractData: response[0],\n            accountIndex: response[1],\n            addressIndex: response[2],\n            version: `${response[3]}.${response[4]}.${response[5]}`\n        }\n    }\n\n    async sign(message: Buffer, type: number): Promise<string> {\n        if (!ACTIVE_SIGNERS.includes(type)) {\n            throw new Error(`invalid sign instruction called: ${type}`);\n        }\n\n        const apdus = [];\n        let offset = 0;\n\n        while (offset !== message.length) {\n            const isFirst = offset === 0;\n            const maxChunkSize = 150;\n\n            const hasMore = offset + maxChunkSize < message.length;\n            const chunkSize = hasMore ? maxChunkSize : message.length - offset;\n\n            const apdu = {\n                cla: 0xed,\n                ins: type,\n                p1: isFirst ? 0x00 : 0x80,\n                p2: 0x00,\n                data: Buffer.alloc(chunkSize),\n            };\n\n            message.copy(apdu.data, 0, offset, offset + chunkSize);\n\n            apdus.push(apdu);\n            offset += chunkSize;\n        }\n\n        let response = Buffer.alloc(0);\n        for (let apdu of apdus) {\n            response = await this.transport.send(\n                apdu.cla,\n                apdu.ins,\n                apdu.p1,\n                apdu.p2,\n                apdu.data\n            );\n        }\n\n        if (GET_ADDRESS_AUTH_TOKEN_INS === type) {\n            return this.handleAuthTokenResponse(response);\n        }\n\n        if (response.length !== 67 || response[0] !== 64) {\n            throw new Error(\"invalid signature received from ledger device\")\n        }\n\n        return response.slice(1, response.length - 2).toString(\"hex\");\n    }\n\n    handleAuthTokenResponse(response: Buffer) : Promise<string> {\n        if (response.length !== 129 && response[0] !== 126) {\n            throw new Error(\"invalid address and token signature received from ledger device\")\n        }\n\n        const address = response.slice(1, 63).toString(\"ascii\");\n        const signature = response.slice(63, response.length - 2).toString(\"hex\");\n        return address + \"|\" + signature;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}