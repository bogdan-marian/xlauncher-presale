{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StructBinaryCodec = void 0;\n\nvar typesystem_1 = require(\"../typesystem\");\n\nvar fields_1 = require(\"./fields\");\n\nvar StructBinaryCodec = /*#__PURE__*/function () {\n  function StructBinaryCodec(binaryCodec) {\n    _classCallCheck(this, StructBinaryCodec);\n\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n\n  _createClass(StructBinaryCodec, [{\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      var _this$decodeNested = this.decodeNested(buffer, type),\n          _this$decodeNested2 = _slicedToArray(_this$decodeNested, 1),\n          decoded = _this$decodeNested2[0];\n\n      return decoded;\n    }\n  }, {\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var fieldDefinitions = type.getFieldsDefinitions();\n\n      var _this$fieldsCodec$dec = this.fieldsCodec.decodeNested(buffer, fieldDefinitions),\n          _this$fieldsCodec$dec2 = _slicedToArray(_this$fieldsCodec$dec, 2),\n          fields = _this$fieldsCodec$dec2[0],\n          offset = _this$fieldsCodec$dec2[1];\n\n      var struct = new typesystem_1.Struct(type, fields);\n      return [struct, offset];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(struct) {\n      var fields = struct.getFields();\n      var buffer = this.fieldsCodec.encodeNested(fields);\n      return buffer;\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(struct) {\n      return this.encodeNested(struct);\n    }\n  }]);\n\n  return StructBinaryCodec;\n}();\n\nexports.StructBinaryCodec = StructBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/struct.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;IAEa,iB;EAGT,2BAAY,WAAZ,EAAoC;IAAA;;IAChC,KAAK,WAAL,GAAmB,IAAI,QAAA,CAAA,iBAAJ,CAAsB,WAAtB,CAAnB;EACH;;;;WAED,wBAAe,MAAf,EAA+B,IAA/B,EAA+C;MAC3C,yBAAgB,KAAK,YAAL,CAAkB,MAAlB,EAA0B,IAA1B,CAAhB;MAAA;MAAA,IAAK,OAAL;;MACA,OAAO,OAAP;IACH;;;WAED,sBAAa,MAAb,EAA6B,IAA7B,EAA6C;MACzC,IAAI,gBAAgB,GAAG,IAAI,CAAC,oBAAL,EAAvB;;MACA,4BAA0C,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,gBAAtC,CAA1C;MAAA;MAAA,IAAK,MAAL;MAAA,IAAa,MAAb;;MACA,IAAI,MAAM,GAAG,IAAI,YAAA,CAAA,MAAJ,CAAW,IAAX,EAAiB,MAAjB,CAAb;MACA,OAAO,CAAC,MAAD,EAAS,MAAT,CAAP;IACH;;;WAED,sBAAa,MAAb,EAA2B;MACvB,IAAI,MAAM,GAAG,MAAM,CAAC,SAAP,EAAb;MACA,IAAI,MAAM,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,CAAb;MACA,OAAO,MAAP;IACH;;;WAED,wBAAe,MAAf,EAA6B;MACzB,OAAO,KAAK,YAAL,CAAkB,MAAlB,CAAP;IACH;;;;;;AA3BL,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StructBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nconst fields_1 = require(\"./fields\");\nclass StructBinaryCodec {\n    constructor(binaryCodec) {\n        this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n    }\n    decodeTopLevel(buffer, type) {\n        let [decoded] = this.decodeNested(buffer, type);\n        return decoded;\n    }\n    decodeNested(buffer, type) {\n        let fieldDefinitions = type.getFieldsDefinitions();\n        let [fields, offset] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);\n        let struct = new typesystem_1.Struct(type, fields);\n        return [struct, offset];\n    }\n    encodeNested(struct) {\n        let fields = struct.getFields();\n        let buffer = this.fieldsCodec.encodeNested(fields);\n        return buffer;\n    }\n    encodeTopLevel(struct) {\n        return this.encodeNested(struct);\n    }\n}\nexports.StructBinaryCodec = StructBinaryCodec;\n//# sourceMappingURL=struct.js.map"]},"metadata":{},"sourceType":"script"}