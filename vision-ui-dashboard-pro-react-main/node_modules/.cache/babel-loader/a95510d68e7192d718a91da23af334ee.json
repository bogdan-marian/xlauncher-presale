{"ast":null,"code":"/*!\nFullCalendar v5.9.0\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/\nimport './main.css';\nimport { hasBgRendering, Splitter, createFormatter, createElement, ViewContextType, RenderHook, BaseComponent, createRef, diffDays, buildNavLinkData, WeekNumberRoot, getStickyHeaderDates, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorRoot, renderScrollShim, DateComponent, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkRoot, setRef, SegHierarchy, groupIntersectingEntries, buildEntryKey, binarySearch, getEntrySpanEnd, StandardEvent, DayCellContent, Fragment, getSegMeta, memoize, sortEventSegs, DayCellRoot, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, intersectRanges, Slicer, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nimport { DayTable } from '@fullcalendar/daygrid';\n\nvar AllDaySplitter =\n/** @class */\nfunction (_super) {\n  __extends(AllDaySplitter, _super);\n\n  function AllDaySplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AllDaySplitter.prototype.getKeyInfo = function () {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  };\n\n  AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    }\n\n    return ['timed'];\n  };\n\n  AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    }\n\n    return ['allDay'];\n  };\n\n  return AllDaySplitter;\n}(Splitter);\n\nvar DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\n\nfunction TimeColsAxisCell(props) {\n  var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return createElement(ViewContextType.Consumer, null, function (context) {\n    if (!props.isLabeled) {\n      return createElement(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n\n    var dateEnv = context.dateEnv,\n        options = context.options,\n        viewApi = context.viewApi;\n    var labelFormat = // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) : createFormatter(options.slotLabelFormat);\n    var hookProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.slotLabelClassNames,\n      content: options.slotLabelContent,\n      defaultContent: renderInnerContent,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-time\": props.isoTimeStr\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\",\n        ref: innerElRef\n      }, innerContent)));\n    });\n  });\n}\n\nfunction renderInnerContent(props) {\n  return props.text;\n}\n\nvar TimeBodyAxis =\n/** @class */\nfunction (_super) {\n  __extends(TimeBodyAxis, _super);\n\n  function TimeBodyAxis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeBodyAxis.prototype.render = function () {\n    return this.props.slatMetas.map(function (slatMeta) {\n      return createElement(\"tr\", {\n        key: slatMeta.key\n      }, createElement(TimeColsAxisCell, __assign({}, slatMeta)));\n    });\n  };\n\n  return TimeBodyAxis;\n}(BaseComponent);\n\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'short'\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\n\nvar TimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsView, _super);\n\n  function TimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n\n    _this.headerElRef = createRef();\n    _this.rootElRef = createRef();\n    _this.scrollerElRef = createRef();\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleScrollTopRequest = function (scrollTop) {\n      var scrollerEl = _this.scrollerElRef.current;\n\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    _this.renderHeadAxis = function (rowKey, frameHeight) {\n      if (frameHeight === void 0) {\n        frameHeight = '';\n      }\n\n      var options = _this.context.options;\n      var dateProfile = _this.props.dateProfile;\n      var range = dateProfile.renderRange;\n      var dayCnt = diffDays(range.start, range.end);\n      var navLinkAttrs = options.navLinks && dayCnt === 1 // only do in day views (to avoid doing in week views that dont need it)\n      ? {\n        'data-navlink': buildNavLinkData(range.start, 'week'),\n        tabIndex: 0\n      } : {};\n\n      if (options.weekNumbers && rowKey === 'day') {\n        return createElement(WeekNumberRoot, {\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"th\", {\n            ref: rootElRef,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\",\n            style: {\n              height: frameHeight\n            }\n          }, createElement(\"a\", __assign({\n            ref: innerElRef,\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n          }, navLinkAttrs), innerContent)));\n        });\n      }\n\n      return createElement(\"th\", {\n        className: \"fc-timegrid-axis\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n\n\n    _this.renderTableRowAxis = function (rowHeight) {\n      var _a = _this.context,\n          options = _a.options,\n          viewApi = _a.viewApi;\n      var hookProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (// TODO: make reusable hook. used in list view too\n        createElement(RenderHook, {\n          hookProps: hookProps,\n          classNames: options.allDayClassNames,\n          content: options.allDayContent,\n          defaultContent: renderAllDayInner,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"td\", {\n            ref: rootElRef,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: 'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''),\n            style: {\n              height: rowHeight\n            }\n          }, createElement(\"span\", {\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\",\n            ref: innerElRef\n          }, innerContent)));\n        })\n      );\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n    };\n\n    return _this;\n  } // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n\n  TimeColsView.prototype.renderSimpleLayout = function (headerRowContent, allDayContent, timeContent) {\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: {\n          content: allDayContent\n        }\n      });\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [{\n          width: 'shrink'\n        }],\n        sections: sections\n      }));\n    });\n  };\n\n  TimeColsView.prototype.renderHScrollLayout = function (headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n    var _this = this;\n\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function rowContent(arg) {\n            return createElement(\"tr\", null, _this.renderHeadAxis('day', arg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function rowContent(contentArg) {\n            return createElement(\"tr\", null, _this.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          content: allDayContent\n        }]\n      });\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          colSpan: 2,\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n\n    var isNowIndicator = context.options.nowIndicator;\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [{\n        key: 'axis',\n        content: function content(arg) {\n          return (// TODO: make this now-indicator arrow more DRY with TimeColsContent\n            createElement(\"div\", {\n              className: \"fc-timegrid-axis-chunk\"\n            }, createElement(\"table\", {\n              style: {\n                height: arg.expandRows ? arg.clientHeight : ''\n              }\n            }, arg.tableColGroupNode, createElement(\"tbody\", null, createElement(TimeBodyAxis, {\n              slatMetas: slatMetas\n            }))), createElement(\"div\", {\n              className: \"fc-timegrid-now-indicator-container\"\n            }, createElement(NowTimer, {\n              unit: isNowIndicator ? 'minute' : 'day'\n              /* hacky */\n\n            }, function (nowDate) {\n              var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n\n              if (typeof nowIndicatorTop === 'number') {\n                return createElement(NowIndicatorRoot, {\n                  isAxis: true,\n                  date: nowDate\n                }, function (rootElRef, classNames, innerElRef, innerContent) {\n                  return createElement(\"div\", {\n                    ref: rootElRef,\n                    className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n                    style: {\n                      top: nowIndicatorTop\n                    }\n                  }, innerContent);\n                });\n              }\n\n              return null;\n            })))\n          );\n        }\n      }, {\n        key: 'cols',\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }]\n    });\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'axis',\n          content: renderScrollShim\n        }, {\n          key: 'cols',\n          content: renderScrollShim\n        }]\n      });\n    }\n\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: false,\n        colGroups: [{\n          width: 'shrink',\n          cols: [{\n            width: 'shrink'\n          }]\n        }, {\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeColsView.prototype.getAllDayMaxEventProps = function () {\n    var _a = this.context.options,\n        dayMaxEvents = _a.dayMaxEvents,\n        dayMaxEventRows = _a.dayMaxEventRows;\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n      // is auto?\n      dayMaxEvents = undefined;\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n    }\n\n    return {\n      dayMaxEvents: dayMaxEvents,\n      dayMaxEventRows: dayMaxEventRows\n    };\n  };\n\n  return TimeColsView;\n}(DateComponent);\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n\nvar TimeColsSlatsCoords =\n/** @class */\nfunction () {\n  function TimeColsSlatsCoords(positions, dateProfile, slotDuration) {\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slotDuration = slotDuration;\n  }\n\n  TimeColsSlatsCoords.prototype.safeComputeTop = function (date) {\n    var dateProfile = this.dateProfile;\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      var startOfDayDate = startOfDay(date);\n      var timeMs = date.valueOf() - startOfDayDate.valueOf();\n\n      if (timeMs >= asRoughMs(dateProfile.slotMinTime) && timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n        return this.computeTimeTop(createDuration(timeMs));\n      }\n    }\n\n    return null;\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\n\n  TimeColsSlatsCoords.prototype.computeDateTop = function (when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n\n\n  TimeColsSlatsCoords.prototype.computeTimeTop = function (duration) {\n    var _a = this,\n        positions = _a.positions,\n        dateProfile = _a.dateProfile;\n\n    var len = positions.els.length; // floating-point value of # of slots covered\n\n    var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n    var slatIndex;\n    var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n\n    slatRemainder = slatCoverage - slatIndex;\n    return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n  };\n\n  return TimeColsSlatsCoords;\n}();\n\nvar TimeColsSlatsBody =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsSlatsBody, _super);\n\n  function TimeColsSlatsBody() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColsSlatsBody.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var options = context.options;\n    var slatElRefs = props.slatElRefs;\n    return createElement(\"tbody\", null, props.slatMetas.map(function (slatMeta, i) {\n      var hookProps = {\n        time: slatMeta.time,\n        date: context.dateEnv.toDate(slatMeta.date),\n        view: context.viewApi\n      };\n      var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-lane', slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor'];\n      return createElement(\"tr\", {\n        key: slatMeta.key,\n        ref: slatElRefs.createRef(slatMeta.key)\n      }, props.axis && createElement(TimeColsAxisCell, __assign({}, slatMeta)), createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.slotLaneClassNames,\n        content: options.slotLaneContent,\n        didMount: options.slotLaneDidMount,\n        willUnmount: options.slotLaneWillUnmount\n      }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          className: classNames.concat(customClassNames).join(' '),\n          \"data-time\": slatMeta.isoTimeStr\n        }, innerContent);\n      }));\n    }));\n  };\n\n  return TimeColsSlatsBody;\n}(BaseComponent);\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\n\nvar TimeColsSlats =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsSlats, _super);\n\n  function TimeColsSlats() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    _this.slatElRefs = new RefMap();\n    return _this;\n  }\n\n  TimeColsSlats.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    return createElement(\"div\", {\n      className: \"fc-timegrid-slots\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      className: context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, props.tableColGroupNode\n    /* relies on there only being a single <col> for the axis */\n    , createElement(TimeColsSlatsBody, {\n      slatElRefs: this.slatElRefs,\n      axis: props.axis,\n      slatMetas: props.slatMetas\n    })));\n  };\n\n  TimeColsSlats.prototype.componentDidMount = function () {\n    this.updateSizing();\n  };\n\n  TimeColsSlats.prototype.componentDidUpdate = function () {\n    this.updateSizing();\n  };\n\n  TimeColsSlats.prototype.componentWillUnmount = function () {\n    if (this.props.onCoords) {\n      this.props.onCoords(null);\n    }\n  };\n\n  TimeColsSlats.prototype.updateSizing = function () {\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      var rootEl = this.rootElRef.current;\n\n      if (rootEl.offsetHeight) {\n        // not hidden by css\n        props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n      }\n    }\n  };\n\n  return TimeColsSlats;\n}(BaseComponent);\n\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(function (slatMeta) {\n    return elMap[slatMeta.key];\n  });\n}\n\nfunction splitSegsByCol(segs, colCnt) {\n  var segsByCol = [];\n  var i;\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n\n  return segsByCol;\n}\n\nfunction splitInteractionByCol(ui, colCnt) {\n  var byRow = [];\n\n  if (!ui) {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.col].segs.push(seg);\n    }\n  }\n\n  return byRow;\n}\n\nvar TimeColMoreLink =\n/** @class */\nfunction (_super) {\n  __extends(TimeColMoreLink, _super);\n\n  function TimeColMoreLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    return _this;\n  }\n\n  TimeColMoreLink.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    return createElement(MoreLinkRoot, {\n      allDayDate: null,\n      moreCnt: props.hiddenSegs.length,\n      allSegs: props.hiddenSegs,\n      hiddenSegs: props.hiddenSegs,\n      alignmentElRef: this.rootElRef,\n      defaultContent: renderMoreLinkInner,\n      extraDateSpan: props.extraDateSpan,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      popoverContent: function popoverContent() {\n        return renderPlainFgSegs(props.hiddenSegs, props);\n      }\n    }, function (rootElRef, classNames, innerElRef, innerContent, handleClick) {\n      return createElement(\"a\", {\n        ref: function ref(el) {\n          setRef(rootElRef, el);\n          setRef(_this.rootElRef, el);\n        },\n        className: ['fc-timegrid-more-link'].concat(classNames).join(' '),\n        style: {\n          top: props.top,\n          bottom: props.bottom\n        },\n        onClick: handleClick\n      }, createElement(\"div\", {\n        ref: innerElRef,\n        className: \"fc-timegrid-more-link-inner fc-sticky\"\n      }, innerContent));\n    });\n  };\n\n  return TimeColMoreLink;\n}(BaseComponent);\n\nfunction renderMoreLinkInner(props) {\n  return props.shortText;\n} // segInputs assumed sorted\n\n\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n  var hierarchy = new SegHierarchy();\n\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder;\n  }\n\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt;\n  }\n\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var hiddenGroups = groupIntersectingEntries(hiddenEntries);\n  var web = buildWeb(hierarchy);\n  web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n\n  var segRects = webToRects(web);\n  return {\n    segRects: segRects,\n    hiddenGroups: hiddenGroups\n  };\n}\n\nfunction buildWeb(hierarchy) {\n  var entriesByLevel = hierarchy.entriesByLevel;\n  var buildNode = cacheable(function (level, lateral) {\n    return level + ':' + lateral;\n  }, function (level, lateral) {\n    var siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n    var nextLevelRes = buildNodes(siblingRange, buildNode);\n    var entry = entriesByLevel[level][lateral];\n    return [__assign(__assign({}, entry), {\n      nextLevelNodes: nextLevelRes[0]\n    }), entry.thickness + nextLevelRes[1] // the pressure builds\n    ];\n  });\n  return buildNodes(entriesByLevel.length ? {\n    level: 0,\n    lateralStart: 0,\n    lateralEnd: entriesByLevel[0].length\n  } : null, buildNode)[0];\n}\n\nfunction buildNodes(siblingRange, buildNode) {\n  if (!siblingRange) {\n    return [[], 0];\n  }\n\n  var level = siblingRange.level,\n      lateralStart = siblingRange.lateralStart,\n      lateralEnd = siblingRange.lateralEnd;\n  var lateral = lateralStart;\n  var pairs = [];\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral));\n    lateral += 1;\n  }\n\n  pairs.sort(cmpDescPressures);\n  return [pairs.map(extractNode), pairs[0][1] // first item's pressure\n  ];\n}\n\nfunction cmpDescPressures(a, b) {\n  return b[1] - a[1];\n}\n\nfunction extractNode(a) {\n  return a[0];\n}\n\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n  var levelCoords = hierarchy.levelCoords,\n      entriesByLevel = hierarchy.entriesByLevel;\n  var subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n  var afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n  var levelCnt = levelCoords.length;\n  var level = subjectLevel; // skip past levels that are too high up\n\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) {\n    ;\n  } // do nothing\n\n\n  for (; level < levelCnt; level += 1) {\n    var entries = entriesByLevel[level];\n    var entry = void 0;\n    var searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n    var lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n\n    var lateralEnd = lateralStart;\n\n    while ( // loop through entries that horizontally intersect\n    (entry = entries[lateralEnd]) && // but not past the whole seg list\n    entry.span.start < subjectEntry.span.end) {\n      lateralEnd += 1;\n    }\n\n    if (lateralStart < lateralEnd) {\n      return {\n        level: level,\n        lateralStart: lateralStart,\n        lateralEnd: lateralEnd\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction stretchWeb(topLevelNodes, totalThickness) {\n  var stretchNode = cacheable(function (node, startCoord, prevThickness) {\n    return buildEntryKey(node);\n  }, function (node, startCoord, prevThickness) {\n    var nextLevelNodes = node.nextLevelNodes,\n        thickness = node.thickness;\n    var allThickness = thickness + prevThickness;\n    var thicknessFraction = thickness / allThickness;\n    var endCoord;\n    var newChildren = [];\n\n    if (!nextLevelNodes.length) {\n      endCoord = totalThickness;\n    } else {\n      for (var _i = 0, nextLevelNodes_1 = nextLevelNodes; _i < nextLevelNodes_1.length; _i++) {\n        var childNode = nextLevelNodes_1[_i];\n\n        if (endCoord === undefined) {\n          var res = stretchNode(childNode, startCoord, allThickness);\n          endCoord = res[0];\n          newChildren.push(res[1]);\n        } else {\n          var res = stretchNode(childNode, endCoord, 0);\n          newChildren.push(res[1]);\n        }\n      }\n    }\n\n    var newThickness = (endCoord - startCoord) * thicknessFraction;\n    return [endCoord - newThickness, __assign(__assign({}, node), {\n      thickness: newThickness,\n      nextLevelNodes: newChildren\n    })];\n  });\n  return topLevelNodes.map(function (node) {\n    return stretchNode(node, 0, 0)[1];\n  });\n} // not sorted in any particular order\n\n\nfunction webToRects(topLevelNodes) {\n  var rects = [];\n  var processNode = cacheable(function (node, levelCoord, stackDepth) {\n    return buildEntryKey(node);\n  }, function (node, levelCoord, stackDepth) {\n    var rect = __assign(__assign({}, node), {\n      levelCoord: levelCoord,\n      stackDepth: stackDepth,\n      stackForward: 0\n    });\n\n    rects.push(rect);\n    return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n  });\n\n  function processNodes(nodes, levelCoord, stackDepth) {\n    var stackForward = 0;\n\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var node = nodes_1[_i];\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n    }\n\n    return stackForward;\n  }\n\n  processNodes(topLevelNodes, 0, 0);\n  return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n} // TODO: move to general util\n\n\nfunction cacheable(keyFunc, workFunc) {\n  var cache = {};\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var key = keyFunc.apply(void 0, args);\n    return key in cache ? cache[key] : cache[key] = workFunc.apply(void 0, args);\n  };\n}\n\nfunction computeSegVCoords(segs, colDate, slatCoords, eventMinHeight) {\n  if (slatCoords === void 0) {\n    slatCoords = null;\n  }\n\n  if (eventMinHeight === void 0) {\n    eventMinHeight = 0;\n  }\n\n  var vcoords = [];\n\n  if (slatCoords) {\n    for (var i = 0; i < segs.length; i += 1) {\n      var seg = segs[i];\n      var spanStart = slatCoords.computeDateTop(seg.start, colDate);\n      var spanEnd = Math.max(spanStart + (eventMinHeight || 0), // :(\n      slatCoords.computeDateTop(seg.end, colDate));\n      vcoords.push({\n        start: Math.round(spanStart),\n        end: Math.round(spanEnd) //\n\n      });\n    }\n  }\n\n  return vcoords;\n}\n\nfunction computeFgSegPlacements(segs, segVCoords, // might not have for every seg\neventOrderStrict, eventMaxStack) {\n  var segInputs = [];\n  var dumbSegs = []; // segs without coords\n\n  for (var i = 0; i < segs.length; i += 1) {\n    var vcoords = segVCoords[i];\n\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords\n      });\n    } else {\n      dumbSegs.push(segs[i]);\n    }\n  }\n\n  var _a = buildPositioning(segInputs, eventOrderStrict, eventMaxStack),\n      segRects = _a.segRects,\n      hiddenGroups = _a.hiddenGroups;\n\n  var segPlacements = [];\n\n  for (var _i = 0, segRects_1 = segRects; _i < segRects_1.length; _i++) {\n    var segRect = segRects_1[_i];\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect\n    });\n  }\n\n  for (var _b = 0, dumbSegs_1 = dumbSegs; _b < dumbSegs_1.length; _b++) {\n    var dumbSeg = dumbSegs_1[_b];\n    segPlacements.push({\n      seg: dumbSeg,\n      rect: null\n    });\n  }\n\n  return {\n    segPlacements: segPlacements,\n    hiddenGroups: hiddenGroups\n  };\n}\n\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\n\nvar TimeColEvent =\n/** @class */\nfunction (_super) {\n  __extends(TimeColEvent, _super);\n\n  function TimeColEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColEvent.prototype.render = function () {\n    var classNames = ['fc-timegrid-event', 'fc-v-event'];\n\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short');\n    }\n\n    return createElement(StandardEvent, __assign({}, this.props, {\n      defaultTimeFormat: DEFAULT_TIME_FORMAT,\n      extraClassNames: classNames\n    }));\n  };\n\n  return TimeColEvent;\n}(BaseComponent);\n\nvar TimeColMisc =\n/** @class */\nfunction (_super) {\n  __extends(TimeColMisc, _super);\n\n  function TimeColMisc() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColMisc.prototype.render = function () {\n    var props = this.props;\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (innerElRef, innerContent) {\n      return innerContent && createElement(\"div\", {\n        className: \"fc-timegrid-col-misc\",\n        ref: innerElRef\n      }, innerContent);\n    });\n  };\n\n  return TimeColMisc;\n}(BaseComponent);\n\nvar TimeCol =\n/** @class */\nfunction (_super) {\n  __extends(TimeCol, _super);\n\n  function TimeCol() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.sortEventSegs = memoize(sortEventSegs);\n    return _this;\n  } // TODO: memoize event-placement?\n\n\n  TimeCol.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var isSelectMirror = context.options.selectMirror;\n    var mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n    var interactionAffectedInstances = // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    var sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder);\n    return createElement(DayCellRoot, {\n      elRef: props.elRef,\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (rootElRef, classNames, dataAttrs) {\n      return createElement(\"td\", __assign({\n        ref: rootElRef,\n        className: ['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')\n      }, dataAttrs, props.extraDataAttrs), createElement(\"div\", {\n        className: \"fc-timegrid-col-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-col-bg\"\n      }, _this.renderFillSegs(props.businessHourSegs, 'non-business'), _this.renderFillSegs(props.bgEventSegs, 'bg-event'), _this.renderFillSegs(props.dateSelectionSegs, 'highlight')), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), createElement(\"div\", {\n        className: \"fc-timegrid-now-indicator-container\"\n      }, _this.renderNowIndicator(props.nowIndicatorSegs)), createElement(TimeColMisc, {\n        date: props.date,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      })));\n    });\n  };\n\n  TimeCol.prototype.renderFgSegs = function (sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var props = this.props;\n\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props);\n    }\n\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n  };\n\n  TimeCol.prototype.renderPositionedFgSegs = function (segs, // if not mirror, needs to be sorted\n  segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var _this = this;\n\n    var _a = this.context.options,\n        eventMaxStack = _a.eventMaxStack,\n        eventShortHeight = _a.eventShortHeight,\n        eventOrderStrict = _a.eventOrderStrict,\n        eventMinHeight = _a.eventMinHeight;\n    var _b = this.props,\n        date = _b.date,\n        slatCoords = _b.slatCoords,\n        eventSelection = _b.eventSelection,\n        todayRange = _b.todayRange,\n        nowDate = _b.nowDate;\n    var isMirror = isDragging || isResizing || isDateSelecting;\n    var segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n\n    var _c = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack),\n        segPlacements = _c.segPlacements,\n        hiddenGroups = _c.hiddenGroups;\n\n    return createElement(Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(function (segPlacement) {\n      var seg = segPlacement.seg,\n          rect = segPlacement.rect;\n      var instanceId = seg.eventRange.instance.instanceId;\n      var isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n      var vStyle = computeSegVStyle(rect && rect.span);\n      var hStyle = !isMirror && rect ? _this.computeSegHStyle(rect) : {\n        left: 0,\n        right: 0\n      };\n      var isInset = Boolean(rect) && rect.stackForward > 0;\n      var isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n\n      return createElement(\"div\", {\n        className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),\n        key: instanceId,\n        style: __assign(__assign({\n          visibility: isVisible ? '' : 'hidden'\n        }, vStyle), hStyle)\n      }, createElement(TimeColEvent, __assign({\n        seg: seg,\n        isDragging: isDragging,\n        isResizing: isResizing,\n        isDateSelecting: isDateSelecting,\n        isSelected: instanceId === eventSelection,\n        isShort: isShort\n      }, getSegMeta(seg, todayRange, nowDate))));\n    }));\n  }; // will already have eventMinHeight applied because segInputs already had it\n\n\n  TimeCol.prototype.renderHiddenGroups = function (hiddenGroups, segs) {\n    var _a = this.props,\n        extraDateSpan = _a.extraDateSpan,\n        dateProfile = _a.dateProfile,\n        todayRange = _a.todayRange,\n        nowDate = _a.nowDate,\n        eventSelection = _a.eventSelection,\n        eventDrag = _a.eventDrag,\n        eventResize = _a.eventResize;\n    return createElement(Fragment, null, hiddenGroups.map(function (hiddenGroup) {\n      var positionCss = computeSegVStyle(hiddenGroup.span);\n      var hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n      return createElement(TimeColMoreLink, {\n        key: buildIsoString(computeEarliestSegStart(hiddenSegs)),\n        hiddenSegs: hiddenSegs,\n        top: positionCss.top,\n        bottom: positionCss.bottom,\n        extraDateSpan: extraDateSpan,\n        dateProfile: dateProfile,\n        todayRange: todayRange,\n        nowDate: nowDate,\n        eventSelection: eventSelection,\n        eventDrag: eventDrag,\n        eventResize: eventResize\n      });\n    }));\n  };\n\n  TimeCol.prototype.renderFillSegs = function (segs, fillType) {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n\n    var children = segVCoords.map(function (vcoords, i) {\n      var seg = segs[i];\n      return createElement(\"div\", {\n        key: buildEventRangeKey(seg.eventRange),\n        className: \"fc-timegrid-bg-harness\",\n        style: computeSegVStyle(vcoords)\n      }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n        seg: seg\n      }, getSegMeta(seg, props.todayRange, props.nowDate))) : renderFill(fillType));\n    });\n    return createElement(Fragment, null, children);\n  };\n\n  TimeCol.prototype.renderNowIndicator = function (segs) {\n    var _a = this.props,\n        slatCoords = _a.slatCoords,\n        date = _a.date;\n\n    if (!slatCoords) {\n      return null;\n    }\n\n    return segs.map(function (seg, i) {\n      return createElement(NowIndicatorRoot, {\n        isAxis: false,\n        date: date,\n        // key doesn't matter. will only ever be one\n        key: i\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"div\", {\n          ref: rootElRef,\n          className: ['fc-timegrid-now-indicator-line'].concat(classNames).join(' '),\n          style: {\n            top: slatCoords.computeDateTop(seg.start, date)\n          }\n        }, innerContent);\n      });\n    });\n  };\n\n  TimeCol.prototype.computeSegHStyle = function (segHCoords) {\n    var _a = this.context,\n        isRtl = _a.isRtl,\n        options = _a.options;\n    var shouldOverlap = options.slotEventOverlap;\n    var nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n\n    var farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n\n    var left; // amount of space from left edge, a fraction of the total width\n\n    var right; // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord;\n      right = nearCoord;\n    } else {\n      left = nearCoord;\n      right = 1 - farCoord;\n    }\n\n    var props = {\n      zIndex: segHCoords.stackDepth + 1,\n      left: left * 100 + '%',\n      right: right * 100 + '%'\n    };\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return props;\n  };\n\n  return TimeCol;\n}(BaseComponent);\n\nfunction renderPlainFgSegs(sortedFgSegs, _a) {\n  var todayRange = _a.todayRange,\n      nowDate = _a.nowDate,\n      eventSelection = _a.eventSelection,\n      eventDrag = _a.eventDrag,\n      eventResize = _a.eventResize;\n  var hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n  return createElement(Fragment, null, sortedFgSegs.map(function (seg) {\n    var instanceId = seg.eventRange.instance.instanceId;\n    return createElement(\"div\", {\n      key: instanceId,\n      style: {\n        visibility: hiddenInstances[instanceId] ? 'hidden' : ''\n      }\n    }, createElement(TimeColEvent, __assign({\n      seg: seg,\n      isDragging: false,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: instanceId === eventSelection,\n      isShort: false\n    }, getSegMeta(seg, todayRange, nowDate))));\n  }));\n}\n\nfunction computeSegVStyle(segVCoords) {\n  if (!segVCoords) {\n    return {\n      top: '',\n      bottom: ''\n    };\n  }\n\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end\n  };\n}\n\nfunction compileSegsFromEntries(segEntries, allSegs) {\n  return segEntries.map(function (segEntry) {\n    return allSegs[segEntry.index];\n  });\n}\n\nvar TimeColsContent =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsContent, _super);\n\n  function TimeColsContent() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.splitFgEventSegs = memoize(splitSegsByCol);\n    _this.splitBgEventSegs = memoize(splitSegsByCol);\n    _this.splitBusinessHourSegs = memoize(splitSegsByCol);\n    _this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n    _this.splitDateSelectionSegs = memoize(splitSegsByCol);\n    _this.splitEventDrag = memoize(splitInteractionByCol);\n    _this.splitEventResize = memoize(splitInteractionByCol);\n    _this.rootElRef = createRef();\n    _this.cellElRefs = new RefMap();\n    return _this;\n  }\n\n  TimeColsContent.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n\n    var colCnt = props.cells.length;\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n    var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n    return createElement(\"div\", {\n      className: \"fc-timegrid-cols\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth\n      }\n    }, props.tableColGroupNode, createElement(\"tbody\", null, createElement(\"tr\", null, props.axis && createElement(\"td\", {\n      className: \"fc-timegrid-col fc-timegrid-axis\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, typeof nowIndicatorTop === 'number' && createElement(NowIndicatorRoot, {\n      isAxis: true,\n      date: props.nowDate\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n        style: {\n          top: nowIndicatorTop\n        }\n      }, innerContent);\n    })))), props.cells.map(function (cell, i) {\n      return createElement(TimeCol, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        nowDate: props.nowDate,\n        todayRange: props.todayRange,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        fgEventSegs: fgEventSegsByRow[i],\n        bgEventSegs: bgEventSegsByRow[i],\n        businessHourSegs: businessHourSegsByRow[i],\n        nowIndicatorSegs: nowIndicatorSegsByRow[i],\n        dateSelectionSegs: dateSelectionSegsByRow[i],\n        eventDrag: eventDragByRow[i],\n        eventResize: eventResizeByRow[i],\n        slatCoords: props.slatCoords,\n        eventSelection: props.eventSelection,\n        forPrint: props.forPrint\n      });\n    })))));\n  };\n\n  TimeColsContent.prototype.componentDidMount = function () {\n    this.updateCoords();\n  };\n\n  TimeColsContent.prototype.componentDidUpdate = function () {\n    this.updateCoords();\n  };\n\n  TimeColsContent.prototype.updateCoords = function () {\n    var props = this.props;\n\n    if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, // horizontal\n      false));\n    }\n  };\n\n  return TimeColsContent;\n}(BaseComponent);\n\nfunction collectCellEls(elMap, cells) {\n  return cells.map(function (cell) {\n    return elMap[cell.key];\n  });\n}\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nvar TimeCols =\n/** @class */\nfunction (_super) {\n  __extends(TimeCols, _super);\n\n  function TimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.processSlotOptions = memoize(processSlotOptions);\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleRootEl = function (el) {\n      if (el) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: el,\n          isHitComboAllowed: _this.props.isHitComboAllowed\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    _this.handleScrollRequest = function (request) {\n      var onScrollTopRequest = _this.props.onScrollTopRequest;\n      var slatCoords = _this.state.slatCoords;\n\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          var top_1 = slatCoords.computeTimeTop(request.time);\n          top_1 = Math.ceil(top_1); // zoom can give weird floating-point values. rather scroll a little bit further\n\n          if (top_1) {\n            top_1 += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n\n          onScrollTopRequest(top_1);\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleColCoords = function (colCoords) {\n      _this.colCoords = colCoords;\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n\n      if (_this.props.onSlatCoords) {\n        _this.props.onSlatCoords(slatCoords);\n      }\n    };\n\n    return _this;\n  }\n\n  TimeCols.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        state = _a.state;\n\n    return createElement(\"div\", {\n      className: \"fc-timegrid-body\",\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(TimeColsSlats, {\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      slatMetas: props.slatMetas,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.axis ? props.tableColGroupNode : null\n      /* axis depends on the colgroup's shrinking */\n      ,\n      onCoords: this.handleSlatCoords\n    }), createElement(TimeColsContent, {\n      cells: props.cells,\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      businessHourSegs: props.businessHourSegs,\n      bgEventSegs: props.bgEventSegs,\n      fgEventSegs: props.fgEventSegs,\n      dateSelectionSegs: props.dateSelectionSegs,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange,\n      nowDate: props.nowDate,\n      nowIndicatorSegs: props.nowIndicatorSegs,\n      clientWidth: props.clientWidth,\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      slatCoords: state.slatCoords,\n      onColCoords: this.handleColCoords,\n      forPrint: props.forPrint\n    }));\n  };\n\n  TimeCols.prototype.componentDidMount = function () {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  };\n\n  TimeCols.prototype.componentDidUpdate = function (prevProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n  };\n\n  TimeCols.prototype.componentWillUnmount = function () {\n    this.scrollResponder.detach();\n  };\n\n  TimeCols.prototype.queryHit = function (positionLeft, positionTop) {\n    var _a = this.context,\n        dateEnv = _a.dateEnv,\n        options = _a.options;\n    var colCoords = this.colCoords;\n    var dateProfile = this.props.dateProfile;\n    var slatCoords = this.state.slatCoords;\n\n    var _b = this.processSlotOptions(this.props.slotDuration, options.snapDuration),\n        snapDuration = _b.snapDuration,\n        snapsPerSlot = _b.snapsPerSlot;\n\n    var colIndex = colCoords.leftToIndex(positionLeft);\n    var slatIndex = slatCoords.positions.topToIndex(positionTop);\n\n    if (colIndex != null && slatIndex != null) {\n      var cell = this.props.cells[colIndex];\n      var slatTop = slatCoords.positions.tops[slatIndex];\n      var slatHeight = slatCoords.positions.getHeight(slatIndex);\n      var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n\n      var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n      var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      var dayDate = this.props.cells[colIndex].date;\n      var time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n      var start = dateEnv.add(dayDate, time);\n      var end = dateEnv.add(start, snapDuration);\n      return {\n        dateProfile: dateProfile,\n        dateSpan: __assign({\n          range: {\n            start: start,\n            end: end\n          },\n          allDay: false\n        }, cell.extraDateSpan),\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        },\n        layer: 0\n      };\n    }\n\n    return null;\n  };\n\n  return TimeCols;\n}(DateComponent);\n\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  var snapDuration = snapDurationOverride || slotDuration;\n  var snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1; // TODO: say warning?\n  }\n\n  return {\n    snapDuration: snapDuration,\n    snapsPerSlot: snapsPerSlot\n  };\n}\n\nvar DayTimeColsSlicer =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeColsSlicer, _super);\n\n  function DayTimeColsSlicer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DayTimeColsSlicer.prototype.sliceRange = function (range, dayRanges) {\n    var segs = [];\n\n    for (var col = 0; col < dayRanges.length; col += 1) {\n      var segRange = intersectRanges(range, dayRanges[col]);\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col: col\n        });\n      }\n    }\n\n    return segs;\n  };\n\n  return DayTimeColsSlicer;\n}(Slicer);\n\nvar DayTimeCols =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeCols, _super);\n\n  function DayTimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.slicer = new DayTimeColsSlicer();\n    _this.timeColsRef = createRef();\n    return _this;\n  }\n\n  DayTimeCols.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var dateProfile = props.dateProfile,\n        dayTableModel = props.dayTableModel;\n    var isNowIndicator = context.options.nowIndicator;\n    var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv); // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n\n    return createElement(NowTimer, {\n      unit: isNowIndicator ? 'minute' : 'day'\n    }, function (nowDate, todayRange) {\n      return createElement(TimeCols, __assign({\n        ref: _this.timeColsRef\n      }, _this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n        forPrint: props.forPrint,\n        axis: props.axis,\n        dateProfile: dateProfile,\n        slatMetas: props.slatMetas,\n        slotDuration: props.slotDuration,\n        cells: dayTableModel.cells[0],\n        tableColGroupNode: props.tableColGroupNode,\n        tableMinWidth: props.tableMinWidth,\n        clientWidth: props.clientWidth,\n        clientHeight: props.clientHeight,\n        expandRows: props.expandRows,\n        nowDate: nowDate,\n        nowIndicatorSegs: isNowIndicator && _this.slicer.sliceNowDate(nowDate, context, dayRanges),\n        todayRange: todayRange,\n        onScrollTopRequest: props.onScrollTopRequest,\n        onSlatCoords: props.onSlatCoords\n      }));\n    });\n  };\n\n  return DayTimeCols;\n}(DateComponent);\n\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  var ranges = [];\n\n  for (var _i = 0, _a = dayTableModel.headerDates; _i < _a.length; _i++) {\n    var date = _a[_i];\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime)\n    });\n  }\n\n  return ranges;\n} // potential nice values for the slot-duration and interval-duration\n// from largest to smallest\n\n\nvar STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\n\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  var dayStart = new Date(0);\n  var slatTime = slotMinTime;\n  var slatIterator = createDuration(0);\n  var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  var metas = [];\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    var date = dateEnv.add(dayStart, slatTime);\n    var isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n    metas.push({\n      date: date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled: isLabeled\n    });\n    slatTime = addDurations(slatTime, slotDuration);\n    slatIterator = addDurations(slatIterator, slotDuration);\n  }\n\n  return metas;\n} // Computes an automatic value for slotLabelInterval\n\n\nfunction computeLabelInterval(slotDuration) {\n  var i;\n  var labelInterval;\n  var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n\n  return slotDuration; // fall back\n}\n\nvar DayTimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeColsView, _super);\n\n  function DayTimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildTimeColsModel = memoize(buildTimeColsModel);\n    _this.buildSlatMetas = memoize(buildSlatMetas);\n    return _this;\n  }\n\n  DayTimeColsView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.context,\n        options = _a.options,\n        dateEnv = _a.dateEnv,\n        dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dateProfile = props.dateProfile;\n    var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n    var splitProps = this.allDaySplitter.splitProps(props);\n    var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    var dayMinWidth = options.dayMinWidth;\n    var hasAttachedAxis = !dayMinWidth;\n    var hasDetachedAxis = dayMinWidth;\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      dates: dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n\n    var allDayContent = options.allDaySlot !== false && function (contentArg) {\n      return createElement(DayTable, __assign({}, splitProps.allDay, {\n        dateProfile: dateProfile,\n        dayTableModel: dayTableModel,\n        nextDayThreshold: options.nextDayThreshold,\n        tableMinWidth: contentArg.tableMinWidth,\n        colGroupNode: contentArg.tableColGroupNode,\n        renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n        showWeekNumbers: false,\n        expandRows: false,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      }, _this.getAllDayMaxEventProps()));\n    };\n\n    var timeGridContent = function timeGridContent(contentArg) {\n      return createElement(DayTimeCols, __assign({}, splitProps.timed, {\n        dayTableModel: dayTableModel,\n        dateProfile: dateProfile,\n        axis: hasAttachedAxis,\n        slotDuration: options.slotDuration,\n        slatMetas: slatMetas,\n        forPrint: props.forPrint,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        onSlatCoords: _this.handleSlatCoords,\n        expandRows: contentArg.expandRows,\n        onScrollTopRequest: _this.handleScrollTopRequest\n      }));\n    };\n\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  };\n\n  return DayTimeColsView;\n}(TimeColsView);\n\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, false);\n}\n\nvar OPTION_REFINERS = {\n  allDaySlot: Boolean\n};\nvar main = createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n\n    },\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };","map":{"version":3,"sources":["src/AllDaySplitter.ts","src/TimeColsAxisCell.tsx","src/TimeBodyAxis.tsx","src/TimeColsView.tsx","src/TimeColsSlatsCoords.ts","src/TimeColsSlatsBody.tsx","src/TimeColsSlats.tsx","src/TimeColsSeg.ts","src/TimeColMoreLink.tsx","src/seg-web.ts","src/event-placement.ts","src/TimeColEvent.tsx","src/TimeColMisc.tsx","src/TimeCol.tsx","src/TimeColsContent.tsx","src/TimeCols.tsx","src/DayTimeColsSlicer.ts","src/DayTimeCols.tsx","src/time-slat-meta.ts","src/DayTimeColsView.tsx","src/options.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan,\n} from '@fullcalendar/common'\n\nexport class AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {},\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return ['allDay']\n    }\n\n    return ['timed']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return ['timed']\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay']\n    }\n\n    return ['allDay']\n  }\n}\n","import {\n  createElement,\n  ViewContext,\n  createFormatter,\n  ViewContextType,\n  RenderHook,\n  SlotLabelContentArg,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short',\n})\n\nexport function TimeColsAxisCell(props: TimeSlatMeta) {\n  let classNames = [\n    'fc-timegrid-slot',\n    'fc-timegrid-slot-label',\n    props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n  ]\n\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        if (!props.isLabeled) {\n          return (\n            <td className={classNames.join(' ')} data-time={props.isoTimeStr} />\n          )\n        }\n\n        let { dateEnv, options, viewApi } = context\n        let labelFormat = // TODO: fully pre-parse\n          options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n              createFormatter(options.slotLabelFormat)\n\n        let hookProps: SlotLabelContentArg = {\n          level: 0,\n          time: props.time,\n          date: dateEnv.toDate(props.date),\n          view: viewApi,\n          text: dateEnv.format(props.date, labelFormat),\n        }\n\n        return (\n          <RenderHook<SlotLabelContentArg> // needed?\n            hookProps={hookProps}\n            classNames={options.slotLabelClassNames}\n            content={options.slotLabelContent}\n            defaultContent={renderInnerContent}\n            didMount={options.slotLabelDidMount}\n            willUnmount={options.slotLabelWillUnmount}\n          >\n            {(rootElRef, customClassNames, innerElRef, innerContent) => (\n              <td ref={rootElRef} className={classNames.concat(customClassNames).join(' ')} data-time={props.isoTimeStr}>\n                <div className=\"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\">\n                  <div className=\"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\" ref={innerElRef}>\n                    {innerContent}\n                  </div>\n                </div>\n              </td>\n            )}\n          </RenderHook>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props) { // TODO: add types\n  return props.text\n}\n","import { createElement, BaseComponent } from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\n/* Thin Axis\n------------------------------------------------------------------------------------------------------------------*/\n\ninterface TimeBodyAxisProps {\n  slatMetas: TimeSlatMeta[]\n}\n\nexport class TimeBodyAxis extends BaseComponent<TimeBodyAxisProps> { // just <tr> content\n  render() {\n    return this.props.slatMetas.map((slatMeta: TimeSlatMeta) => (\n      <tr key={slatMeta.key}>\n        <TimeColsAxisCell {...slatMeta} />\n      </tr>\n    ))\n  }\n}\n","import {\n  createElement, createRef,\n  diffDays,\n  SimpleScrollGridSection,\n  VNode,\n  SimpleScrollGrid,\n  ChunkContentCallbackArgs,\n  ScrollGridSectionConfig,\n  buildNavLinkData,\n  ViewRoot,\n  WeekNumberRoot,\n  RenderHook,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  createFormatter,\n  AllDayContentArg,\n  CssDimValue,\n  NowTimer,\n  DateMarker,\n  NowIndicatorRoot,\n} from '@fullcalendar/common'\nimport { AllDaySplitter } from './AllDaySplitter'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeBodyAxis } from './TimeBodyAxis'\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' })\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeCols subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\ninterface TimeColsViewState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\nexport abstract class TimeColsView extends DateComponent<ViewProps, TimeColsViewState> {\n  protected allDaySplitter = new AllDaySplitter() // for use by subclasses\n\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n  private rootElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n  private scrollerElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  state = {\n    slatCoords: null,\n  }\n\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n  renderSimpleLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n  ) {\n    let { context, props } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: { content: allDayContent },\n      })\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr className=\"fc-scrollgrid-section\">\n            <td\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent,\n      },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[{ width: 'shrink' }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    colCnt: number,\n    dayMinWidth: number,\n    slatMetas: TimeSlatMeta[],\n    slatCoords: TimeColsSlatsCoords | null, // yuck\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { context, props } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (arg: ChunkContentCallbackArgs) => (\n              <tr>{this.renderHeadAxis('day', arg.rowSyncHeights[0])}</tr>\n            ),\n          },\n          {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent,\n          },\n        ],\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (contentArg: ChunkContentCallbackArgs) => (\n              <tr>{this.renderTableRowAxis(contentArg.rowSyncHeights[0])}</tr>\n            ),\n          },\n          {\n            key: 'cols',\n            content: allDayContent,\n          },\n        ],\n      })\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr className=\"fc-scrollgrid-section\">\n            <td\n              colSpan={2}\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    let isNowIndicator = context.options.nowIndicator\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [\n        {\n          key: 'axis',\n          content: (arg) => (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            <div className=\"fc-timegrid-axis-chunk\">\n              <table style={{ height: arg.expandRows ? arg.clientHeight : '' }}>\n                {arg.tableColGroupNode}\n                <tbody>\n                  <TimeBodyAxis slatMetas={slatMetas} />\n                </tbody>\n              </table>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                <NowTimer unit={isNowIndicator ? 'minute' : 'day' /* hacky */}>\n                  {(nowDate: DateMarker) => {\n                    let nowIndicatorTop =\n                      isNowIndicator &&\n                      slatCoords &&\n                      slatCoords.safeComputeTop(nowDate) // might return void\n\n                    if (typeof nowIndicatorTop === 'number') {\n                      return (\n                        <NowIndicatorRoot isAxis date={nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )\n                    }\n\n                    return null\n                  }}\n                </NowTimer>\n              </div>\n            </div>\n          ),\n        },\n        {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent,\n        },\n      ],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'axis',\n            content: renderScrollShim,\n          },\n          {\n            key: 'cols',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={false}\n              colGroups={[\n                { width: 'shrink', cols: [{ width: 'shrink' }] }, // TODO: allow no specify cols\n                { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n              ]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  handleScrollTopRequest = (scrollTop: number) => {\n    let scrollerEl = this.scrollerElRef.current\n\n    if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n      scrollerEl.scrollTop = scrollTop\n    }\n  }\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  getAllDayMaxEventProps() {\n    let { dayMaxEvents, dayMaxEventRows } = this.context.options\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n      dayMaxEvents = undefined\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS // make sure \"auto\" goes to a real number\n    }\n\n    return { dayMaxEvents, dayMaxEventRows }\n  }\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  renderHeadAxis = (rowKey: 'day' | string, frameHeight: CssDimValue = '') => {\n    let { options } = this.context\n    let { dateProfile } = this.props\n    let range = dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n\n    let navLinkAttrs = (options.navLinks && dayCnt === 1) // only do in day views (to avoid doing in week views that dont need it)\n      ? { 'data-navlink': buildNavLinkData(range.start, 'week'), tabIndex: 0 }\n      : {}\n\n    if (options.weekNumbers && rowKey === 'day') {\n      return (\n        <WeekNumberRoot date={range.start} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <th\n              ref={rootElRef}\n              className={[\n                'fc-timegrid-axis',\n                'fc-scrollgrid-shrink',\n              ].concat(classNames).join(' ')}\n            >\n              <div\n                className=\"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\"\n                style={{ height: frameHeight }}\n              >\n                <a\n                  ref={innerElRef}\n                  className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                  {...navLinkAttrs}\n                >\n                  {innerContent}\n                </a>\n              </div>\n            </th>\n          )}\n        </WeekNumberRoot>\n      )\n    }\n\n    return (\n      <th className=\"fc-timegrid-axis\">\n        <div className=\"fc-timegrid-axis-frame\" style={{ height: frameHeight }} />\n      </th>\n    )\n  }\n\n  /* Table Component Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n  // but DayGrid still needs to have classNames on inner elements in order to measure.\n  renderTableRowAxis = (rowHeight?: number) => {\n    let { options, viewApi } = this.context\n    let hookProps: AllDayContentArg = {\n      text: options.allDayText,\n      view: viewApi,\n    }\n\n    return (\n      // TODO: make reusable hook. used in list view too\n      <RenderHook<AllDayContentArg>\n        hookProps={hookProps}\n        classNames={options.allDayClassNames}\n        content={options.allDayContent}\n        defaultContent={renderAllDayInner}\n        didMount={options.allDayDidMount}\n        willUnmount={options.allDayWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <td\n            ref={rootElRef}\n            className={[\n              'fc-timegrid-axis',\n              'fc-scrollgrid-shrink',\n            ].concat(classNames).join(' ')}\n          >\n            <div\n              className={'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '')}\n              style={{ height: rowHeight }}\n            >\n              <span className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\" ref={innerElRef}>\n                {innerContent}\n              </span>\n            </div>\n          </td>\n        )}\n      </RenderHook>\n    )\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords) => {\n    this.setState({ slatCoords })\n  }\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  PositionCache,\n  DateMarker,\n  startOfDay,\n  createDuration,\n  asRoughMs,\n  DateProfile,\n  Duration,\n  rangeContainsMarker,\n} from '@fullcalendar/common'\n\nexport class TimeColsSlatsCoords {\n  constructor(\n    public positions: PositionCache,\n    private dateProfile: DateProfile,\n    private slotDuration: Duration,\n  ) {\n  }\n\n  safeComputeTop(date: DateMarker) { // TODO: DRY with computeDateTop\n    let { dateProfile } = this\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date)\n      let timeMs = date.valueOf() - startOfDayDate.valueOf()\n\n      if (\n        timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n        timeMs < asRoughMs(dateProfile.slotMaxTime)\n      ) {\n        return this.computeTimeTop(createDuration(timeMs))\n      }\n    }\n\n    return null\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration: Duration): number {\n    let { positions, dateProfile } = this\n    let len = positions.els.length\n\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration)\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return positions.tops[slatIndex] +\n      positions.getHeight(slatIndex) * slatRemainder\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  RefMap,\n  RenderHook,\n  SlotLaneContentArg,\n} from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nexport interface TimeColsSlatsBodyProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  slatElRefs: RefMap<HTMLTableRowElement>\n}\n\nexport class TimeColsSlatsBody extends BaseComponent<TimeColsSlatsBodyProps> {\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let { slatElRefs } = props\n\n    return (\n      <tbody>\n        {props.slatMetas.map((slatMeta, i) => {\n          let hookProps: SlotLaneContentArg = {\n            time: slatMeta.time,\n            date: context.dateEnv.toDate(slatMeta.date),\n            view: context.viewApi,\n          }\n\n          let classNames = [\n            'fc-timegrid-slot',\n            'fc-timegrid-slot-lane',\n            slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor',\n          ]\n\n          return (\n            <tr\n              key={slatMeta.key}\n              ref={slatElRefs.createRef(slatMeta.key)}\n            >\n              {props.axis && (\n                <TimeColsAxisCell {...slatMeta} />\n              )}\n              <RenderHook\n                hookProps={hookProps}\n                classNames={options.slotLaneClassNames}\n                content={options.slotLaneContent}\n                didMount={options.slotLaneDidMount}\n                willUnmount={options.slotLaneWillUnmount}\n              >\n                {(rootElRef, customClassNames, innerElRef, innerContent) => (\n                  <td\n                    ref={rootElRef}\n                    className={classNames.concat(customClassNames).join(' ')}\n                    data-time={slatMeta.isoTimeStr}\n                  >\n                    {innerContent}\n                  </td>\n                )}\n              </RenderHook>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n}\n","import {\n  createElement,\n  VNode,\n  BaseComponent,\n  RefMap,\n  CssDimValue,\n  createRef,\n  PositionCache,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSlatsBody } from './TimeColsSlatsBody'\n\nexport interface TimeColsSlatsProps extends TimeColsSlatsContentProps {\n  dateProfile: DateProfile\n  clientWidth: number | null\n  minHeight: CssDimValue\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  onCoords?: (coords: TimeColsSlatsCoords | null) => void\n}\n\ninterface TimeColsSlatsContentProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\nexport class TimeColsSlats extends BaseComponent<TimeColsSlatsProps> {\n  private rootElRef = createRef<HTMLDivElement>()\n  private slatElRefs = new RefMap<HTMLTableRowElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <div className=\"fc-timegrid-slots\" ref={this.rootElRef}>\n        <table\n          className={context.theme.getClass('table')}\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n            height: props.minHeight,\n          }}\n        >\n          {props.tableColGroupNode /* relies on there only being a single <col> for the axis */}\n          <TimeColsSlatsBody\n            slatElRefs={this.slatElRefs}\n            axis={props.axis}\n            slatMetas={props.slatMetas}\n          />\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing()\n  }\n\n  componentDidUpdate() {\n    this.updateSizing()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null)\n    }\n  }\n\n  updateSizing() {\n    let { context, props } = this\n\n    if (\n      props.onCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current\n\n      if (rootEl.offsetHeight) { // not hidden by css\n        props.onCoords(\n          new TimeColsSlatsCoords(\n            new PositionCache(\n              this.rootElRef.current,\n              collectSlatEls(this.slatElRefs.currentMap, props.slatMetas),\n              false,\n              true, // vertical\n            ),\n            this.props.dateProfile,\n            context.options.slotDuration,\n          ),\n        )\n      }\n    }\n  }\n}\n\nfunction collectSlatEls(elMap: { [key: string]: HTMLElement }, slatMetas: TimeSlatMeta[]) {\n  return slatMetas.map((slatMeta) => elMap[slatMeta.key])\n}\n","import { DateMarker, Seg, EventSegUiInteractionState } from '@fullcalendar/common'\n\n// JUST A DATA STRUCTURE, not a component\n\nexport interface TimeColsSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport function splitSegsByCol(segs: TimeColsSeg[] | null, colCnt: number) { // can be given null/undefined!\n  let segsByCol: TimeColsSeg[][] = []\n  let i\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([])\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n  }\n\n  return segsByCol\n}\n\nexport function splitInteractionByCol(ui: EventSegUiInteractionState | null, colCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import {\n  createElement, MoreLinkContentArg, MoreLinkRoot, BaseComponent, createRef, setRef,\n  Dictionary, DateProfile, DateRange, DateMarker, EventSegUiInteractionState, CssDimValue,\n} from '@fullcalendar/common'\nimport { renderPlainFgSegs } from './TimeCol'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColMoreLinkProps {\n  hiddenSegs: TimeColsSeg[]\n  top: CssDimValue\n  bottom: CssDimValue\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  nowDate: DateMarker\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState\n  eventResize: EventSegUiInteractionState\n}\n\nexport class TimeColMoreLink extends BaseComponent<TimeColMoreLinkProps> {\n  rootElRef = createRef<HTMLElement>()\n\n  render() {\n    let { props } = this\n    return (\n      <MoreLinkRoot\n        allDayDate={null}\n        moreCnt={props.hiddenSegs.length}\n        allSegs={props.hiddenSegs}\n        hiddenSegs={props.hiddenSegs}\n        alignmentElRef={this.rootElRef}\n        defaultContent={renderMoreLinkInner}\n        extraDateSpan={props.extraDateSpan}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        popoverContent={() => renderPlainFgSegs(props.hiddenSegs, props)}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick) => (\n          <a\n            ref={(el: HTMLElement | null) => {\n              setRef(rootElRef, el)\n              setRef(this.rootElRef, el)\n            }}\n            className={['fc-timegrid-more-link'].concat(classNames).join(' ')}\n            style={{ top: props.top, bottom: props.bottom }}\n            onClick={handleClick}\n          >\n            <div ref={innerElRef} className=\"fc-timegrid-more-link-inner fc-sticky\">\n              {innerContent}\n            </div>\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction renderMoreLinkInner(props: MoreLinkContentArg) {\n  return props.shortText\n}\n","import {\n  SegEntry,\n  SegHierarchy,\n  SegRect,\n  buildEntryKey,\n  getEntrySpanEnd,\n  binarySearch,\n  SegEntryGroup,\n  groupIntersectingEntries,\n} from '@fullcalendar/common'\n\ninterface SegNode extends SegEntry {\n  nextLevelNodes: SegNode[] // with highest-pressure first\n}\n\ntype SegNodeAndPressure = [ SegNode, number ]\n\ninterface SegSiblingRange { // will ALWAYS have span of 1 or more items. if not, will be null\n  level: number\n  lateralStart: number\n  lateralEnd: number\n}\n\nexport interface SegWebRect extends SegRect {\n  stackDepth: number\n  stackForward: number\n}\n\n// segInputs assumed sorted\nexport function buildPositioning(\n  segInputs: SegEntry[],\n  strictOrder?: boolean,\n  maxStackCnt?: number,\n): { segRects: SegWebRect[], hiddenGroups: SegEntryGroup[] } {\n  let hierarchy = new SegHierarchy()\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries)\n\n  let web = buildWeb(hierarchy)\n  web = stretchWeb(web, 1) // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web)\n\n  return { segRects, hiddenGroups }\n}\n\nfunction buildWeb(hierarchy: SegHierarchy): SegNode[] {\n  const { entriesByLevel } = hierarchy\n\n  const buildNode = cacheable(\n    (level: number, lateral: number) => level + ':' + lateral,\n    (level: number, lateral: number): SegNodeAndPressure => {\n      let siblingRange = findNextLevelSegs(hierarchy, level, lateral)\n      let nextLevelRes = buildNodes(siblingRange, buildNode)\n      let entry = entriesByLevel[level][lateral]\n\n      return [\n        { ...entry, nextLevelNodes: nextLevelRes[0] },\n        entry.thickness + nextLevelRes[1], // the pressure builds\n      ]\n    },\n  )\n\n  return buildNodes(\n    entriesByLevel.length\n      ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n      : null,\n    buildNode,\n  )[0]\n}\n\nfunction buildNodes(\n  siblingRange: SegSiblingRange | null,\n  buildNode: (level: number, lateral: number) => SegNodeAndPressure,\n): [SegNode[], number] { // number is maxPressure\n  if (!siblingRange) {\n    return [[], 0]\n  }\n\n  let { level, lateralStart, lateralEnd } = siblingRange\n  let lateral = lateralStart\n  let pairs: SegNodeAndPressure[] = []\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral))\n    lateral += 1\n  }\n\n  pairs.sort(cmpDescPressures)\n\n  return [\n    pairs.map(extractNode),\n    pairs[0][1], // first item's pressure\n  ]\n}\n\nfunction cmpDescPressures(a: SegNodeAndPressure, b: SegNodeAndPressure) { // sort pressure high -> low\n  return b[1] - a[1]\n}\n\nfunction extractNode(a: SegNodeAndPressure): SegNode {\n  return a[0]\n}\n\nfunction findNextLevelSegs(hierarchy: SegHierarchy, subjectLevel: number, subjectLateral: number): SegSiblingRange | null {\n  let { levelCoords, entriesByLevel } = hierarchy\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral]\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness\n  let levelCnt = levelCoords.length\n  let level = subjectLevel\n\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) ; // do nothing\n\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level]\n    let entry: SegEntry\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd)\n    let lateralStart = searchIndex[0] + searchIndex[1] // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart\n\n    while ( // loop through entries that horizontally intersect\n      (entry = entries[lateralEnd]) && // but not past the whole seg list\n      entry.span.start < subjectEntry.span.end\n    ) { lateralEnd += 1 }\n\n    if (lateralStart < lateralEnd) {\n      return { level, lateralStart, lateralEnd }\n    }\n  }\n\n  return null\n}\n\nfunction stretchWeb(topLevelNodes: SegNode[], totalThickness: number): SegNode[] {\n  const stretchNode = cacheable(\n    (node: SegNode, startCoord: number, prevThickness: number) => buildEntryKey(node),\n    (node: SegNode, startCoord: number, prevThickness: number): [number, SegNode] => { // [startCoord, node]\n      let { nextLevelNodes, thickness } = node\n      let allThickness = thickness + prevThickness\n      let thicknessFraction = thickness / allThickness\n      let endCoord: number\n      let newChildren: SegNode[] = []\n\n      if (!nextLevelNodes.length) {\n        endCoord = totalThickness\n      } else {\n        for (let childNode of nextLevelNodes) {\n          if (endCoord === undefined) {\n            let res = stretchNode(childNode, startCoord, allThickness)\n            endCoord = res[0]\n            newChildren.push(res[1])\n          } else {\n            let res = stretchNode(childNode, endCoord, 0)\n            newChildren.push(res[1])\n          }\n        }\n      }\n\n      let newThickness = (endCoord - startCoord) * thicknessFraction\n      return [endCoord - newThickness, {\n        ...node,\n        thickness: newThickness,\n        nextLevelNodes: newChildren,\n      }]\n    },\n  )\n\n  return topLevelNodes.map((node: SegNode) => stretchNode(node, 0, 0)[1])\n}\n\n// not sorted in any particular order\nfunction webToRects(topLevelNodes: SegNode[]): SegWebRect[] {\n  let rects: SegWebRect[] = []\n\n  const processNode = cacheable(\n    (node: SegNode, levelCoord: number, stackDepth: number) => buildEntryKey(node),\n    (node: SegNode, levelCoord: number, stackDepth: number) => { // returns forwardPressure\n      let rect: SegWebRect = {\n        ...node,\n        levelCoord,\n        stackDepth,\n        stackForward: 0, // will assign after recursing\n      }\n      rects.push(rect)\n\n      return (\n        rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1\n      )\n    },\n  )\n\n  function processNodes(nodes: SegNode[], levelCoord: number, stackDepth: number) { // returns stackForward\n    let stackForward = 0\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward)\n    }\n    return stackForward\n  }\n\n  processNodes(topLevelNodes, 0, 0)\n  return rects // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n\n// TODO: move to general util\n\nfunction cacheable<Args extends any[], Res>(\n  keyFunc: (...args: Args) => string,\n  workFunc: (...args: Args) => Res,\n): ((...args: Args) => Res) {\n  const cache: { [key: string]: Res } = {}\n\n  return (...args: Args) => {\n    let key = keyFunc(...args)\n    return (key in cache)\n      ? cache[key]\n      : (cache[key] = workFunc(...args))\n  }\n}\n","import {\n  SegSpan,\n  SegEntry,\n  SegEntryGroup,\n  DateMarker,\n} from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect, buildPositioning } from './seg-web'\n\n// public interface\n// ------------------------------------------------------------------------------------------\n\nexport interface TimeColFgSegPlacement {\n  seg: TimeColsSeg\n  rect: SegWebRect | null\n}\n\nexport function computeSegVCoords(\n  segs: TimeColsSeg[],\n  colDate: DateMarker,\n  slatCoords: TimeColsSlatsCoords = null,\n  eventMinHeight: number = 0, // might be null/undefined :(\n): SegSpan[] {\n  let vcoords: SegSpan[] = []\n\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i]\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate)\n      let spanEnd = Math.max(\n        spanStart + (eventMinHeight || 0), // :(\n        slatCoords.computeDateTop(seg.end, colDate),\n      )\n      vcoords.push({\n        start: Math.round(spanStart), // for barely-overlapping collisions\n        end: Math.round(spanEnd), //\n      })\n    }\n  }\n\n  return vcoords\n}\n\nexport function computeFgSegPlacements(\n  segs: TimeColsSeg[],\n  segVCoords: SegSpan[], // might not have for every seg\n  eventOrderStrict?: boolean,\n  eventMaxStack?: number,\n): { segPlacements: TimeColFgSegPlacement[], hiddenGroups: SegEntryGroup[] } {\n  let segInputs: SegEntry[] = []\n  let dumbSegs: TimeColsSeg[] = [] // segs without coords\n\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i]\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords,\n      })\n    } else {\n      dumbSegs.push(segs[i])\n    }\n  }\n\n  let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack)\n  let segPlacements: TimeColFgSegPlacement[] = []\n\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect,\n    })\n  }\n\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({ seg: dumbSeg, rect: null })\n  }\n\n  return { segPlacements, hiddenGroups }\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps, createFormatter } from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false,\n})\n\nexport interface TimeColEventProps extends MinimalEventProps {\n  isShort: boolean\n}\n\nexport class TimeColEvent extends BaseComponent<TimeColEventProps> {\n  render() {\n    let classNames = [\n      'fc-timegrid-event',\n      'fc-v-event',\n    ]\n\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short')\n    }\n\n    return (\n      <StandardEvent\n        {...this.props}\n        defaultTimeFormat={DEFAULT_TIME_FORMAT}\n        extraClassNames={classNames}\n      />\n    )\n  }\n}\n","import {\n  DateMarker, BaseComponent, createElement,\n  DateRange, DayCellContent, DateProfile,\n} from '@fullcalendar/common'\n\nexport interface TimeColMiscProps { // should be given nowDate too??\n  dateProfile: DateProfile\n  date: DateMarker\n  todayRange: DateRange\n  extraHookProps?: any\n}\n\nexport class TimeColMisc extends BaseComponent<TimeColMiscProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <DayCellContent date={props.date} dateProfile={props.dateProfile} todayRange={props.todayRange} extraHookProps={props.extraHookProps}>\n        {(innerElRef, innerContent) => (\n          innerContent &&\n            <div className=\"fc-timegrid-col-misc\" ref={innerElRef}>{innerContent}</div>\n        )}\n      </DayCellContent>\n    )\n  }\n}\n","import {\n  Ref, DateMarker, BaseComponent, createElement, EventSegUiInteractionState, Seg, getSegMeta,\n  DateRange, Fragment, DayCellRoot, NowIndicatorRoot, BgEvent, renderFill, buildIsoString, computeEarliestSegStart,\n  DateProfile, buildEventRangeKey, sortEventSegs, memoize, SegEntryGroup, SegEntry, Dictionary, SegSpan, CssDimValue,\n} from '@fullcalendar/common'\nimport { TimeColMoreLink } from './TimeColMoreLink'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect } from './seg-web'\nimport { computeFgSegPlacements, computeSegVCoords } from './event-placement'\nimport { TimeColEvent } from './TimeColEvent'\nimport { TimeColMisc } from './TimeColMisc'\n\nexport interface TimeColProps {\n  elRef?: Ref<HTMLTableCellElement>\n  dateProfile: DateProfile\n  date: DateMarker\n  nowDate: DateMarker\n  todayRange: DateRange\n  extraDataAttrs?: any\n  extraHookProps?: any\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  fgEventSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  businessHourSegs: TimeColsSeg[]\n  nowIndicatorSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  slatCoords: TimeColsSlatsCoords\n  forPrint: boolean\n}\n\nexport class TimeCol extends BaseComponent<TimeColProps> {\n  sortEventSegs = memoize(sortEventSegs)\n  // TODO: memoize event-placement?\n\n  render() {\n    let { props, context } = this\n    let isSelectMirror = context.options.selectMirror\n\n    let mirrorSegs: Seg[] = // yuck\n      (props.eventDrag && props.eventDrag.segs) ||\n      (props.eventResize && props.eventResize.segs) ||\n      (isSelectMirror && props.dateSelectionSegs) ||\n      []\n\n    let interactionAffectedInstances = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder) as TimeColsSeg[]\n\n    return (\n      <DayCellRoot\n        elRef={props.elRef}\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        extraHookProps={props.extraHookProps}\n      >\n        {(rootElRef, classNames, dataAttrs) => (\n          <td\n            ref={rootElRef}\n            className={['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')}\n            {...dataAttrs}\n            {...props.extraDataAttrs}\n          >\n            <div className=\"fc-timegrid-col-frame\">\n              <div className=\"fc-timegrid-col-bg\">\n                {this.renderFillSegs(props.businessHourSegs, 'non-business')}\n                {this.renderFillSegs(props.bgEventSegs, 'bg-event')}\n                {this.renderFillSegs(props.dateSelectionSegs, 'highlight')}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  sortedFgSegs,\n                  interactionAffectedInstances,\n                  false,\n                  false,\n                  false,\n                )}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  mirrorSegs as TimeColsSeg[],\n                  {},\n                  Boolean(props.eventDrag),\n                  Boolean(props.eventResize),\n                  Boolean(isSelectMirror),\n                )}\n              </div>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                {this.renderNowIndicator(props.nowIndicatorSegs)}\n              </div>\n              <TimeColMisc\n                date={props.date}\n                dateProfile={props.dateProfile}\n                todayRange={props.todayRange}\n                extraHookProps={props.extraHookProps}\n              />\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  renderFgSegs(\n    sortedFgSegs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { props } = this\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props)\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting)\n  }\n\n  renderPositionedFgSegs(\n    segs: TimeColsSeg[], // if not mirror, needs to be sorted\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options\n    let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight)\n    let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack)\n\n    return (\n      <Fragment>\n        {this.renderHiddenGroups(hiddenGroups, segs)}\n        {segPlacements.map((segPlacement) => {\n          let { seg, rect } = segPlacement\n          let instanceId = seg.eventRange.instance.instanceId\n          let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect)\n          let vStyle = computeSegVStyle(rect && rect.span)\n          let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 }\n          let isInset = Boolean(rect) && rect.stackForward > 0\n          let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight // look at other places for this problem\n\n          return (\n            <div\n              className={\n                'fc-timegrid-event-harness' +\n                (isInset ? ' fc-timegrid-event-harness-inset' : '')\n              }\n              key={instanceId}\n              style={{\n                visibility: isVisible ? ('' as any) : 'hidden',\n                ...vStyle,\n                ...hStyle,\n              }}\n            >\n              <TimeColEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                isShort={isShort}\n                {...getSegMeta(seg, todayRange, nowDate)}\n              />\n            </div>\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups: SegEntryGroup[], segs: TimeColsSeg[]) {\n    let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props\n    return (\n      <Fragment>\n        {hiddenGroups.map((hiddenGroup) => {\n          let positionCss = computeSegVStyle(hiddenGroup.span)\n          let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs)\n          return (\n            <TimeColMoreLink\n              key={buildIsoString(computeEarliestSegStart(hiddenSegs))}\n              hiddenSegs={hiddenSegs}\n              top={positionCss.top}\n              bottom={positionCss.bottom}\n              extraDateSpan={extraDateSpan}\n              dateProfile={dateProfile}\n              todayRange={todayRange}\n              nowDate={nowDate}\n              eventSelection={eventSelection}\n              eventDrag={eventDrag}\n              eventResize={eventResize}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  renderFillSegs(segs: TimeColsSeg[], fillType: string) {\n    let { props, context } = this\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight) // don't assume all populated\n\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i]\n      return (\n        <div\n          key={buildEventRangeKey(seg.eventRange)}\n          className=\"fc-timegrid-bg-harness\"\n          style={computeSegVStyle(vcoords)}\n        >\n          {fillType === 'bg-event' ?\n            <BgEvent seg={seg} {...getSegMeta(seg, props.todayRange, props.nowDate)} /> :\n            renderFill(fillType)}\n        </div>\n      )\n    })\n\n    return <Fragment>{children}</Fragment>\n  }\n\n  renderNowIndicator(segs: TimeColsSeg[]) {\n    let { slatCoords, date } = this.props\n\n    if (!slatCoords) { return null }\n\n    return segs.map((seg, i) => (\n      <NowIndicatorRoot\n        isAxis={false}\n        date={date}\n        // key doesn't matter. will only ever be one\n        key={i} // eslint-disable-line react/no-array-index-key\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div\n            ref={rootElRef}\n            className={['fc-timegrid-now-indicator-line'].concat(classNames).join(' ')}\n            style={{ top: slatCoords.computeDateTop(seg.start, date) }}\n          >\n            {innerContent}\n          </div>\n        )}\n      </NowIndicatorRoot>\n    ))\n  }\n\n  computeSegHStyle(segHCoords: SegWebRect) {\n    let { isRtl, options } = this.context\n    let shouldOverlap = options.slotEventOverlap\n    let nearCoord = segHCoords.levelCoord // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness // the right side if LTR. the left side if RTL. floating-point\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord\n      right = nearCoord\n    } else {\n      left = nearCoord\n      right = 1 - farCoord\n    }\n\n    let props = {\n      zIndex: segHCoords.stackDepth + 1, // convert from 0-base to 1-based\n      left: left * 100 + '%',\n      right: right * 100 + '%',\n    }\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return props\n  }\n}\n\nexport function renderPlainFgSegs(\n  sortedFgSegs: TimeColsSeg[],\n  { todayRange, nowDate, eventSelection, eventDrag, eventResize }: {\n    todayRange: DateRange\n    nowDate: DateMarker\n    eventSelection: string\n    eventDrag: EventSegUiInteractionState | null\n    eventResize: EventSegUiInteractionState | null\n  },\n) {\n  let hiddenInstances =\n    (eventDrag ? eventDrag.affectedInstances : null) ||\n    (eventResize ? eventResize.affectedInstances : null) ||\n    {}\n  return (\n    <Fragment>\n      {sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId\n        return (\n          <div\n            key={instanceId}\n            style={{ visibility: hiddenInstances[instanceId] ? 'hidden' : ('' as any) }}\n          >\n            <TimeColEvent\n              seg={seg}\n              isDragging={false}\n              isResizing={false}\n              isDateSelecting={false}\n              isSelected={instanceId === eventSelection}\n              isShort={false}\n              {...getSegMeta(seg, todayRange, nowDate)}\n            />\n          </div>\n        )\n      })}\n    </Fragment>\n  )\n}\n\nfunction computeSegVStyle(segVCoords: SegSpan | null): { top: CssDimValue, bottom: CssDimValue } {\n  if (!segVCoords) {\n    return { top: '', bottom: '' }\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end,\n  }\n}\n\nfunction compileSegsFromEntries(\n  segEntries: SegEntry[],\n  allSegs: TimeColsSeg[],\n): TimeColsSeg[] {\n  return segEntries.map((segEntry) => allSegs[segEntry.index])\n}\n","import {\n  createElement, VNode,\n  BaseComponent,\n  EventSegUiInteractionState,\n  CssDimValue,\n  DateMarker,\n  RefMap,\n  createRef,\n  PositionCache,\n  memoize,\n  DateRange,\n  NowIndicatorRoot,\n  DateProfile,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TimeColsSeg, splitSegsByCol, splitInteractionByCol } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeCol } from './TimeCol'\n\nexport interface TimeColsContentProps {\n  axis: boolean\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  nowIndicatorSegs: TimeColsSeg[]\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  slatCoords: TimeColsSlatsCoords\n  onColCoords?: (colCoords: PositionCache) => void\n  forPrint: boolean\n}\n\nexport class TimeColsContent extends BaseComponent<TimeColsContentProps> { // TODO: rename\n  private splitFgEventSegs = memoize(splitSegsByCol)\n  private splitBgEventSegs = memoize(splitSegsByCol)\n  private splitBusinessHourSegs = memoize(splitSegsByCol)\n  private splitNowIndicatorSegs = memoize(splitSegsByCol)\n  private splitDateSelectionSegs = memoize(splitSegsByCol)\n  private splitEventDrag = memoize(splitInteractionByCol)\n  private splitEventResize = memoize(splitInteractionByCol)\n  private rootElRef = createRef<HTMLDivElement>()\n  private cellElRefs = new RefMap<HTMLTableCellElement>()\n\n  render() {\n    let { props, context } = this\n    let nowIndicatorTop =\n      context.options.nowIndicator &&\n      props.slatCoords &&\n      props.slatCoords.safeComputeTop(props.nowDate) // might return void\n\n    let colCnt = props.cells.length\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt)\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt)\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt)\n\n    return (\n      <div className=\"fc-timegrid-cols\" ref={this.rootElRef}>\n        <table style={{\n          minWidth: props.tableMinWidth,\n          width: props.clientWidth,\n        }}\n        >\n          {props.tableColGroupNode}\n          <tbody>\n            <tr>\n              {props.axis && (\n                <td className=\"fc-timegrid-col fc-timegrid-axis\">\n                  <div className=\"fc-timegrid-col-frame\">\n                    <div className=\"fc-timegrid-now-indicator-container\">\n                      {typeof nowIndicatorTop === 'number' && (\n                        <NowIndicatorRoot isAxis date={props.nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )}\n                    </div>\n                  </div>\n                </td>\n              )}\n              {props.cells.map((cell, i) => (\n                <TimeCol\n                  key={cell.key}\n                  elRef={this.cellElRefs.createRef(cell.key)}\n                  dateProfile={props.dateProfile}\n                  date={cell.date}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  extraHookProps={cell.extraHookProps}\n                  extraDataAttrs={cell.extraDataAttrs}\n                  extraClassNames={cell.extraClassNames}\n                  extraDateSpan={cell.extraDateSpan}\n                  fgEventSegs={fgEventSegsByRow[i]}\n                  bgEventSegs={bgEventSegsByRow[i]}\n                  businessHourSegs={businessHourSegsByRow[i]}\n                  nowIndicatorSegs={nowIndicatorSegsByRow[i]}\n                  dateSelectionSegs={dateSelectionSegsByRow[i]}\n                  eventDrag={eventDragByRow[i]}\n                  eventResize={eventResizeByRow[i]}\n                  slatCoords={props.slatCoords}\n                  eventSelection={props.eventSelection}\n                  forPrint={props.forPrint}\n                />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (\n      props.onColCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectCellEls(this.cellElRefs.currentMap, props.cells),\n          true, // horizontal\n          false,\n        ),\n      )\n    }\n  }\n}\n\nfunction collectCellEls(elMap: { [key: string]: HTMLElement }, cells: DayTableCell[]) {\n  return cells.map((cell) => elMap[cell.key])\n}\n","import {\n  createElement, VNode,\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  DateMarker,\n  EventSegUiInteractionState,\n  memoize,\n  CssDimValue,\n  PositionCache,\n  ScrollResponder,\n  ScrollRequest,\n  DateRange,\n  Duration,\n  DateProfile,\n  DayTableCell,\n  Hit,\n  DateComponent,\n} from '@fullcalendar/common'\nimport { TimeColsSlats } from './TimeColsSlats'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsContent } from './TimeColsContent'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColsProps {\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  slotDuration: Duration\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  nowIndicatorSegs: TimeColsSeg[]\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\ninterface TimeColsState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\nexport class TimeCols extends DateComponent<TimeColsProps, TimeColsState> {\n  private processSlotOptions = memoize(processSlotOptions)\n  private scrollResponder: ScrollResponder\n  private colCoords: PositionCache\n\n  state = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state } = this\n\n    return (\n      <div\n        className=\"fc-timegrid-body\"\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <TimeColsSlats\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          slatMetas={props.slatMetas}\n          clientWidth={props.clientWidth}\n          minHeight={props.expandRows ? props.clientHeight : ''}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */}\n          onCoords={this.handleSlatCoords}\n        />\n        <TimeColsContent\n          cells={props.cells}\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          businessHourSegs={props.businessHourSegs}\n          bgEventSegs={props.bgEventSegs}\n          fgEventSegs={props.fgEventSegs}\n          dateSelectionSegs={props.dateSelectionSegs}\n          eventSelection={props.eventSelection}\n          eventDrag={props.eventDrag}\n          eventResize={props.eventResize}\n          todayRange={props.todayRange}\n          nowDate={props.nowDate}\n          nowIndicatorSegs={props.nowIndicatorSegs}\n          clientWidth={props.clientWidth}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.tableColGroupNode}\n          slatCoords={state.slatCoords}\n          onColCoords={this.handleColCoords}\n          forPrint={props.forPrint}\n        />\n      </div>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement | null) => {\n    if (el) {\n      this.context.registerInteractiveComponent(this, {\n        el,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  componentDidUpdate(prevProps: TimeColsProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleScrollRequest = (request: ScrollRequest) => {\n    let { onScrollTopRequest } = this.props\n    let { slatCoords } = this.state\n\n    if (onScrollTopRequest && slatCoords) {\n      if (request.time) {\n        let top = slatCoords.computeTimeTop(request.time)\n        top = Math.ceil(top) // zoom can give weird floating-point values. rather scroll a little bit further\n        if (top) {\n          top += 1 // to overcome top border that slots beyond the first have. looks better\n        }\n\n        onScrollTopRequest(top)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  handleColCoords = (colCoords: PositionCache | null) => {\n    this.colCoords = colCoords\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { dateEnv, options } = this.context\n    let { colCoords } = this\n    let { dateProfile } = this.props\n    let { slatCoords } = this.state\n    let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration)\n\n    let colIndex = colCoords.leftToIndex(positionLeft)\n    let slatIndex = slatCoords.positions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex]\n      let slatTop = slatCoords.positions.tops[slatIndex]\n      let slatHeight = slatCoords.positions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        dateProfile.slotMinTime,\n        multiplyDuration(snapDuration, snapIndex),\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, snapDuration)\n\n      return {\n        dateProfile,\n        dateSpan: {\n          range: { start, end },\n          allDay: false,\n          ...cell.extraDateSpan,\n        },\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight,\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n}\n\nfunction processSlotOptions(slotDuration: Duration, snapDurationOverride: Duration | null) {\n  let snapDuration = snapDurationOverride || slotDuration\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration\n    snapsPerSlot = 1\n    // TODO: say warning?\n  }\n\n  return { snapDuration, snapsPerSlot }\n}\n","import { intersectRanges, DateRange, Slicer } from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport class DayTimeColsSlicer extends Slicer<TimeColsSeg, [DateRange[]]> {\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeColsSeg[] {\n    let segs: TimeColsSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col,\n        })\n      }\n    }\n\n    return segs\n  }\n}\n","import {\n  createElement,\n  createRef,\n  VNode,\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  DateRange,\n  DayTableModel,\n  DateEnv,\n  DateMarker,\n  NowTimer,\n  CssDimValue,\n  Duration,\n} from '@fullcalendar/common'\nimport { TimeCols } from './TimeCols'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\n\nexport interface DayTimeColsProps {\n  dateProfile: DateProfile\n  dayTableModel: DayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class DayTimeCols extends DateComponent<DayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private slicer = new DayTimeColsSlicer()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateProfile, dayTableModel } = props\n\n    let isNowIndicator = context.options.nowIndicator\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv)\n\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return (\n      <NowTimer unit={isNowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            {...this.slicer.sliceProps(props, dateProfile, null, context, dayRanges)}\n            forPrint={props.forPrint}\n            axis={props.axis}\n            dateProfile={dateProfile}\n            slatMetas={props.slatMetas}\n            slotDuration={props.slotDuration}\n            cells={dayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            onSlatCoords={props.onSlatCoords}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n}\n\nexport function buildDayRanges(dayTableModel: DayTableModel, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime),\n    })\n  }\n\n  return ranges\n}\n","import {\n  createDuration,\n  asRoughMs,\n  formatIsoTimeString,\n  addDurations,\n  wholeDivideDurations,\n  Duration,\n  DateMarker,\n  DateEnv,\n} from '@fullcalendar/common'\n\nexport interface TimeSlatMeta {\n  date: DateMarker\n  time: Duration\n  key: string\n  isoTimeStr: string\n  isLabeled: boolean\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 },\n]\n\nexport function buildSlatMetas(\n  slotMinTime: Duration,\n  slotMaxTime: Duration,\n  explicitLabelInterval: Duration | null,\n  slotDuration: Duration,\n  dateEnv: DateEnv,\n) {\n  let dayStart = new Date(0)\n  let slatTime = slotMinTime\n  let slatIterator = createDuration(0)\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration)\n  let metas: TimeSlatMeta[] = []\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime)\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null\n\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(), // we can't use the isoTimeStr for uniqueness when minTime/maxTime beyone 0h/24h\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled,\n    })\n\n    slatTime = addDurations(slatTime, slotDuration)\n    slatIterator = addDurations(slatIterator, slotDuration)\n  }\n\n  return metas\n}\n\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i\n  let labelInterval\n  let slotsPerLabel\n\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i])\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval\n    }\n  }\n\n  return slotDuration // fall back\n}\n","import {\n  createElement,\n  DateProfileGenerator, DateProfile,\n  DayHeader,\n  DaySeriesModel,\n  DayTableModel,\n  memoize,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { DayTable } from '@fullcalendar/daygrid'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeCols } from './DayTimeCols'\nimport { buildSlatMetas } from './time-slat-meta'\n\nexport class DayTimeColsView extends TimeColsView {\n  private buildTimeColsModel = memoize(buildTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { options, dateEnv, dateProfileGenerator } = this.context\n    let { props } = this\n    let { dateProfile } = props\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator)\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        dates={dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        dayTableModel={dayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTimeCols\n        {...splitProps.timed}\n        dayTableModel={dayTableModel}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        forPrint={props.forPrint}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        dayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nexport function buildTimeColsModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(daySeries, false)\n}\n","export const OPTION_REFINERS = {\n  allDaySlot: Boolean,\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeColsView, buildTimeColsModel } from './DayTimeColsView'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { DayTimeCols, buildDayRanges } from './DayTimeCols'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { DayTimeCols, DayTimeColsView, TimeColsView, buildTimeColsModel, buildDayRanges, DayTimeColsSlicer, TimeColsSeg }\nexport { TimeCols } from './TimeCols'\nexport { TimeSlatMeta, buildSlatMetas } from './time-slat-meta'\nexport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\n\nexport default createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true, // indicates that slotMinTime/slotMaxTime affects rendering\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true, // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: { days: 1 },\n    },\n\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: { weeks: 1 },\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}