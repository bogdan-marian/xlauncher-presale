{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Query = exports.MaxUint64 = void 0;\n\nconst function_1 = require(\"./function\");\n\nconst balance_1 = require(\"../balance\");\n\nconst address_1 = require(\"../address\");\n\nconst utils_1 = require(\"../utils\");\n\nconst argSerializer_1 = require(\"./argSerializer\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nexports.MaxUint64 = new bignumber_js_1.default(\"18446744073709551615\");\n\nclass Query {\n  constructor(init) {\n    this.caller = new address_1.Address();\n    this.address = new address_1.Address();\n    this.func = function_1.ContractFunction.none();\n    this.args = [];\n    this.value = balance_1.Balance.Zero();\n    Object.assign(this, init);\n    utils_1.guardValueIsSet(\"address\", this.address);\n    utils_1.guardValueIsSet(\"func\", this.func);\n    this.address.assertNotEmpty();\n    this.args = this.args || [];\n    this.caller = this.caller || new address_1.Address();\n    this.value = this.value || balance_1.Balance.Zero();\n  }\n\n  toHttpRequest() {\n    let request = {\n      \"scAddress\": this.address.bech32(),\n      \"funcName\": this.func.toString(),\n      \"args\": new argSerializer_1.ArgSerializer().valuesToStrings(this.args),\n      \"value\": this.value.toString()\n    };\n\n    if (!this.caller.isEmpty()) {\n      request[\"caller\"] = this.caller.bech32();\n    }\n\n    return request;\n  }\n\n}\n\nexports.Query = Query;","map":{"version":3,"sources":["../../src/smartcontracts/query.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AAEa,OAAA,CAAA,SAAA,GAAY,IAAI,cAAA,CAAA,OAAJ,CAAc,sBAAd,CAAZ;;AAEb,MAAa,KAAb,CAAkB;EAOd,WAAA,CAAY,IAAZ,EAAiC;IAC7B,KAAK,MAAL,GAAc,IAAI,SAAA,CAAA,OAAJ,EAAd;IACA,KAAK,OAAL,GAAe,IAAI,SAAA,CAAA,OAAJ,EAAf;IACA,KAAK,IAAL,GAAY,UAAA,CAAA,gBAAA,CAAiB,IAAjB,EAAZ;IACA,KAAK,IAAL,GAAY,EAAZ;IACA,KAAK,KAAL,GAAa,SAAA,CAAA,OAAA,CAAQ,IAAR,EAAb;IAEA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,IAApB;IAEA,OAAA,CAAA,eAAA,CAAgB,SAAhB,EAA2B,KAAK,OAAhC;IACA,OAAA,CAAA,eAAA,CAAgB,MAAhB,EAAwB,KAAK,IAA7B;IAEA,KAAK,OAAL,CAAa,cAAb;IACA,KAAK,IAAL,GAAY,KAAK,IAAL,IAAa,EAAzB;IACA,KAAK,MAAL,GAAc,KAAK,MAAL,IAAe,IAAI,SAAA,CAAA,OAAJ,EAA7B;IACA,KAAK,KAAL,GAAa,KAAK,KAAL,IAAc,SAAA,CAAA,OAAA,CAAQ,IAAR,EAA3B;EACH;;EAED,aAAa,GAAA;IACT,IAAI,OAAO,GAAQ;MACf,aAAa,KAAK,OAAL,CAAa,MAAb,EADE;MAEf,YAAY,KAAK,IAAL,CAAU,QAAV,EAFG;MAGf,QAAQ,IAAI,eAAA,CAAA,aAAJ,GAAoB,eAApB,CAAoC,KAAK,IAAzC,CAHO;MAIf,SAAS,KAAK,KAAL,CAAW,QAAX;IAJM,CAAnB;;IAOA,IAAI,CAAC,KAAK,MAAL,CAAY,OAAZ,EAAL,EAA4B;MACxB,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAK,MAAL,CAAY,MAAZ,EAApB;IACH;;IAED,OAAO,OAAP;EACH;;AAtCa;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Query = exports.MaxUint64 = void 0;\nconst function_1 = require(\"./function\");\nconst balance_1 = require(\"../balance\");\nconst address_1 = require(\"../address\");\nconst utils_1 = require(\"../utils\");\nconst argSerializer_1 = require(\"./argSerializer\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nexports.MaxUint64 = new bignumber_js_1.default(\"18446744073709551615\");\nclass Query {\n    constructor(init) {\n        this.caller = new address_1.Address();\n        this.address = new address_1.Address();\n        this.func = function_1.ContractFunction.none();\n        this.args = [];\n        this.value = balance_1.Balance.Zero();\n        Object.assign(this, init);\n        utils_1.guardValueIsSet(\"address\", this.address);\n        utils_1.guardValueIsSet(\"func\", this.func);\n        this.address.assertNotEmpty();\n        this.args = this.args || [];\n        this.caller = this.caller || new address_1.Address();\n        this.value = this.value || balance_1.Balance.Zero();\n    }\n    toHttpRequest() {\n        let request = {\n            \"scAddress\": this.address.bech32(),\n            \"funcName\": this.func.toString(),\n            \"args\": new argSerializer_1.ArgSerializer().valuesToStrings(this.args),\n            \"value\": this.value.toString()\n        };\n        if (!this.caller.isEmpty()) {\n            request[\"caller\"] = this.caller.bech32();\n        }\n        return request;\n    }\n}\nexports.Query = Query;\n//# sourceMappingURL=query.js.map"]},"metadata":{},"sourceType":"script"}