{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encryptor = void 0;\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst randomness_1 = require(\"./randomness\");\n\nconst derivationParams_1 = require(\"./derivationParams\");\n\nconst constants_1 = require(\"./constants\");\n\nconst encryptedData_1 = require(\"./encryptedData\");\n\nclass Encryptor {\n  static encrypt(data, password) {\n    let randomness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new randomness_1.Randomness();\n    const kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n    const derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n    const derivedKeyFirstHalf = derivedKey.slice(0, 16);\n    const derivedKeySecondHalf = derivedKey.slice(16, 32);\n    const cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n    const ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n    const mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n    return new encryptedData_1.EncryptedData({\n      version: constants_1.Version,\n      id: randomness.id,\n      ciphertext: ciphertext.toString('hex'),\n      iv: randomness.iv.toString('hex'),\n      cipher: constants_1.CipherAlgorithm,\n      kdf: constants_1.KeyDerivationFunction,\n      kdfparams: kdParams,\n      mac: mac.toString('hex'),\n      salt: randomness.salt.toString('hex')\n    });\n  }\n\n}\n\nexports.Encryptor = Encryptor;","map":{"version":3,"sources":["../../src/crypto/encryptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAa,SAAb,CAAsB;EACC,OAAP,OAAO,CAAC,IAAD,EAAe,QAAf,EAA0E;IAAA,IAAzC,UAAyC,uEAAhB,IAAI,YAAA,CAAA,UAAJ,EAAgB;IAC7F,MAAM,QAAQ,GAAG,IAAI,kBAAA,CAAA,yBAAJ,EAAjB;IACA,MAAM,UAAU,GAAG,QAAQ,CAAC,kBAAT,CAA4B,MAAM,CAAC,IAAP,CAAY,QAAZ,CAA5B,EAAmD,UAAU,CAAC,IAA9D,CAAnB;IACA,MAAM,mBAAmB,GAAG,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAA5B;IACA,MAAM,oBAAoB,GAAG,UAAU,CAAC,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAA7B;IACA,MAAM,MAAM,GAAG,QAAA,CAAA,OAAA,CAAO,cAAP,CAAsB,WAAA,CAAA,eAAtB,EAAuC,mBAAvC,EAA4D,UAAU,CAAC,EAAvE,CAAf;IAEA,MAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,MAAP,CAAc,IAAd,CAAD,EAAsB,MAAM,CAAC,KAAP,EAAtB,CAAd,CAAnB;IACA,MAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CAAO,UAAP,CAAkB,WAAA,CAAA,eAAlB,EAAmC,oBAAnC,EAAyD,MAAzD,CAAgE,UAAhE,EAA4E,MAA5E,EAAZ;IAEA,OAAO,IAAI,eAAA,CAAA,aAAJ,CAAkB;MACvB,OAAO,EAAE,WAAA,CAAA,OADc;MAEvB,EAAE,EAAE,UAAU,CAAC,EAFQ;MAGvB,UAAU,EAAE,UAAU,CAAC,QAAX,CAAoB,KAApB,CAHW;MAIvB,EAAE,EAAE,UAAU,CAAC,EAAX,CAAc,QAAd,CAAuB,KAAvB,CAJmB;MAKvB,MAAM,EAAE,WAAA,CAAA,eALe;MAMvB,GAAG,EAAE,WAAA,CAAA,qBANkB;MAOvB,SAAS,EAAE,QAPY;MAQvB,GAAG,EAAE,GAAG,CAAC,QAAJ,CAAa,KAAb,CARkB;MASvB,IAAI,EAAE,UAAU,CAAC,IAAX,CAAgB,QAAhB,CAAyB,KAAzB;IATiB,CAAlB,CAAP;EAWD;;AAtBmB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encryptor = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst randomness_1 = require(\"./randomness\");\nconst derivationParams_1 = require(\"./derivationParams\");\nconst constants_1 = require(\"./constants\");\nconst encryptedData_1 = require(\"./encryptedData\");\nclass Encryptor {\n    static encrypt(data, password, randomness = new randomness_1.Randomness()) {\n        const kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n        const derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n        const derivedKeyFirstHalf = derivedKey.slice(0, 16);\n        const derivedKeySecondHalf = derivedKey.slice(16, 32);\n        const cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n        const ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n        const mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n        return new encryptedData_1.EncryptedData({\n            version: constants_1.Version,\n            id: randomness.id,\n            ciphertext: ciphertext.toString('hex'),\n            iv: randomness.iv.toString('hex'),\n            cipher: constants_1.CipherAlgorithm,\n            kdf: constants_1.KeyDerivationFunction,\n            kdfparams: kdParams,\n            mac: mac.toString('hex'),\n            salt: randomness.salt.toString('hex')\n        });\n    }\n}\nexports.Encryptor = Encryptor;\n//# sourceMappingURL=encryptor.js.map"]},"metadata":{},"sourceType":"script"}