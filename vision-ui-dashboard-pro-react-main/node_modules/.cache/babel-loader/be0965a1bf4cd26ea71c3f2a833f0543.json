{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionPayload = void 0;\n\nvar transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\n/**\n * The \"data\" field of a {@link Transaction}, as an immutable object.\n */\n\n\nvar TransactionPayload = /*#__PURE__*/function () {\n  /**\n   * Creates a TransactionPayload from a utf-8 string or from a buffer.\n   */\n  function TransactionPayload(data) {\n    _classCallCheck(this, TransactionPayload);\n\n    this.data = Buffer.from(data || []);\n  }\n  /**\n   * Creates a TransactionPayload from a base-64 encoded string.\n   */\n\n\n  _createClass(TransactionPayload, [{\n    key: \"isEmpty\",\n    value:\n    /**\n     * Returns whether the \"data\" is void.\n     */\n    function isEmpty() {\n      return this.data.length == 0;\n    }\n    /**\n     * Returns the base-64 representation of the data.\n     */\n\n  }, {\n    key: \"encoded\",\n    value: function encoded() {\n      return this.data.toString(\"base64\");\n    }\n    /**\n     * Returns the data as a buffer.\n     */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.data;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.data.toString();\n    }\n  }, {\n    key: \"getEncodedArguments\",\n    value: function getEncodedArguments() {\n      return this.toString().split(\"@\");\n    }\n  }, {\n    key: \"getRawArguments\",\n    value: function getRawArguments() {\n      return this.getEncodedArguments().map(function (argument) {\n        return Buffer.from(argument, \"hex\");\n      });\n    }\n    /**\n     * Returns the length of the data.\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Buffer.from(this.data).length;\n    }\n    /**\n     * Returns a new builder, to be used for contract deploy transactions.\n     */\n\n  }], [{\n    key: \"fromEncoded\",\n    value: function fromEncoded(encoded) {\n      if (!encoded) {\n        return new TransactionPayload(\"\");\n      }\n\n      var decoded = Buffer.from(encoded, \"base64\").toString();\n      return new TransactionPayload(decoded);\n    }\n  }, {\n    key: \"contractDeploy\",\n    value: function contractDeploy() {\n      return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\n    }\n    /**\n     * Returns a new builder, to be used for contract upgrade transactions.\n     */\n\n  }, {\n    key: \"contractUpgrade\",\n    value: function contractUpgrade() {\n      return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\n    }\n    /**\n     * Returns a new builder, to be used for contract call transactions.\n     */\n\n  }, {\n    key: \"contractCall\",\n    value: function contractCall() {\n      return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\n    }\n  }]);\n\n  return TransactionPayload;\n}();\n\nexports.TransactionPayload = TransactionPayload;","map":{"version":3,"sources":["../src/transactionPayload.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,4BAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;AAEA;;AAEG;;;IACU,kB;EAGT;;AAEG;EACH,4BAAY,IAAZ,EAAkC;IAAA;;IAC9B,KAAK,IAAL,GAAY,MAAM,CAAC,IAAP,CAAY,IAAI,IAAI,EAApB,CAAZ;EACH;EAED;;AAEG;;;;;;IAUH;;AAEG;IACH,mBAAO;MACH,OAAO,KAAK,IAAL,CAAU,MAAV,IAAoB,CAA3B;IACH;IAED;;AAEG;;;;WACH,mBAAO;MACH,OAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,QAAnB,CAAP;IACH;IAED;;AAEG;;;;WACH,mBAAO;MACH,OAAO,KAAK,IAAZ;IACH;;;WAED,oBAAQ;MACJ,OAAO,KAAK,IAAL,CAAU,QAAV,EAAP;IACH;;;WAED,+BAAmB;MACf,OAAO,KAAK,QAAL,GAAgB,KAAhB,CAAsB,GAAtB,CAAP;IACH;;;WAED,2BAAe;MACX,OAAO,KAAK,mBAAL,GAA2B,GAA3B,CAA+B,UAAA,QAAQ;QAAA,OAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,KAAtB,CAAJ;MAAA,CAAvC,CAAP;IACH;IAED;;AAEG;;;;WACH,kBAAM;MACF,OAAO,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,EAAuB,MAA9B;IACH;IAED;;AAEG;;;;WAnDH,qBAAmB,OAAnB,EAAmC;MAC/B,IAAI,CAAC,OAAL,EAAc;QACV,OAAO,IAAI,kBAAJ,CAAuB,EAAvB,CAAP;MACH;;MAED,IAAI,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,EAA+B,QAA/B,EAAd;MACA,OAAO,IAAI,kBAAJ,CAAuB,OAAvB,CAAP;IACH;;;WA6CD,0BAAqB;MACjB,OAAO,IAAI,4BAAA,CAAA,4BAAJ,EAAP;IACH;IAED;;AAEG;;;;WACH,2BAAsB;MAClB,OAAO,IAAI,4BAAA,CAAA,6BAAJ,EAAP;IACH;IAED;;AAEG;;;;WACH,wBAAmB;MACf,OAAO,IAAI,4BAAA,CAAA,0BAAJ,EAAP;IACH;;;;;;AAjFL,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionPayload = void 0;\nconst transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\n/**\n * The \"data\" field of a {@link Transaction}, as an immutable object.\n */\nclass TransactionPayload {\n    /**\n     * Creates a TransactionPayload from a utf-8 string or from a buffer.\n     */\n    constructor(data) {\n        this.data = Buffer.from(data || []);\n    }\n    /**\n     * Creates a TransactionPayload from a base-64 encoded string.\n     */\n    static fromEncoded(encoded) {\n        if (!encoded) {\n            return new TransactionPayload(\"\");\n        }\n        let decoded = Buffer.from(encoded, \"base64\").toString();\n        return new TransactionPayload(decoded);\n    }\n    /**\n     * Returns whether the \"data\" is void.\n     */\n    isEmpty() {\n        return this.data.length == 0;\n    }\n    /**\n     * Returns the base-64 representation of the data.\n     */\n    encoded() {\n        return this.data.toString(\"base64\");\n    }\n    /**\n     * Returns the data as a buffer.\n     */\n    valueOf() {\n        return this.data;\n    }\n    toString() {\n        return this.data.toString();\n    }\n    getEncodedArguments() {\n        return this.toString().split(\"@\");\n    }\n    getRawArguments() {\n        return this.getEncodedArguments().map(argument => Buffer.from(argument, \"hex\"));\n    }\n    /**\n     * Returns the length of the data.\n     */\n    length() {\n        return Buffer.from(this.data).length;\n    }\n    /**\n     * Returns a new builder, to be used for contract deploy transactions.\n     */\n    static contractDeploy() {\n        return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\n    }\n    /**\n     * Returns a new builder, to be used for contract upgrade transactions.\n     */\n    static contractUpgrade() {\n        return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\n    }\n    /**\n     * Returns a new builder, to be used for contract call transactions.\n     */\n    static contractCall() {\n        return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\n    }\n}\nexports.TransactionPayload = TransactionPayload;\n//# sourceMappingURL=transactionPayload.js.map"]},"metadata":{},"sourceType":"script"}