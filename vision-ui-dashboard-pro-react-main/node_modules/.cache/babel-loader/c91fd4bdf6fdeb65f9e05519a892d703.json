{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from \"react\";\nimport { Tag } from \"./components/Tag\";\nimport { classSelectors } from \"./utils/selectors\";\n\nvar ReactTagInput = function (_super) {\n  __extends(ReactTagInput, _super);\n\n  function ReactTagInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      input: \"\"\n    };\n    _this.inputRef = React.createRef();\n\n    _this.onInputChange = function (e) {\n      _this.setState({\n        input: e.target.value\n      });\n    };\n\n    _this.onInputKeyDown = function (e) {\n      var input = _this.state.input;\n      var _a = _this.props,\n          validator = _a.validator,\n          removeOnBackspace = _a.removeOnBackspace;\n\n      if (e.keyCode === 13) {\n        e.preventDefault();\n\n        if (input === \"\") {\n          return;\n        }\n\n        var valid = validator !== undefined ? validator(input) : true;\n\n        if (!valid) {\n          return;\n        }\n\n        _this.addTag(input);\n      } else if (removeOnBackspace && (e.keyCode === 8 || e.keyCode === 46)) {\n        if (input !== \"\") {\n          return;\n        }\n\n        _this.removeTag(_this.props.tags.length - 1);\n      }\n    };\n\n    _this.addTag = function (value) {\n      var tags = _this.props.tags.slice();\n\n      tags.push(value);\n\n      _this.props.onChange(tags);\n\n      _this.setState({\n        input: \"\"\n      });\n    };\n\n    _this.removeTag = function (i) {\n      var tags = _this.props.tags.slice();\n\n      tags.splice(i, 1);\n\n      _this.props.onChange(tags);\n    };\n\n    _this.updateTag = function (i, value) {\n      var tags = _this.props.tags.slice();\n\n      tags[i] = value;\n\n      _this.props.onChange(tags);\n    };\n\n    return _this;\n  }\n\n  ReactTagInput.prototype.render = function () {\n    var _this = this;\n\n    var input = this.state.input;\n    var _a = this.props,\n        tags = _a.tags,\n        placeholder = _a.placeholder,\n        maxTags = _a.maxTags,\n        editable = _a.editable,\n        readOnly = _a.readOnly,\n        validator = _a.validator,\n        removeOnBackspace = _a.removeOnBackspace;\n    var maxTagsReached = maxTags !== undefined ? tags.length >= maxTags : false;\n    var isEditable = readOnly ? false : editable || false;\n    var showInput = !readOnly && !maxTagsReached;\n    return React.createElement(\"div\", {\n      className: classSelectors.wrapper\n    }, tags.map(function (tag, i) {\n      return React.createElement(Tag, {\n        key: i,\n        value: tag,\n        index: i,\n        editable: isEditable,\n        readOnly: readOnly || false,\n        inputRef: _this.inputRef,\n        update: _this.updateTag,\n        remove: _this.removeTag,\n        validator: validator,\n        removeOnBackspace: removeOnBackspace\n      });\n    }), showInput && React.createElement(\"input\", {\n      ref: this.inputRef,\n      value: input,\n      className: classSelectors.input,\n      placeholder: placeholder || \"Type and press enter\",\n      onChange: this.onInputChange,\n      onKeyDown: this.onInputKeyDown\n    }));\n  };\n\n  return ReactTagInput;\n}(React.Component);\n\nexport default ReactTagInput;","map":{"version":3,"sources":["../../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Tag} from \"./components/Tag\";\nimport {classSelectors} from \"./utils/selectors\";\n\ntype Tags = string[];\n\nexport interface ReactTagInputProps {\n  tags: Tags;\n  onChange: (tags: Tags) => void;\n  placeholder?: string;\n  maxTags?: number;\n  validator?: (val: string) => boolean;\n  editable?: boolean;\n  readOnly?: boolean;\n  removeOnBackspace?: boolean;\n}\n\ninterface State {\n  input: string;\n}\n\nexport default class ReactTagInput extends React.Component<ReactTagInputProps, State> {\n\n  state = { input: \"\" };\n\n  // Ref for input element\n  inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ input: e.target.value });\n  }\n\n  onInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\n    const { input } = this.state;\n    const { validator, removeOnBackspace } = this.props;\n\n    // On enter\n    if (e.keyCode === 13) {\n\n      // Prevent form submission if tag input is nested in <form>\n      e.preventDefault();\n\n      // If input is blank, do nothing\n      if (input === \"\") { return; }\n\n      // Check if input is valid\n      const valid = validator !== undefined ? validator(input) : true;\n      if (!valid) {\n        return;\n      }\n\n      // Add input to tag list\n      this.addTag(input);\n\n    }\n    // On backspace or delete\n    else if (removeOnBackspace && (e.keyCode === 8 || e.keyCode === 46)) {\n\n      // If currently typing, do nothing\n      if (input !== \"\") {\n        return;\n      }\n\n      // If input is blank, remove previous tag\n      this.removeTag(this.props.tags.length - 1);\n\n    }\n\n  }\n\n  addTag = (value: string) => {\n    const tags = [ ...this.props.tags ];\n    tags.push(value);\n    this.props.onChange(tags);\n    this.setState({ input: \"\" });\n  }\n\n  removeTag = (i: number) => {\n    const tags = [ ...this.props.tags ];\n    tags.splice(i, 1);\n    this.props.onChange(tags);\n  }\n\n  updateTag = (i: number, value: string) => {\n    const tags = [...this.props.tags];\n    tags[i] = value;\n    this.props.onChange(tags);\n  }\n\n  render() {\n\n    const { input } = this.state;\n\n    const { tags, placeholder, maxTags, editable, readOnly, validator, removeOnBackspace } = this.props;\n\n    const maxTagsReached = maxTags !== undefined ? tags.length >= maxTags : false;\n\n    const isEditable = readOnly ? false : (editable || false);\n\n    const showInput = !readOnly && !maxTagsReached;\n\n    return (\n      <div className={classSelectors.wrapper}>\n        {tags.map((tag, i) => (\n          <Tag\n            key={i}\n            value={tag}\n            index={i}\n            editable={isEditable}\n            readOnly={readOnly || false}\n            inputRef={this.inputRef}\n            update={this.updateTag}\n            remove={this.removeTag}\n            validator={validator}\n            removeOnBackspace={removeOnBackspace}\n          />\n        ))}\n        {showInput &&\n          <input\n            ref={this.inputRef}\n            value={input}\n            className={classSelectors.input}\n            placeholder={placeholder || \"Type and press enter\"}\n            onChange={this.onInputChange}\n            onKeyDown={this.onInputKeyDown}\n          />\n        }\n      </div>\n    );\n\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}