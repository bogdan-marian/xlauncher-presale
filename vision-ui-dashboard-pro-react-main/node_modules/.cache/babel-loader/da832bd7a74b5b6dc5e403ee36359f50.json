{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypedEvent = void 0;\n/**\n * An event (a \"Subject\" in the context of the Observer pattern).\n * One or more {@link Listener} objects can register to this.\n *\n * Based on: https://basarat.gitbook.io/typescript/main-1/typed-event\n */\n\nclass TypedEvent {\n  constructor() {\n    this.listeners = [];\n    this.listenersOnce = [];\n  }\n  /**\n   * Registers a listener to this event.\n   */\n\n\n  on(listener) {\n    this.listeners.push(listener);\n    return {\n      dispose: () => this.off(listener)\n    };\n  }\n  /**\n   * Registers a one-time listener to this event.\n   */\n\n\n  once(listener) {\n    this.listenersOnce.push(listener);\n  }\n  /**\n   * Unregisters a listener from this event.\n   */\n\n\n  off(listener) {\n    var callbackIndex = this.listeners.indexOf(listener);\n\n    if (callbackIndex > -1) {\n      this.listeners.splice(callbackIndex, 1);\n    }\n  }\n  /**\n   * Emits an event (with a payload).\n   */\n\n\n  emit(event) {\n    // Notify all listeners\n    this.listeners.forEach(listener => listener(event)); // Notify (then clear) \"once\" listeners\n\n    this.listenersOnce.forEach(listener => listener(event));\n    this.listenersOnce = [];\n  }\n\n}\n\nexports.TypedEvent = TypedEvent;","map":{"version":3,"sources":["../src/events.ts"],"names":[],"mappings":";;;;;;AASA;;;;;AAKG;;AACH,MAAa,UAAb,CAAuB;EAAvB,WAAA,GAAA;IACY,KAAA,SAAA,GAA2B,EAA3B;IACA,KAAA,aAAA,GAA+B,EAA/B;EAwCX;EAtCG;;AAEG;;;EACH,EAAE,CAAC,QAAD,EAAsB;IACpB,KAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;IACA,OAAO;MACH,OAAO,EAAE,MAAM,KAAK,GAAL,CAAS,QAAT;IADZ,CAAP;EAGH;EAED;;AAEG;;;EACH,IAAI,CAAC,QAAD,EAAsB;IACtB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;EACH;EAED;;AAEG;;;EACH,GAAG,CAAC,QAAD,EAAsB;IACrB,IAAI,aAAa,GAAG,KAAK,SAAL,CAAe,OAAf,CAAuB,QAAvB,CAApB;;IACA,IAAI,aAAa,GAAG,CAAC,CAArB,EAAwB;MACpB,KAAK,SAAL,CAAe,MAAf,CAAsB,aAAtB,EAAqC,CAArC;IACH;EACJ;EAED;;AAEG;;;EACH,IAAI,CAAC,KAAD,EAAS;IACT;IACA,KAAK,SAAL,CAAe,OAAf,CAAwB,QAAD,IAAc,QAAQ,CAAC,KAAD,CAA7C,EAFS,CAIT;;IACA,KAAK,aAAL,CAAmB,OAAnB,CAA4B,QAAD,IAAc,QAAQ,CAAC,KAAD,CAAjD;IACA,KAAK,aAAL,GAAqB,EAArB;EACH;;AAzCkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypedEvent = void 0;\n/**\n * An event (a \"Subject\" in the context of the Observer pattern).\n * One or more {@link Listener} objects can register to this.\n *\n * Based on: https://basarat.gitbook.io/typescript/main-1/typed-event\n */\nclass TypedEvent {\n    constructor() {\n        this.listeners = [];\n        this.listenersOnce = [];\n    }\n    /**\n     * Registers a listener to this event.\n     */\n    on(listener) {\n        this.listeners.push(listener);\n        return {\n            dispose: () => this.off(listener)\n        };\n    }\n    /**\n     * Registers a one-time listener to this event.\n     */\n    once(listener) {\n        this.listenersOnce.push(listener);\n    }\n    /**\n     * Unregisters a listener from this event.\n     */\n    off(listener) {\n        var callbackIndex = this.listeners.indexOf(listener);\n        if (callbackIndex > -1) {\n            this.listeners.splice(callbackIndex, 1);\n        }\n    }\n    /**\n     * Emits an event (with a payload).\n     */\n    emit(event) {\n        // Notify all listeners\n        this.listeners.forEach((listener) => listener(event));\n        // Notify (then clear) \"once\" listeners\n        this.listenersOnce.forEach((listener) => listener(event));\n        this.listenersOnce = [];\n    }\n}\nexports.TypedEvent = TypedEvent;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"script"}