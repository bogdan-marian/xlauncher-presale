{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Receipt = exports.TransactionOnNetworkType = exports.TransactionOnNetwork = void 0;\n\nvar address_1 = require(\"./address\");\n\nvar balance_1 = require(\"./balance\");\n\nvar networkParams_1 = require(\"./networkParams\");\n\nvar nonce_1 = require(\"./nonce\");\n\nvar signature_1 = require(\"./signature\");\n\nvar transactionPayload_1 = require(\"./transactionPayload\");\n\nvar hash_1 = require(\"./hash\");\n\nvar transaction_1 = require(\"./transaction\");\n\nvar smartContractResults_1 = require(\"./smartcontracts/smartContractResults\");\n\nvar transactionLogs_1 = require(\"./transactionLogs\");\n/**\n * A plain view of a transaction, as queried from the Network.\n */\n\n\nvar TransactionOnNetwork = /*#__PURE__*/function () {\n  function TransactionOnNetwork(init) {\n    _classCallCheck(this, TransactionOnNetwork);\n\n    this.hash = new transaction_1.TransactionHash(\"\");\n    this.type = new TransactionOnNetworkType();\n    this.nonce = new nonce_1.Nonce(0);\n    this.round = 0;\n    this.epoch = 0;\n    this.value = balance_1.Balance.Zero();\n    this.receiver = new address_1.Address();\n    this.sender = new address_1.Address();\n    this.gasPrice = new networkParams_1.GasPrice(0);\n    this.gasLimit = new networkParams_1.GasLimit(0);\n    this.data = new transactionPayload_1.TransactionPayload();\n    this.signature = signature_1.Signature.empty();\n    this.status = transaction_1.TransactionStatus.createUnknown();\n    this.timestamp = 0;\n    this.blockNonce = new nonce_1.Nonce(0);\n    this.hyperblockNonce = new nonce_1.Nonce(0);\n    this.hyperblockHash = hash_1.Hash.empty();\n    this.receipt = new Receipt();\n    this.results = smartContractResults_1.SmartContractResults.empty();\n    this.logs = transactionLogs_1.TransactionLogs.empty();\n    Object.assign(this, init);\n  }\n\n  _createClass(TransactionOnNetwork, [{\n    key: \"getDateTime\",\n    value: function getDateTime() {\n      return new Date(this.timestamp * 1000);\n    }\n  }, {\n    key: \"getReceipt\",\n    value: function getReceipt() {\n      return this.receipt;\n    }\n  }, {\n    key: \"getSmartContractResults\",\n    value: function getSmartContractResults() {\n      return this.results;\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs() {\n      return this.logs;\n    }\n  }], [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(txHash, response) {\n      var transactionOnNetwork = new TransactionOnNetwork();\n      transactionOnNetwork.hash = txHash;\n      transactionOnNetwork.type = new TransactionOnNetworkType(response.type || \"\");\n      transactionOnNetwork.nonce = new nonce_1.Nonce(response.nonce || 0);\n      transactionOnNetwork.round = response.round;\n      transactionOnNetwork.epoch = response.epoch || 0;\n      transactionOnNetwork.value = balance_1.Balance.fromString(response.value);\n      transactionOnNetwork.sender = address_1.Address.fromBech32(response.sender);\n      transactionOnNetwork.receiver = address_1.Address.fromBech32(response.receiver);\n      transactionOnNetwork.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n      transactionOnNetwork.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n      transactionOnNetwork.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);\n      transactionOnNetwork.status = new transaction_1.TransactionStatus(response.status);\n      transactionOnNetwork.timestamp = response.timestamp || 0;\n      transactionOnNetwork.blockNonce = new nonce_1.Nonce(response.blockNonce || 0);\n      transactionOnNetwork.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);\n      transactionOnNetwork.hyperblockHash = new hash_1.Hash(response.hyperblockHash);\n      transactionOnNetwork.receipt = Receipt.fromHttpResponse(response.receipt || {});\n      transactionOnNetwork.results = smartContractResults_1.SmartContractResults.fromHttpResponse(response.results || response.smartContractResults || []);\n      transactionOnNetwork.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n      return transactionOnNetwork;\n    }\n  }]);\n\n  return TransactionOnNetwork;\n}();\n\nexports.TransactionOnNetwork = TransactionOnNetwork;\n/**\n * Not yet implemented.\n */\n\nvar TransactionOnNetworkType = /*#__PURE__*/_createClass(function TransactionOnNetworkType(value) {\n  _classCallCheck(this, TransactionOnNetworkType);\n\n  this.value = value || \"unknown\";\n});\n\nexports.TransactionOnNetworkType = TransactionOnNetworkType;\n\nvar Receipt = /*#__PURE__*/function () {\n  function Receipt() {\n    _classCallCheck(this, Receipt);\n\n    this.value = balance_1.Balance.Zero();\n    this.sender = new address_1.Address();\n    this.message = \"\";\n    this.hash = transaction_1.TransactionHash.empty();\n  }\n\n  _createClass(Receipt, null, [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(response) {\n      var receipt = new Receipt();\n      receipt.value = balance_1.Balance.fromString(response.value);\n      receipt.sender = new address_1.Address(response.sender);\n      receipt.message = response.data;\n      receipt.hash = new transaction_1.TransactionHash(response.txHash);\n      return receipt;\n    }\n  }]);\n\n  return Receipt;\n}();\n\nexports.Receipt = Receipt;","map":{"version":3,"sources":["../src/transactionOnNetwork.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Receipt = exports.TransactionOnNetworkType = exports.TransactionOnNetwork = void 0;\nconst address_1 = require(\"./address\");\nconst balance_1 = require(\"./balance\");\nconst networkParams_1 = require(\"./networkParams\");\nconst nonce_1 = require(\"./nonce\");\nconst signature_1 = require(\"./signature\");\nconst transactionPayload_1 = require(\"./transactionPayload\");\nconst hash_1 = require(\"./hash\");\nconst transaction_1 = require(\"./transaction\");\nconst smartContractResults_1 = require(\"./smartcontracts/smartContractResults\");\nconst transactionLogs_1 = require(\"./transactionLogs\");\n/**\n * A plain view of a transaction, as queried from the Network.\n */\nclass TransactionOnNetwork {\n    constructor(init) {\n        this.hash = new transaction_1.TransactionHash(\"\");\n        this.type = new TransactionOnNetworkType();\n        this.nonce = new nonce_1.Nonce(0);\n        this.round = 0;\n        this.epoch = 0;\n        this.value = balance_1.Balance.Zero();\n        this.receiver = new address_1.Address();\n        this.sender = new address_1.Address();\n        this.gasPrice = new networkParams_1.GasPrice(0);\n        this.gasLimit = new networkParams_1.GasLimit(0);\n        this.data = new transactionPayload_1.TransactionPayload();\n        this.signature = signature_1.Signature.empty();\n        this.status = transaction_1.TransactionStatus.createUnknown();\n        this.timestamp = 0;\n        this.blockNonce = new nonce_1.Nonce(0);\n        this.hyperblockNonce = new nonce_1.Nonce(0);\n        this.hyperblockHash = hash_1.Hash.empty();\n        this.receipt = new Receipt();\n        this.results = smartContractResults_1.SmartContractResults.empty();\n        this.logs = transactionLogs_1.TransactionLogs.empty();\n        Object.assign(this, init);\n    }\n    static fromHttpResponse(txHash, response) {\n        let transactionOnNetwork = new TransactionOnNetwork();\n        transactionOnNetwork.hash = txHash;\n        transactionOnNetwork.type = new TransactionOnNetworkType(response.type || \"\");\n        transactionOnNetwork.nonce = new nonce_1.Nonce(response.nonce || 0);\n        transactionOnNetwork.round = response.round;\n        transactionOnNetwork.epoch = response.epoch || 0;\n        transactionOnNetwork.value = balance_1.Balance.fromString(response.value);\n        transactionOnNetwork.sender = address_1.Address.fromBech32(response.sender);\n        transactionOnNetwork.receiver = address_1.Address.fromBech32(response.receiver);\n        transactionOnNetwork.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n        transactionOnNetwork.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n        transactionOnNetwork.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);\n        transactionOnNetwork.status = new transaction_1.TransactionStatus(response.status);\n        transactionOnNetwork.timestamp = response.timestamp || 0;\n        transactionOnNetwork.blockNonce = new nonce_1.Nonce(response.blockNonce || 0);\n        transactionOnNetwork.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);\n        transactionOnNetwork.hyperblockHash = new hash_1.Hash(response.hyperblockHash);\n        transactionOnNetwork.receipt = Receipt.fromHttpResponse(response.receipt || {});\n        transactionOnNetwork.results = smartContractResults_1.SmartContractResults.fromHttpResponse(response.results || response.smartContractResults || []);\n        transactionOnNetwork.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n        return transactionOnNetwork;\n    }\n    getDateTime() {\n        return new Date(this.timestamp * 1000);\n    }\n    getReceipt() {\n        return this.receipt;\n    }\n    getSmartContractResults() {\n        return this.results;\n    }\n    getLogs() {\n        return this.logs;\n    }\n}\nexports.TransactionOnNetwork = TransactionOnNetwork;\n/**\n * Not yet implemented.\n */\nclass TransactionOnNetworkType {\n    constructor(value) {\n        this.value = value || \"unknown\";\n    }\n}\nexports.TransactionOnNetworkType = TransactionOnNetworkType;\nclass Receipt {\n    constructor() {\n        this.value = balance_1.Balance.Zero();\n        this.sender = new address_1.Address();\n        this.message = \"\";\n        this.hash = transaction_1.TransactionHash.empty();\n    }\n    static fromHttpResponse(response) {\n        let receipt = new Receipt();\n        receipt.value = balance_1.Balance.fromString(response.value);\n        receipt.sender = new address_1.Address(response.sender);\n        receipt.message = response.data;\n        receipt.hash = new transaction_1.TransactionHash(response.txHash);\n        return receipt;\n    }\n}\nexports.Receipt = Receipt;\n//# sourceMappingURL=transactionOnNetwork.js.map"]},"metadata":{},"sourceType":"script"}