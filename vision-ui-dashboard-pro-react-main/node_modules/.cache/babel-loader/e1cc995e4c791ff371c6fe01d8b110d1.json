{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nconst fields_1 = require(\"./fields\");\n\nclass EnumBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n\n  decodeTopLevel(buffer, type) {\n    // This handles enums without fields, with discriminant = 0, as well.\n    let [enumValue] = this.decodeNested(buffer, type);\n    return enumValue;\n  }\n\n  decodeNested(buffer, type) {\n    let [discriminant, lengthOfDiscriminant] = this.readDiscriminant(buffer);\n    buffer = buffer.slice(lengthOfDiscriminant);\n    let variant = type.getVariantByDiscriminant(discriminant);\n    let fieldDefinitions = variant.getFieldsDefinitions();\n    let [fields, lengthOfFields] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);\n    let enumValue = new typesystem_1.EnumValue(type, variant, fields);\n    return [enumValue, lengthOfDiscriminant + lengthOfFields];\n  }\n\n  readDiscriminant(buffer) {\n    let [value, length] = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type());\n    let discriminant = value.valueOf();\n    return [discriminant, length];\n  }\n\n  encodeNested(enumValue) {\n    let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n    let discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n    let fields = enumValue.getFields();\n    let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n    return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n  }\n\n  encodeTopLevel(enumValue) {\n    let fields = enumValue.getFields();\n    let hasFields = fields.length > 0;\n    let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n    let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n    let discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n    return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n  }\n\n}\n\nexports.EnumBinaryCodec = EnumBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/enum.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAa,eAAb,CAA4B;EAIxB,WAAA,CAAY,WAAZ,EAAoC;IAChC,KAAK,WAAL,GAAmB,WAAnB;IACA,KAAK,WAAL,GAAmB,IAAI,QAAA,CAAA,iBAAJ,CAAsB,WAAtB,CAAnB;EACH;;EAED,cAAc,CAAC,MAAD,EAAiB,IAAjB,EAA+B;IACzC;IACA,IAAI,CAAC,SAAD,IAAc,KAAK,YAAL,CAAkB,MAAlB,EAA0B,IAA1B,CAAlB;IACA,OAAO,SAAP;EACH;;EAED,YAAY,CAAC,MAAD,EAAiB,IAAjB,EAA+B;IACvC,IAAI,CAAC,YAAD,EAAe,oBAAf,IAAuC,KAAK,gBAAL,CAAsB,MAAtB,CAA3C;IACA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,oBAAb,CAAT;IAEA,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAL,CAA8B,YAA9B,CAAd;IACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,oBAAR,EAAvB;IAEA,IAAI,CAAC,MAAD,EAAS,cAAT,IAA8C,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,gBAAtC,CAAlD;IACA,IAAI,SAAS,GAAG,IAAI,YAAA,CAAA,SAAJ,CAAc,IAAd,EAAoB,OAApB,EAA6B,MAA7B,CAAhB;IAEA,OAAO,CAAC,SAAD,EAAY,oBAAoB,GAAG,cAAnC,CAAP;EACH;;EAEO,gBAAgB,CAAC,MAAD,EAAe;IACnC,IAAI,CAAC,KAAD,EAAQ,MAAR,IAAkB,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,IAAI,YAAA,CAAA,MAAJ,EAAtC,CAAtB;IACA,IAAI,YAAY,GAAG,KAAK,CAAC,OAAN,EAAnB;IAEA,OAAO,CAAC,YAAD,EAAe,MAAf,CAAP;EACH;;EAED,YAAY,CAAC,SAAD,EAAqB;IAC7B,IAAI,YAAY,GAAG,IAAI,YAAA,CAAA,OAAJ,CAAY,SAAS,CAAC,YAAtB,CAAnB;IACA,IAAI,kBAAkB,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,YAA9B,CAAzB;IAEA,IAAI,MAAM,GAAG,SAAS,CAAC,SAAV,EAAb;IACA,IAAI,YAAY,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,CAAnB;IAEA,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,kBAAD,EAAqB,YAArB,CAAd,CAAP;EACH;;EAED,cAAc,CAAC,SAAD,EAAqB;IAC/B,IAAI,MAAM,GAAG,SAAS,CAAC,SAAV,EAAb;IACA,IAAI,SAAS,GAAG,MAAM,CAAC,MAAP,GAAgB,CAAhC;IACA,IAAI,YAAY,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,CAAnB;IAEA,IAAI,YAAY,GAAG,IAAI,YAAA,CAAA,OAAJ,CAAY,SAAS,CAAC,YAAtB,CAAnB;IACA,IAAI,kBAAkB,GAAG,SAAS,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,YAA9B,CAAH,GAAiD,KAAK,WAAL,CAAiB,cAAjB,CAAgC,YAAhC,CAAnF;IAEA,OAAO,MAAM,CAAC,MAAP,CAAc,CAAC,kBAAD,EAAqB,YAArB,CAAd,CAAP;EACH;;AAtDuB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnumBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nconst fields_1 = require(\"./fields\");\nclass EnumBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n        this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n    }\n    decodeTopLevel(buffer, type) {\n        // This handles enums without fields, with discriminant = 0, as well.\n        let [enumValue] = this.decodeNested(buffer, type);\n        return enumValue;\n    }\n    decodeNested(buffer, type) {\n        let [discriminant, lengthOfDiscriminant] = this.readDiscriminant(buffer);\n        buffer = buffer.slice(lengthOfDiscriminant);\n        let variant = type.getVariantByDiscriminant(discriminant);\n        let fieldDefinitions = variant.getFieldsDefinitions();\n        let [fields, lengthOfFields] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);\n        let enumValue = new typesystem_1.EnumValue(type, variant, fields);\n        return [enumValue, lengthOfDiscriminant + lengthOfFields];\n    }\n    readDiscriminant(buffer) {\n        let [value, length] = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type());\n        let discriminant = value.valueOf();\n        return [discriminant, length];\n    }\n    encodeNested(enumValue) {\n        let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n        let discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n        let fields = enumValue.getFields();\n        let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n        return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n    encodeTopLevel(enumValue) {\n        let fields = enumValue.getFields();\n        let hasFields = fields.length > 0;\n        let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n        let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n        let discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n        return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n}\nexports.EnumBinaryCodec = EnumBinaryCodec;\n//# sourceMappingURL=enum.js.map"]},"metadata":{},"sourceType":"script"}