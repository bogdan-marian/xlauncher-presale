{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BytesBinaryCodec = void 0;\n\nvar bytes_1 = require(\"../typesystem/bytes\");\n\nvar constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"BytesValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nvar BytesBinaryCodec = /*#__PURE__*/function () {\n  function BytesBinaryCodec() {\n    _classCallCheck(this, BytesBinaryCodec);\n  }\n\n  _createClass(BytesBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer) {\n      var length = buffer.readUInt32BE(0);\n      var payload = buffer.slice(constants_1.SizeOfU32, constants_1.SizeOfU32 + length);\n      var result = new bytes_1.BytesValue(payload);\n      return [result, constants_1.SizeOfU32 + length];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer) {\n      return new bytes_1.BytesValue(buffer);\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(bytes) {\n      var lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n      lengthBuffer.writeUInt32BE(bytes.getLength());\n      var buffer = Buffer.concat([lengthBuffer, bytes.valueOf()]);\n      return buffer;\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(bytes) {\n      return bytes.valueOf();\n    }\n  }]);\n\n  return BytesBinaryCodec;\n}();\n\nexports.BytesBinaryCodec = BytesBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/bytes.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;AAGG;;;IACU,gB;;;;;;;WACT,sBAAa,MAAb,EAA2B;MACvB,IAAI,MAAM,GAAG,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAb;MACA,IAAI,OAAO,GAAG,MAAM,CAAC,KAAP,CAAa,WAAA,CAAA,SAAb,EAAwB,WAAA,CAAA,SAAA,GAAY,MAApC,CAAd;MACA,IAAI,MAAM,GAAG,IAAI,OAAA,CAAA,UAAJ,CAAe,OAAf,CAAb;MACA,OAAO,CAAC,MAAD,EAAS,WAAA,CAAA,SAAA,GAAY,MAArB,CAAP;IACH;;;WAED,wBAAe,MAAf,EAA6B;MACzB,OAAO,IAAI,OAAA,CAAA,UAAJ,CAAe,MAAf,CAAP;IACH;;;WAED,sBAAa,KAAb,EAA8B;MAC1B,IAAI,YAAY,GAAG,MAAM,CAAC,KAAP,CAAa,WAAA,CAAA,SAAb,CAAnB;MACA,YAAY,CAAC,aAAb,CAA2B,KAAK,CAAC,SAAN,EAA3B;MACA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,YAAD,EAAe,KAAK,CAAC,OAAN,EAAf,CAAd,CAAb;MACA,OAAO,MAAP;IACH;;;WAED,wBAAe,KAAf,EAAgC;MAC5B,OAAO,KAAK,CAAC,OAAN,EAAP;IACH;;;;;;AArBL,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BytesBinaryCodec = void 0;\nconst bytes_1 = require(\"../typesystem/bytes\");\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"BytesValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nclass BytesBinaryCodec {\n    decodeNested(buffer) {\n        let length = buffer.readUInt32BE(0);\n        let payload = buffer.slice(constants_1.SizeOfU32, constants_1.SizeOfU32 + length);\n        let result = new bytes_1.BytesValue(payload);\n        return [result, constants_1.SizeOfU32 + length];\n    }\n    decodeTopLevel(buffer) {\n        return new bytes_1.BytesValue(buffer);\n    }\n    encodeNested(bytes) {\n        let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n        lengthBuffer.writeUInt32BE(bytes.getLength());\n        let buffer = Buffer.concat([lengthBuffer, bytes.valueOf()]);\n        return buffer;\n    }\n    encodeTopLevel(bytes) {\n        return bytes.valueOf();\n    }\n}\nexports.BytesBinaryCodec = BytesBinaryCodec;\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}