{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/ionut/Desktop/xlauncher-presale/vision-ui-dashboard-pro-react-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = exports.parseValidatorKeys = exports.parseValidatorKey = exports.parseUserKeys = exports.parseUserKey = void 0;\n\nvar errors = __importStar(require(\"../errors\"));\n\nvar userKeys_1 = require(\"./userKeys\");\n\nvar validatorKeys_1 = require(\"./validatorKeys\");\n\nfunction parseUserKey(text) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var keys = parseUserKeys(text);\n  return keys[index];\n}\n\nexports.parseUserKey = parseUserKey;\n\nfunction parseUserKeys(text) {\n  // The user PEM files encode both the seed and the pubkey in their payloads.\n  var buffers = parse(text, userKeys_1.USER_SEED_LENGTH + userKeys_1.USER_PUBKEY_LENGTH);\n  return buffers.map(function (buffer) {\n    return new userKeys_1.UserSecretKey(buffer.slice(0, userKeys_1.USER_SEED_LENGTH));\n  });\n}\n\nexports.parseUserKeys = parseUserKeys;\n\nfunction parseValidatorKey(text) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var keys = parseValidatorKeys(text);\n  return keys[index];\n}\n\nexports.parseValidatorKey = parseValidatorKey;\n\nfunction parseValidatorKeys(text) {\n  var buffers = parse(text, validatorKeys_1.VALIDATOR_SECRETKEY_LENGTH);\n  return buffers.map(function (buffer) {\n    return new validatorKeys_1.ValidatorSecretKey(buffer);\n  });\n}\n\nexports.parseValidatorKeys = parseValidatorKeys;\n\nfunction parse(text, expectedLength) {\n  // Split by newlines, trim whitespace, then discard remaining empty lines.\n  var lines = text.split(/\\r?\\n/).map(function (line) {\n    return line.trim();\n  }).filter(function (line) {\n    return line.length > 0;\n  });\n  var buffers = [];\n  var linesAccumulator = [];\n\n  var _iterator = _createForOfIteratorHelper(lines),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n\n      if (line.startsWith(\"-----BEGIN\")) {\n        linesAccumulator = [];\n      } else if (line.startsWith(\"-----END\")) {\n        var asBase64 = linesAccumulator.join(\"\");\n        var asHex = Buffer.from(asBase64, \"base64\").toString();\n        var asBytes = Buffer.from(asHex, \"hex\");\n\n        if (asBytes.length != expectedLength) {\n          throw new errors.ErrBadPEM(\"incorrect key length: expected \".concat(expectedLength, \", found \").concat(asBytes.length));\n        }\n\n        buffers.push(asBytes);\n        linesAccumulator = [];\n      } else {\n        linesAccumulator.push(line);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (linesAccumulator.length != 0) {\n    throw new errors.ErrBadPEM(\"incorrect file structure\");\n  }\n\n  return buffers;\n}\n\nexports.parse = parse;","map":{"version":3,"sources":["../../src/walletcore/pem.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = exports.parseValidatorKeys = exports.parseValidatorKey = exports.parseUserKeys = exports.parseUserKey = void 0;\nconst errors = __importStar(require(\"../errors\"));\nconst userKeys_1 = require(\"./userKeys\");\nconst validatorKeys_1 = require(\"./validatorKeys\");\nfunction parseUserKey(text, index = 0) {\n    let keys = parseUserKeys(text);\n    return keys[index];\n}\nexports.parseUserKey = parseUserKey;\nfunction parseUserKeys(text) {\n    // The user PEM files encode both the seed and the pubkey in their payloads.\n    let buffers = parse(text, userKeys_1.USER_SEED_LENGTH + userKeys_1.USER_PUBKEY_LENGTH);\n    return buffers.map(buffer => new userKeys_1.UserSecretKey(buffer.slice(0, userKeys_1.USER_SEED_LENGTH)));\n}\nexports.parseUserKeys = parseUserKeys;\nfunction parseValidatorKey(text, index = 0) {\n    let keys = parseValidatorKeys(text);\n    return keys[index];\n}\nexports.parseValidatorKey = parseValidatorKey;\nfunction parseValidatorKeys(text) {\n    let buffers = parse(text, validatorKeys_1.VALIDATOR_SECRETKEY_LENGTH);\n    return buffers.map(buffer => new validatorKeys_1.ValidatorSecretKey(buffer));\n}\nexports.parseValidatorKeys = parseValidatorKeys;\nfunction parse(text, expectedLength) {\n    // Split by newlines, trim whitespace, then discard remaining empty lines.\n    let lines = text.split(/\\r?\\n/).map(line => line.trim()).filter(line => line.length > 0);\n    let buffers = [];\n    let linesAccumulator = [];\n    for (const line of lines) {\n        if (line.startsWith(\"-----BEGIN\")) {\n            linesAccumulator = [];\n        }\n        else if (line.startsWith(\"-----END\")) {\n            let asBase64 = linesAccumulator.join(\"\");\n            let asHex = Buffer.from(asBase64, \"base64\").toString();\n            let asBytes = Buffer.from(asHex, \"hex\");\n            if (asBytes.length != expectedLength) {\n                throw new errors.ErrBadPEM(`incorrect key length: expected ${expectedLength}, found ${asBytes.length}`);\n            }\n            buffers.push(asBytes);\n            linesAccumulator = [];\n        }\n        else {\n            linesAccumulator.push(line);\n        }\n    }\n    if (linesAccumulator.length != 0) {\n        throw new errors.ErrBadPEM(\"incorrect file structure\");\n    }\n    return buffers;\n}\nexports.parse = parse;\n//# sourceMappingURL=pem.js.map"]},"metadata":{},"sourceType":"script"}