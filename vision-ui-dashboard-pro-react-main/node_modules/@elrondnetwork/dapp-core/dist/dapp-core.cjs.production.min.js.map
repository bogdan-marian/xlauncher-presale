{"version":3,"file":"dapp-core.cjs.production.min.js","sources":["../src/types/enums.ts","../node_modules/regenerator-runtime/runtime.js","../src/constants/errorsMessages.ts","../src/constants/network.ts","../src/constants/ledgerErrorCodes.ts","../src/constants/index.ts","../src/providers/utils.ts","../src/providers/accountProvider.ts","../src/redux/commonActions.ts","../src/utils/storage/local.ts","../src/optionalPackages/moment.ts","../src/utils/storage/session.ts","../src/utils/storage/index.ts","../src/storage/local.ts","../src/redux/slices/loginInfoSlice.ts","../src/utils/internal/optionalRedirect.ts","../src/utils/internal/getLedgerErrorCodes.ts","../src/redux/slices/networkConfigSlice.ts","../src/types/transactions.ts","../src/utils/internal/getBridgeAddressFromNetwork.ts","../src/redux/slices/accountInfoSlice.ts","../src/utils/transactions/transactionStateByStatus.ts","../src/utils/decoders/decodePart.ts","../src/utils/decoders/base64Utils.ts","../src/utils/transactions/parseMultiEsdtTransferData.ts","../src/utils/getAllStringOccurrences.ts","../src/utils/account/addressIsValid.ts","../src/utils/transactions/getTokenFromData.ts","../src/utils/transactions/isTokenTransfer.ts","../src/utils/transactions/builtCallbackUrl.ts","../src/utils/transactions/parseTransactionAfterSigning.ts","../src/redux/slices/transactionsSlice.ts","../src/redux/slices/transactionsInfoSlice.ts","../src/redux/slices/modalsSlice.ts","../src/redux/selectors/helpers.ts","../src/redux/selectors/accountInfoSelectors.ts","../src/redux/selectors/loginInfoSelectors.ts","../src/redux/middlewares/loginSessionMiddleware.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/redux/selectors/networkConfigSelectors.ts","../src/models/newTransaction.ts","../src/redux/selectors/transactionsSelectors.ts","../src/redux/selectors/transactionsInfoSelectors.ts","../src/redux/selectors/modalsSelectors.ts","../src/utils/getIsLoggedIn.ts","../src/utils/logout.ts","../src/utils/network/getAccountProviderType.ts","../src/utils/network/getEgldLabel.ts","../src/utils/network/getIsProviderEqualTo.ts","../src/utils/account/getAddress.tsx","../src/providers/proxyProvider.ts","../src/utils/account/getAccount.tsx","../src/utils/account/setNonce.tsx","../src/utils/account/getLatestNonce.tsx","../src/utils/account/getAccountBalance.tsx","../src/utils/account/refreshAccount.tsx","../src/utils/account/getShardOfAddress.ts","../src/utils/account/signMessage.ts","../src/utils/math.ts","../src/utils/validation/stringIsInteger.ts","../src/utils/validation/stringIsFloat.ts","../src/utils/validation/getIdentifierType.ts","../src/utils/operations/pipe.ts","../src/utils/operations/denominate.ts","../src/utils/operations/calculateFeeLimit.ts","../src/utils/operations/getUsdValue.tsx","../src/utils/smartContracts.ts","../src/optionalPackages/classnames.ts","../src/utils/getGeneratedClasses.ts","../src/utils/wrapperClassName.ts","../src/redux/DappProviderContext.ts","../src/services/login/useExtensionLogin.ts","../src/services/login/useWebWalletLogin.ts","../src/services/login/useLedgerLogin.ts","../src/hooks/useUpdateEffect.ts","../src/services/login/useWalletConnectLogin.ts","../src/services/transactions/transformAndSignTransactions.ts","../src/services/transactions/signTransactions.tsx","../src/services/transactions/utils.ts","../src/services/transactions/sendTransactions.ts","../src/services/transactions/hooks/useGetPendingTransactions.ts","../src/services/transactions/hooks/useParseMultiEsdtTransferData.ts","../src/services/transactions/clearTransactions.ts","../src/services/transactions/hooks/useTrackTransactionStatus.ts","../src/services/transactions/hooks/useGetFailedTransactions.ts","../src/services/transactions/hooks/useGetSuccessfulTransactions.ts","../src/services/transactions/hooks/useGetActiveTransactionsStatus.ts","../src/services/transactions/hooks/useGetCompletedTransactions.ts","../src/components/ProviderInitializer.tsx","../src/apiCalls/transactions/sendSignedTransactions.ts","../src/apiCalls/transactions/getTransactionsByHashes.ts","../src/apiCalls/configuration/getServerConfiguration.ts","../src/apiCalls/configuration/getServerConfigurationForEnvironment.ts","../src/apiCalls/getScamAddressData.ts","../src/hooks/useGetNetworkConfig.ts","../src/hooks/useGetNotification.ts","../src/hooks/transactions/useGetTransactionDisplayInfo.ts","../src/hooks/transactions/useParseSignedTransactions.tsx","../src/hooks/transactions/useSignTransactions.tsx","../src/hooks/transactions/useGetSignedTransactions.ts","../src/optionalPackages/swr.ts","../src/hooks/transactions/useGetTokenDetails.tsx","../src/hooks/account/useGetAccountInfo.ts","../src/hooks/account/useGetLoginInfo.ts","../src/hooks/account/useGetAccountProvider.ts","../src/hooks/transactions/useSignTransactionsWithDevice.tsx","../src/hooks/transactions/useGetSignTransactionsError.ts","../src/hooks/transactions/useCheckTransactionStatus/getPendingTransactions.ts","../src/hooks/transactions/useCheckTransactionStatus/manageTimedOutTransactions.ts","../src/hooks/transactions/useCheckTransactionStatus/checkBatch.ts","../src/hooks/transactions/useCheckTransactionStatus/manageFailedTransactions.ts","../src/hooks/transactions/useCheckTransactionStatus/useCheckTransactionStatus.ts","../src/utils/account/getAccountShard.tsx","../src/wrappers/AppInitializer.tsx","../src/components/TransactionSender/index.ts","../src/components/TransactionsTracker/index.tsx","../src/components/TransactionsTracker/useTransactionsTracker.ts","../src/redux/DappProvider/CustomComponents.tsx","../src/models/TransactionParameter.ts","../src/wrappers/withClassNameWrapper.tsx","../src/UI/Denominate/index.tsx","../src/optionalPackages/fortawesome-free-solid-svg-icons.ts","../src/optionalPackages/react-fontawesome.ts","../src/UI/ExplorerLink/index.tsx","../src/UI/extension/LoginButton/index.tsx","../src/UI/ModalContainer/index.tsx","../src/UI/PageState/index.tsx","../src/UI/ledger/LoginModal/AddressRow.tsx","../src/UI/ledger/LoginModal/AddressTable.tsx","../src/UI/ledger/LoginModal/ConfirmAddress.tsx","../src/UI/ledger/LoginModal/LedgerConnect.tsx","../src/UI/ledger/LoginModal/index.tsx","../src/UI/ledger/LoginButton/index.tsx","../src/UI/NotificationModal/index.tsx","../src/UI/ProgressSteps/Dot.tsx","../src/UI/ProgressSteps/index.tsx","../src/UI/SignTransactionsModals/SignWithExtensionModal/index.tsx","../src/UI/TokenDetails/TokenSymbol/index.tsx","../src/UI/TokenDetails/index.tsx","../src/UI/TransactionData/index.tsx","../src/UI/SignTransactionsModals/SignWithDeviceModal/SignStep.tsx","../src/UI/SignTransactionsModals/SignWithDeviceModal/index.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/index.tsx","../src/UI/SignTransactionsModals/SignWithWalletConnectModal/index.tsx","../src/UI/SignTransactionsModals/index.tsx","../src/storage/session.ts","../src/UI/IconState/index.tsx","../src/UI/Progress/index.tsx","../src/UI/CopyButton/helpers/copyToClipboard.tsx","../src/UI/CopyButton/index.tsx","../src/UI/Trim/index.tsx","../src/UI/TxDetails/index.tsx","../src/UI/TransactionToast/index.tsx","../src/services/transactions/isCrossShardTransaction.ts","../src/UI/TransactionsToastList/index.tsx","../src/optionalPackages/platform.ts","../src/optionalPackages/qrcode.ts","../src/UI/walletConnect/WalletConnectLoginContainer/index.tsx","../src/UI/walletConnect/WalletConnectLoginButton/index.tsx","../src/UI/webWallet/LoginButton/index.tsx","../src/UI/UsdValue/index.tsx","../src/UI/pages/UnlockPage/index.tsx","../src/providers/apiProvider.ts","../src/constants/mnemonicWords.ts","../src/wrappers/AuthenticatedRoutesWrapper/index.tsx","../src/redux/DappProvider/index.tsx","../src/utils/buildUrlParams.ts","../src/utils/network/getChainID.ts","../src/utils/network/getNetworkConfig.ts","../src/utils/account/loginWithExternalProvider.ts","../src/utils/operations/nominate.ts","../src/utils/switchTrue.ts","../src/hooks/useIdleTimer.tsx","../src/hooks/transactions/useSignTransactionsWithLedger.tsx"],"sourcesContent":["export enum TransactionServerStatusesEnum {\n  'pending' = 'pending',\n  'fail' = 'fail',\n  'invalid' = 'invalid',\n  'success' = 'success',\n  'executed' = 'executed',\n  'completed' = 'completed'\n}\n\nexport enum TransactionBatchStatusesEnum {\n  'signed' = 'signed',\n  'cancelled' = 'cancelled',\n  'success' = 'success',\n  'sent' = 'sent',\n  'fail' = 'fail',\n  'timedOut' = 'timedOut'\n}\n\nexport enum LoginMethodsEnum {\n  ledger = 'ledger',\n  walletconnect = 'walletconnect',\n  wallet = 'wallet',\n  extension = 'extension',\n  extra = 'extra',\n  none = ''\n}\n\nexport enum NotificationTypesEnum {\n  warning = 'warning',\n  error = 'error',\n  success = 'success'\n}\n\nexport enum TypesOfSmartContractCallsEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer'\n}\n\nexport enum EnvironmentsEnum {\n  testnet = 'testnet',\n  devnet = 'devnet',\n  mainnet = 'mainnet'\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export const ERROR_SIGNING= 'error when signing';\nexport const TRANSACTION_CANCELLED = 'Transaction cancelled';\nexport const ERROR_SIGNING_TX = 'error signing transaction';\nexport const PROVIDER_NOT_INTIALIZED = 'provider not intialized';\nexport const MISSING_PROVIDER_MESSAGE = 'You need a signer/valid signer to send a transaction,use either WalletProvider, LedgerProvider or WalletConnect';\n","import { EnvironmentsEnum, NetworkType } from 'types';\n\nexport const DEFAULT_MIN_GAS_LIMIT = 50_000;\n\nexport const configEndpoint = 'dapp/config';\n\nexport const fallbackNetworkConfigurations: Record<\n  keyof typeof EnvironmentsEnum,\n  NetworkType\n> = {\n  devnet: {\n    id: 'devnet',\n    chainId: 'D',\n    name: 'Devnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://devnet-wallet.elrond.com',\n    apiAddress: 'https://devnet-api.elrond.com',\n    explorerAddress: 'http://devnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  testnet: {\n    id: 'testnet',\n    chainId: 'T',\n    name: 'Testnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://testnet-wallet.elrond.com',\n    apiAddress: 'https://testnet-api.elrond.com',\n    explorerAddress: 'http://testnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  mainnet: {\n    id: 'mainnet',\n    chainId: '1',\n    name: 'Mainnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://wallet.elrond.com',\n    apiAddress: 'https://api.elrond.com',\n    explorerAddress: 'https://explorer.elrond.com',\n    apiTimeout: '4000'\n  }\n};\n","const ledgerErrorCodes = {\n  0x9000: {\n    code: 'codeSuccess',\n    message: 'Success'\n  },\n  0x6985: {\n    code: 'ERR_USER_DENIED',\n    message: 'Rejected by user'\n  },\n  0x6d00: {\n    code: 'ERR_UNKNOWN_INSTRUCTION',\n    message: 'Unknown instruction'\n  },\n  0x6e00: {\n    code: 'ERR_WRONG_CLA',\n    message: 'Wrong CLA'\n  },\n  0x6e01: {\n    code: 'ERR_INVALID_ARGUMENTS',\n    message: 'Invalid arguments'\n  },\n  0x6e02: {\n    code: 'ERR_INVALID_MESSAGE',\n    message: 'Invalid message'\n  },\n  0x6e03: {\n    code: 'ERR_INVALID_P1',\n    message: 'Invalid P1'\n  },\n  0x6e04: {\n    code: 'ERR_MESSAGE_TOO_LONG',\n    message: 'Message too long'\n  },\n  0x6e05: {\n    code: 'ERR_RECEIVER_TOO_LONG',\n    message: 'Receiver too long'\n  },\n  0x6e06: {\n    code: 'ERR_AMOUNT_TOO_LONG',\n    message: 'Amount too long'\n  },\n  0x6e07: {\n    code: 'ERR_CONTRACT_DATA_DISABLED',\n    message: 'Contract data disabled in app options'\n  },\n  0x6e08: {\n    code: 'ERR_MESSAGE_INCOMPLETE',\n    message: 'Message incomplete'\n  },\n  0x6e10: {\n    code: 'ERR_SIGNATURE_FAILED',\n    message: 'Signature failed'\n  },\n  0x6e09: {\n    code: 'ERR_WRONG_TX_VERSION',\n    message: 'Wrong TX version'\n  },\n  0x6e0a: {\n    code: 'ERR_NONCE_TOO_LONG',\n    message: 'Nonce too long'\n  },\n  0x6e0b: {\n    code: 'ERR_INVALID_AMOUNT',\n    message: 'Invalid amount'\n  },\n  0x6e0c: {\n    code: 'ERR_INVALID_FEE',\n    message: 'Invalid fee'\n  },\n  0x6e0d: {\n    code: 'ERR_PRETTY_FAILED',\n    message: 'Pretty failed'\n  },\n  0x6e0e: {\n    code: 'ERR_DATA_TOO_LONG',\n    message: 'Data too long'\n  },\n  0x6e0f: {\n    code: 'ERR_WRONG_TX_OPTIONS',\n    message: 'Invalid transaction options'\n  },\n  0x6e11: {\n    code: 'ERR_SIGN_TX_DEPRECATED',\n    message:\n      'Regular transaction signing is deprecated in this version. Use hash signing.'\n  }\n};\n\nexport default ledgerErrorCodes;\n","export * as errorsMessages from './errorsMessages';\nexport * as networkConstants from './network';\nexport * as ledgerErrorCodes from './ledgerErrorCodes';\n\nexport const gasPriceModifier = '0.01';\nexport const gasPerDataByte = '1500';\nexport const gasLimit = '50000';\nexport const gasPrice = 1_000_000_000;\nexport const denomination = 18;\nexport const decimals = 4;\nexport const version = 1;\n\nexport const ledgerContractDataEnabledValue = 1;\n\nexport const dappInitRoute = '/dapp/init';\nexport const walletSignSession = 'signSession';\n","import {\n  ExtensionProvider,\n  HWProvider,\n  IDappProvider,\n  IHWElrondApp,\n  SignableMessage,\n  Transaction,\n  WalletConnectProvider,\n  WalletProvider\n} from '@elrondnetwork/erdjs';\nimport { ledgerContractDataEnabledValue } from 'constants/index';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport const DAPP_INIT_ROUTE = '/dapp/init';\n\nexport const getProviderType = (\n  provider?: IDappProvider | null\n): LoginMethodsEnum => {\n  switch (provider?.constructor) {\n    case WalletProvider:\n      return LoginMethodsEnum.wallet;\n    case WalletConnectProvider:\n      return LoginMethodsEnum.walletconnect;\n    case HWProvider:\n      return LoginMethodsEnum.ledger;\n    case ExtensionProvider:\n      return LoginMethodsEnum.extension;\n    case EmptyProvider:\n      return LoginMethodsEnum.none;\n    default:\n      return LoginMethodsEnum.extra;\n  }\n};\n\nexport const newWalletProvider = (walletAddress: string) =>\n  new WalletProvider(`${walletAddress}${DAPP_INIT_ROUTE}`);\n\nexport const getLedgerConfiguration = async (\n  initializedHwWalletP: HWProvider\n) => {\n  if (!initializedHwWalletP.isInitialized()) {\n    throw new Error('Unable to get version. Provider not initialized');\n  }\n  const hwApp: IHWElrondApp = (initializedHwWalletP as any).hwApp;\n  const { contractData, version } = await hwApp.getAppConfiguration();\n  const dataEnabled = contractData === ledgerContractDataEnabledValue;\n  return { version, dataEnabled };\n};\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IDappProvider {\n  async init() {\n    return false;\n  }\n  login(options?: { callbackUrl?: string; token?: string }): Promise<string> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n  async logout(options?: { callbackUrl?: string }): Promise<boolean> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n  async getAddress(): Promise<string> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n  isInitialized(): boolean {\n    return false;\n  }\n  async isConnected(): Promise<boolean> {\n    return false;\n  }\n  async sendTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransactions(\n    transactions: Transaction[],\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction[]> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${transactions} options: ${options}`\n      )\n    );\n  }\n  async signMessage(message: SignableMessage): Promise<SignableMessage> {\n    throw new Error(notInitializedError(`signTransactions with ${message}`));\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n","import { IDappProvider } from '@elrondnetwork/erdjs';\nimport { emptyProvider } from './utils';\n\nlet accountProvider: IDappProvider = emptyProvider;\n\nlet externalProvider: IDappProvider | null = null;\n\nexport function setAccountProvider(provider: IDappProvider) {\n  accountProvider = provider;\n}\n\nexport function setExternalProvider(provider: IDappProvider) {\n  externalProvider = provider;\n}\n\nexport function setExternalProviderAsAccountProvider() {\n  if (externalProvider != null) {\n    accountProvider = externalProvider;\n  }\n}\n\nexport function getAccountProvider() {\n  return accountProvider || emptyProvider;\n}\n\nexport function getExternalProvider() {\n  return externalProvider;\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport interface LoginActionPayloadType {\n  address: string;\n  loginMethod: LoginMethodsEnum;\n}\n\nexport const logoutAction = createAction('logout');\n\nexport const loginAction = createAction(\n  'login',\n  (payload: LoginActionPayloadType) => ({ payload })\n);\n","import moment from 'moment';\n\nexport const localStorageKeys = {\n  loginExpiresAt: 'dapp-core-login-expires-at'\n} as const;\n\ntype LocalValueType = keyof typeof localStorageKeys;\ntype LocalKeyType = typeof localStorageKeys[LocalValueType];\n\ntype ExpiresType = number | false;\n\nconst hasLocalStorage = typeof localStorage !== 'undefined';\n\nexport const setItem = ({\n  key,\n  data,\n  expires\n}: {\n  key: LocalKeyType;\n  data: any;\n  expires: ExpiresType;\n}) => {\n  if (!hasLocalStorage) {\n    return;\n  }\n  localStorage.setItem(\n    String(key),\n    JSON.stringify({\n      expires,\n      data\n    })\n  );\n};\n\nexport const getItem = (key: LocalKeyType): any => {\n  if (!hasLocalStorage) {\n    return;\n  }\n  const item = localStorage.getItem(String(key));\n  if (!item) {\n    return null;\n  }\n\n  const deserializedItem = JSON.parse(item);\n  if (!deserializedItem) {\n    return null;\n  }\n\n  if (\n    !deserializedItem.hasOwnProperty('expires') ||\n    !deserializedItem.hasOwnProperty('data')\n  ) {\n    return null;\n  }\n\n  const expired = moment().unix() >= deserializedItem.expires;\n  if (expired) {\n    localStorage.removeItem(String(key));\n    return null;\n  }\n\n  return deserializedItem.data;\n};\n\nexport const removeItem = (key: LocalKeyType) => {\n  if (!hasLocalStorage) {\n    return;\n  }\n  localStorage.removeItem(String(key));\n};\n","let moment: any = {};\ntry {\n  moment = require('moment');\n} catch (err) {}\n\nexport default moment;\n","import moment from 'optionalPackages/moment';\n\nexport type SessionKeyType = 'address' | 'shard' | 'toasts' | 'toastProgress';\ntype ExpiresType = number | false;\n\nexport const setItem = ({\n  key,\n  data,\n  expires\n}: {\n  key: SessionKeyType;\n  data: any;\n  expires: ExpiresType;\n}) => {\n  sessionStorage.setItem(\n    String(key),\n    JSON.stringify({\n      expires,\n      data\n    })\n  );\n};\n\nexport const getItem = (key: SessionKeyType): any => {\n  const item = sessionStorage.getItem(String(key));\n  if (!item) {\n    return null;\n  }\n\n  const deserializedItem = JSON.parse(item);\n  if (!deserializedItem) {\n    return null;\n  }\n\n  if (\n    !deserializedItem.hasOwnProperty('expires') ||\n    !deserializedItem.hasOwnProperty('data')\n  ) {\n    return null;\n  }\n\n  const expired = moment().unix() >= deserializedItem.expires;\n  if (expired) {\n    sessionStorage.removeItem(String(key));\n    return null;\n  }\n\n  return deserializedItem.data;\n};\n\nexport const removeItem = (key: SessionKeyType) =>\n  sessionStorage.removeItem(String(key));\n\nexport const clear = () => sessionStorage.clear();\n\nexport const storage = {\n  setItem,\n  getItem,\n  removeItem,\n  clear\n};\n\nexport default storage;\n","import * as local from './local';\nimport * as session from './session';\n\nexport const storage = { session, local };\n\nexport default storage;\n","import storage from 'utils/storage';\nimport { localStorageKeys } from 'utils/storage/local';\n\nexport function getNewLoginExpiresTimestamp() {\n  return new Date().setHours(new Date().getHours() + 24);\n}\n\nexport function setLoginExpiresAt(expiresAt: number) {\n  storage.local.setItem({\n    key: localStorageKeys.loginExpiresAt,\n    data: expiresAt,\n    expires: expiresAt\n  });\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { setLoginExpiresAt, getNewLoginExpiresTimestamp } from 'storage/local';\nimport { TokenLoginType } from 'types';\nimport { LoginMethodsEnum } from 'types/enums';\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface WalletConnectLoginType {\n  loginType: string;\n  callbackRoute: string;\n  logoutRoute: string;\n}\n\nexport interface LedgerLoginType {\n  index: number;\n  loginType: string;\n}\n\nexport interface LoginInfoType {\n  data: any;\n  expires: number;\n}\n\nexport interface LoginInfoStateType {\n  loginMethod: LoginMethodsEnum;\n  walletConnectLogin: WalletConnectLoginType | null;\n  ledgerLogin: LedgerLoginType | null;\n  tokenLogin: TokenLoginType | null;\n  walletLogin: LoginInfoType | null;\n  extensionLogin: LoginInfoType | null;\n}\n\nconst initialState: LoginInfoStateType = {\n  loginMethod: LoginMethodsEnum.none,\n  walletConnectLogin: null,\n  ledgerLogin: null,\n  tokenLogin: null,\n  walletLogin: null,\n  extensionLogin: null\n};\n\nexport const loginInfoSlice = createSlice({\n  name: 'loginInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setLoginMethod: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginMethodsEnum>\n    ) => {\n      state.loginMethod = action.payload;\n    },\n    setTokenLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<TokenLoginType>\n    ) => {\n      state.tokenLogin = action.payload;\n    },\n    setTokenLoginSignature: (\n      state: LoginInfoStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state?.tokenLogin != null) {\n        state.tokenLogin.signature = action.payload;\n      }\n    },\n    setWalletLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginInfoType | null>\n    ) => {\n      state.walletLogin = action.payload;\n    },\n    setWalletConnectLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<WalletConnectLoginType | null>\n    ) => {\n      state.walletConnectLogin = action.payload;\n    },\n    setLedgerLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LedgerLoginType | null>\n    ) => {\n      state.ledgerLogin = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: LoginInfoStateType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        state.loginMethod = action.payload.loginMethod;\n        setLoginExpiresAt(getNewLoginExpiresTimestamp());\n      }\n    );\n  }\n});\n\nexport const {\n  setLoginMethod,\n  setWalletConnectLogin,\n  setLedgerLogin,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletLogin\n} = loginInfoSlice.actions;\n\nexport default loginInfoSlice.reducer;\n","export function optionalRedirect(\n  callbackUrl?: string,\n  shouldRedirect?: boolean\n) {\n  if (shouldRedirect && callbackUrl != null) {\n    setTimeout(() => {\n      if (!window.location.pathname.includes(callbackUrl)) {\n        window.location.href = callbackUrl;\n      }\n    }, 200);\n  }\n}\n","import ledgerErrorCodes from 'constants/ledgerErrorCodes';\n\nconst ledgerAppErrorText = 'Check if Elrond app is open on Ledger';\nconst notConnectedCode = 0x6e01;\n\nexport function getLedgerErrorCodes(err?: any) {\n  let errorMessage: string | null = null;\n  debugger;\n  if (err?.statusCode in ledgerErrorCodes) {\n    const statusCode: keyof typeof ledgerErrorCodes = err?.statusCode;\n    const { message } = ledgerErrorCodes[statusCode];\n    errorMessage =\n      statusCode === notConnectedCode ? ledgerAppErrorText : message;\n  }\n  return {\n    errorMessage,\n    defaultErrorMessage: ledgerAppErrorText\n  };\n}\n\nexport default getLedgerErrorCodes;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport omit from 'lodash.omit';\nimport {\n  AccountInfoSliceNetworkType,\n  BaseNetworkType,\n  NetworkType\n} from 'types';\nimport { getBridgeAddressFromNetwork } from 'utils/internal';\n\nexport const defaultNetwork: AccountInfoSliceNetworkType = {\n  id: 'not-configured',\n  chainId: '',\n  name: 'NOT CONFIGURED',\n  egldLabel: '',\n  egldDenomination: '18',\n  decimals: '4',\n  gasPerDataByte: '1500',\n  walletConnectDeepLink: '',\n  walletConnectBridgeAddress: '',\n  walletAddress: '',\n\n  apiAddress: '',\n  explorerAddress: '',\n  apiTimeout: '4000'\n};\n\nexport interface NetworkConfigStateType {\n  network: AccountInfoSliceNetworkType;\n  chainID: string;\n}\n\nconst initialState: NetworkConfigStateType = {\n  network: defaultNetwork,\n  chainID: '-1'\n};\n\nexport const networkConfigSlice = createSlice({\n  name: 'appConfig',\n  initialState: initialState,\n  reducers: {\n    initializeNetworkConfig: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<NetworkType>\n    ) => {\n      const walletConnectBridgeAddress = getBridgeAddressFromNetwork(\n        action.payload.walletConnectBridgeAddresses\n      );\n      const network: BaseNetworkType = omit(\n        action.payload,\n        'walletConnectBridgeAddresses'\n      );\n      state.network = {\n        ...state.network,\n        ...network,\n        walletConnectBridgeAddress\n      };\n    },\n    setChainID: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<string>\n    ) => {\n      state.chainID = action.payload;\n    }\n  }\n});\n\nexport const {\n  initializeNetworkConfig,\n  setChainID\n} = networkConfigSlice.actions;\n\nexport default networkConfigSlice.reducer;\n","import React from 'react';\nimport { Address, Transaction } from '@elrondnetwork/erdjs';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from './enums';\n\nexport interface TransactionsToSignType {\n  transactions: RawTransactionType[];\n  callbackRoute?: string;\n  sessionId: string;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsBodyType {\n  transactions?: SignedTransactionType[];\n  status?: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsType {\n  [sessionId: string]: SignedTransactionsBodyType;\n}\n\nexport interface TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n}\n\nexport interface RawTransactionType {\n  signature?: string;\n  value: string;\n  receiver: string;\n  gasPrice: number;\n  gasLimit: number;\n  sender: string;\n  nonce: number;\n  data: string;\n  chainID: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface SignedTransactionType extends RawTransactionType {\n  hash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface TxDataTokenType {\n  tokenId: string;\n  amount: string;\n  receiver: string;\n  type?: MultiEsdtTxType['type'] | '';\n  nonce?: string;\n  multiTxData?: string;\n}\n\nexport type TxsDataTokensType = Record<string, TxDataTokenType> | undefined;\n\ninterface MultiEsdtType {\n  type:\n    | TransactionTypesEnum.esdtTransaction\n    | TransactionTypesEnum.nftTransaction;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\ninterface MultiEsdtScCallType {\n  type: TransactionTypesEnum.scCall;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\nexport type MultiEsdtTxType = MultiEsdtType | MultiEsdtScCallType;\n\nexport type MultiSignTxType = {\n  multiTxData?: string;\n  transactionIndex: number;\n  transaction: Transaction;\n};\n\nexport interface TokenOptionType {\n  name: string;\n  identifier: string;\n  balance: string;\n  decimals: number;\n  collection?: string;\n  avatar?: string;\n}\n\nexport interface SimpleTransactionType {\n  value: string;\n  receiver: string;\n  data?: string;\n  gasPrice?: number;\n  gasLimit?: number;\n  chainID?: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface TransactionsDisplayInfoType {\n  errorMessage?: string;\n  successMessage?: string;\n  processingMessage?: string;\n  submittedMessage?: string;\n  transactionDuration?: number;\n}\n\nexport interface SendSimpleTransactionPropsType {\n  transactions: SimpleTransactionType[];\n  minGasLimit?: number;\n}\n\nexport interface SendTransactionsPropsType {\n  transactions:\n    | Transaction\n    | SimpleTransactionType\n    | (Transaction | SimpleTransactionType)[];\n  redirectAfterSign?: boolean;\n  signWithoutSending: boolean;\n  completedTransactionsDelay?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  minGasLimit?: number;\n  sessionInformation?: any;\n}\n\nexport interface SignTransactionsPropsType {\n  transactions: Transaction[] | Transaction;\n  minGasLimit?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport enum TransactionTypesEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTTransfer = 'ESDTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer',\n  esdtTransaction = 'esdtTransaction',\n  nftTransaction = 'nftTransaction',\n  scCall = 'scCall'\n}\n\nexport interface ActiveLedgerTransactionType {\n  transaction: Transaction;\n  transactionTokenInfo: TxDataTokenType;\n  isTokenTransaction: boolean;\n  dataField: string;\n  receiverScamInfo: string | null;\n}\n\nexport interface SmartContractResult {\n  hash: string;\n  timestamp: number;\n  nonce: number;\n  gasLimit: number;\n  gasPrice: number;\n  value: string;\n  sender: string;\n  receiver: string;\n  data: string;\n  prevTxHash: string;\n  originalTxHash: string;\n  callType: string;\n  miniBlockHash: string;\n  returnMessage: string;\n}\n\nexport interface SignModalPropsType {\n  handleClose: () => void;\n  error: string | null;\n  callbackRoute?: string;\n  transactions: Transaction[];\n  className?: string;\n  verifyReceiverScam?: boolean;\n  title?: React.ReactNode;\n}\n\nexport interface CustomTransactionInformation {\n  redirectAfterSign: boolean;\n  sessionInformation: any;\n  completedTransactionsDelay?: number;\n  signWithoutSending: boolean;\n}\n","export function getBridgeAddressFromNetwork(\n  walletConnectBridgeAddresses: string[]\n) {\n  return walletConnectBridgeAddresses[\n    Math.floor(Math.random() * walletConnectBridgeAddresses.length)\n  ];\n}\n","import { Address } from '@elrondnetwork/erdjs';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport storage from 'utils/storage';\nimport { localStorageKeys } from 'utils/storage/local';\n\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface AccountType {\n  address: string;\n  balance: string;\n  nonce: number;\n  code?: string;\n  username?: string;\n}\nexport interface LedgerAccountType {\n  index: number;\n  address: string;\n  hasContractDataEnabled: boolean;\n  version: string;\n}\n\nexport interface UpdateLedgerAccountPayloadType {\n  index: number;\n  address: string;\n}\n\nexport interface AccountInfoSliceType {\n  address: string;\n  shard?: number;\n  account: AccountType;\n  publicKey: string;\n  ledgerAccount: LedgerAccountType | null;\n  walletConnectAccount: string | null;\n  isAccountLoading: boolean;\n  accountLoadingError: string | null;\n}\n\nexport const emptyAccount: AccountType = {\n  balance: '...',\n  address: '',\n  nonce: 0\n};\n\nconst initialState: AccountInfoSliceType = {\n  address: '',\n  account: emptyAccount,\n  ledgerAccount: null,\n  publicKey: '',\n  walletConnectAccount: null,\n  isAccountLoading: true,\n  accountLoadingError: null\n};\n\nexport const accountInfoSlice = createSlice({\n  name: 'accountInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setAddress: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string>\n    ) => {\n      const address = action.payload;\n      state.address = address;\n      state.publicKey = new Address(address).hex();\n    },\n    setAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<AccountType>\n    ) => {\n      state.account = action.payload;\n      state.isAccountLoading = false;\n      state.accountLoadingError = null;\n    },\n    setAccountNonce: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.account.nonce = action.payload;\n    },\n    setAccountShard: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.shard = action.payload;\n    },\n    setLedgerAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<LedgerAccountType | null>\n    ) => {\n      state.ledgerAccount = action.payload;\n    },\n    updateLedgerAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<UpdateLedgerAccountPayloadType>\n    ) => {\n      if (state.ledgerAccount != null) {\n        state.ledgerAccount.index = action.payload.index;\n        state.ledgerAccount.address = action.payload.address;\n      }\n    },\n    setWalletConnectAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.walletConnectAccount = action.payload;\n    },\n    setIsAccountLoading: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<boolean>\n    ) => {\n      state.isAccountLoading = action.payload;\n      state.accountLoadingError = null;\n    },\n    setAccountLoadingError: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.accountLoadingError = action.payload;\n      state.isAccountLoading = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      storage.local.removeItem(localStorageKeys.loginExpiresAt);\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: AccountInfoSliceType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        const { address } = action.payload;\n        state.address = address;\n        state.publicKey = new Address(address).hex();\n      }\n    );\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.account) {\n        return;\n      }\n\n      const { account: accountInfo } = action.payload;\n      const { address, shard, account, publicKey } = accountInfo;\n      state.address = address;\n      state.shard = shard;\n      state.account = account;\n      state.publicKey = publicKey;\n    });\n  }\n});\n\nexport const {\n  setAccount,\n  setAddress,\n  setAccountNonce,\n  setAccountShard,\n  setLedgerAccount,\n  updateLedgerAccount,\n  setWalletConnectAccount,\n  setIsAccountLoading,\n  setAccountLoadingError\n} = accountInfoSlice.actions;\n\nexport default accountInfoSlice.reducer;\n","import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\n\nexport const pendingBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.sent\n];\nexport const successBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.success\n];\n\nexport const failBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.fail,\n  TransactionBatchStatusesEnum.cancelled,\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const timedOutBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const pendingServerTransactionsStatuses = [\n  TransactionServerStatusesEnum.pending\n];\n\nexport const successServerTransactionsStates = [\n  TransactionServerStatusesEnum.success\n];\n\nexport const completedServerTransactionsStates = [\n  TransactionServerStatusesEnum.completed\n];\n\nexport const failServerTransactionsStates = [\n  TransactionServerStatusesEnum.fail,\n  TransactionServerStatusesEnum.invalid\n];\n\nexport function getIsTransactionCompleted(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return completedServerTransactionsStates.includes(\n    status as TransactionServerStatusesEnum\n  );\n}\n\nexport function getIsTransactionPending(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionPending(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionPending(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionSuccessful(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionSuccessful(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionSuccessful(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionFailed(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionFailed(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionFailed(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionTimedOut(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    isBatchTransactionTimedOut(status as TransactionBatchStatusesEnum)\n  );\n}\n\nexport function isBatchTransactionPending(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && pendingBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionSuccessful(\n  status: TransactionBatchStatusesEnum\n) {\n  return status != null && successBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionFailed(status: TransactionBatchStatusesEnum) {\n  return status != null && failBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionTimedOut(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && timedOutBatchTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionPending(\n  status?: TransactionServerStatusesEnum\n) {\n  return status != null && pendingServerTransactionsStatuses.includes(status);\n}\nexport function isServerTransactionSuccessful(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && successServerTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionFailed(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && failServerTransactionsStates.includes(status);\n}\n","const isUtf8 = (str: string) => {\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 127) return false;\n  }\n  return true;\n};\n\nexport function decodePart(part: string) {\n  let decodedPart = part;\n\n  try {\n    const hexPart = Buffer.from(part, 'hex').toString().trim();\n\n    if (isUtf8(hexPart) && hexPart.length > 1) {\n      decodedPart = hexPart;\n    }\n  } catch (error) {}\n\n  return decodedPart;\n}\n\nexport default decodePart;\n","export function isStringBase64(string: string) {\n  try {\n    return Buffer.from(string, 'base64').toString() === atob(string);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function encodeToBase64(string: string) {\n  return btoa(string);\n}\n\nexport function decodeBase64(string: string) {\n  return atob(string);\n}\n","import BigNumber from 'bignumber.js';\nimport { MultiEsdtTxType, TransactionTypesEnum } from 'types/transactions';\nimport { decodePart } from 'utils/decoders';\nimport { getAllStringOccurrences } from '../getAllStringOccurrences';\n\n// TODO: add tests\nexport function parseMultiEsdtTransferData(data?: string) {\n  const transactions: MultiEsdtTxType[] = [];\n  let contractCallDataIndex = 0;\n  try {\n    if (\n      data?.startsWith(TransactionTypesEnum.MultiESDTNFTTransfer) &&\n      data?.includes('@')\n    ) {\n      const [, receiver, encodedTxCount, ...rest] = data?.split('@');\n      if (receiver) {\n        const txCount = new BigNumber(encodedTxCount, 16).toNumber();\n\n        let itemIndex = 0;\n        for (let txIndex = 0; txIndex < txCount; txIndex++) {\n          const transaction: MultiEsdtTxType = {\n            type: TransactionTypesEnum.nftTransaction,\n            data: '',\n            receiver\n          };\n\n          for (let index = 0; index < 3; index++) {\n            switch (index) {\n              case 0:\n                transaction.token = decodePart(rest[itemIndex]);\n                transaction.data = rest[itemIndex];\n                break;\n              case 1: {\n                const encodedNonce =\n                  rest[itemIndex] && rest[itemIndex].length\n                    ? rest[itemIndex]\n                    : '';\n                if (encodedNonce) {\n                  transaction.nonce = encodedNonce;\n                } else {\n                  transaction.type = TransactionTypesEnum.esdtTransaction;\n                }\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              }\n              case 2:\n                transaction.amount = new BigNumber(\n                  rest[itemIndex],\n                  16\n                ).toString(10);\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              default:\n                break;\n            }\n            contractCallDataIndex = itemIndex + 1;\n            itemIndex++;\n          }\n          transactions[txIndex] = transaction;\n        }\n\n        const isDifferentFromTxCount = transactions.length !== txCount;\n        const hasInvalidNoOfAdSigns = transactions.some((tx) => {\n          const adSignOccurences = getAllStringOccurrences(tx.data, '@').length;\n          return adSignOccurences !== 2;\n        });\n        const hasAdStart = transactions.some((tx) => tx.data.startsWith('@'));\n        if (isDifferentFromTxCount || hasInvalidNoOfAdSigns || hasAdStart) {\n          return [];\n        }\n        if (rest[contractCallDataIndex]) {\n          let scCallData = rest[contractCallDataIndex];\n          for (let i = contractCallDataIndex + 1; i < rest.length; i++) {\n            scCallData += '@' + rest[i];\n          }\n          transactions[txCount] = {\n            type: TransactionTypesEnum.scCall,\n            data: scCallData,\n            receiver\n          };\n        }\n      }\n    }\n  } catch (err) {\n    console.error('failed parsing tx', err);\n    return transactions;\n  }\n  return transactions;\n}\n\nexport default parseMultiEsdtTransferData;\n","export const getAllStringOccurrences = (\n  sourceStr: string,\n  searchStr: string\n) => {\n  const startingIndices = [];\n\n  let indexOccurence = sourceStr.indexOf(searchStr, 0);\n\n  while (indexOccurence >= 0) {\n    startingIndices.push(indexOccurence);\n    indexOccurence = sourceStr.indexOf(searchStr, indexOccurence + 1);\n  }\n\n  return startingIndices;\n};\n","import { Address } from '@elrondnetwork/erdjs';\n\nfunction canTransformToPublicKey(address: string) {\n  try {\n    const checkAddress = new Address(address);\n    return Boolean(checkAddress.bech32());\n  } catch {\n    return false;\n  }\n}\n\nexport function addressIsValid(destinationAddress: string) {\n  const isValidBach =\n    destinationAddress?.startsWith('erd') &&\n    destinationAddress.length === 62 &&\n    /^\\w+$/.test(destinationAddress);\n\n  return isValidBach && canTransformToPublicKey(destinationAddress);\n}\n\nexport default addressIsValid;\n","import { Address } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport addressIsValid from 'utils/account/addressIsValid';\nimport decodePart from 'utils/decoders/decodePart';\nimport { TransactionTypesEnum } from '../../types/transactions';\n\nconst noData = {\n  tokenId: '',\n  amount: ''\n};\n\nconst decodeData = (data: string) => {\n  const nonceIndex = 2;\n  const amountIndex = 3;\n  const parts = data.split('@');\n  const decodedParts = parts.map((part, i) =>\n    [nonceIndex, amountIndex].includes(i) ? part : decodePart(part)\n  );\n  return decodedParts;\n};\n\nexport function getTokenFromData(data?: string): {\n  tokenId: string;\n  amount: string;\n  collection?: string;\n  nonce?: string;\n  receiver?: string;\n} {\n  if (!data) {\n    return noData;\n  }\n\n  const isTokenTransfer = data.startsWith(TransactionTypesEnum.ESDTTransfer);\n  const nftTransfer =\n    data.startsWith(TransactionTypesEnum.ESDTNFTTransfer) && data.includes('@');\n\n  if (isTokenTransfer) {\n    const [, encodedToken, encodedAmount] = data.split('@');\n    try {\n      const tokenId = Buffer.from(encodedToken, 'hex').toString('ascii');\n\n      if (!tokenId) {\n        return noData;\n      }\n\n      const amount = new BigNumber(\n        '0x' + encodedAmount.replace('0x', '')\n      ).toString(10);\n\n      return {\n        tokenId,\n        amount\n      };\n    } catch (e) {}\n  }\n\n  if (nftTransfer) {\n    try {\n      const [, /*ESDTNFTTransfer*/ collection, nonce, quantity, receiver] =\n        decodeData(data);\n      if (\n        [collection, nonce, quantity, receiver].every((el) => Boolean(el)) &&\n        addressIsValid(new Address(receiver).bech32())\n      ) {\n        return {\n          tokenId: `${collection}-${nonce}`,\n          amount: new BigNumber(quantity, 16).toString(10),\n          collection,\n          nonce,\n          receiver: new Address(receiver).bech32()\n        };\n      }\n    } catch (err) {}\n  }\n\n  return noData;\n}\nexport default getTokenFromData;\n","export function isTokenTransfer({\n  tokenId,\n  erdLabel\n}: {\n  tokenId: string | undefined;\n  erdLabel: string;\n}) {\n  return Boolean(tokenId && tokenId !== erdLabel);\n}\n\nexport default isTokenTransfer;\n","function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams as any);\n\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n\n  return { nextUrlParams, params };\n}\n\ninterface ReplyUrlType {\n  callbackUrl: string;\n  urlParams?: { [key: string]: string };\n}\n\nexport function builtCallbackUrl({\n  callbackUrl,\n  urlParams = {}\n}: ReplyUrlType) {\n  let url = callbackUrl;\n  if (Object.entries(urlParams).length > 0) {\n    const { search, origin, pathname } = new URL(callbackUrl);\n    const { nextUrlParams } = buildUrlParams(search, urlParams);\n    url = `${origin}${pathname}?${nextUrlParams}`;\n  }\n  return url;\n}\n\nexport default builtCallbackUrl;\n","import {\n  Transaction,\n  TransactionOptions,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport { TransactionServerStatusesEnum } from 'types/enums';\n\nexport function parseTransactionAfterSigning(\n  transaction: Transaction,\n  isLedger = false\n) {\n  // TODO: REMOVE\n  //#region REMOVE when options is available in erdjs getTransactionsFromWalletUrl\n  if (isLedger) {\n    transaction.version = TransactionVersion.withTxHashSignVersion();\n    transaction.options = TransactionOptions.withTxHashSignOptions();\n  }\n  //#endregion\n  const parsedTransaction = transaction.toPlainObject();\n  parsedTransaction.hash = transaction.getHash().toString();\n  parsedTransaction.status = TransactionServerStatusesEnum.pending;\n  return parsedTransaction;\n}\n\nexport default parseTransactionAfterSigning;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport {\n  CustomTransactionInformation,\n  SignedTransactionsBodyType,\n  SignedTransactionsType,\n  SignedTransactionType,\n  TransactionsToSignType\n} from 'types/transactions';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionCompleted\n} from 'utils/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface UpdateSignedTransactionsPayloadType {\n  sessionId: string;\n  status: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  transactions?: SignedTransactionType[];\n}\n\nexport interface MoveTransactionsToSignedStatePayloadType\n  extends SignedTransactionsBodyType {\n  sessionId: string;\n}\n\nexport interface UpdateSignedTransactionStatusPayloadType {\n  sessionId: string;\n  transactionHash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n}\n\nexport interface TransactionsSliceStateType {\n  signedTransactions: SignedTransactionsType;\n  transactionsToSign: TransactionsToSignType | null;\n  signTransactionsError: string | null;\n  customTransactionInformationForSessionId: {\n    [sessionId: string]: CustomTransactionInformation;\n  };\n}\n\nconst initialState: TransactionsSliceStateType = {\n  signedTransactions: {},\n  transactionsToSign: null,\n  signTransactionsError: null,\n  customTransactionInformationForSessionId: {}\n};\n\nconst defaultCustomInformation: CustomTransactionInformation = {\n  signWithoutSending: false,\n  sessionInformation: null,\n  redirectAfterSign: false\n};\n\nexport const transactionsSlice = createSlice({\n  name: 'transactionsSlice',\n  initialState,\n  reducers: {\n    moveTransactionsToSignedState: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<MoveTransactionsToSignedStatePayloadType>\n    ) => {\n      const { sessionId, transactions, errorMessage, status } = action.payload;\n      const customTransactionInformation =\n        state.customTransactionInformationForSessionId?.[sessionId] ||\n        defaultCustomInformation;\n      state.signedTransactions[sessionId] = {\n        transactions,\n        status,\n        errorMessage,\n        customTransactionInformation\n      };\n      if (state?.transactionsToSign?.sessionId === sessionId) {\n        state.transactionsToSign = initialState.transactionsToSign;\n      }\n    },\n\n    clearSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state.signedTransactions[action.payload]) {\n        delete state.signedTransactions[action.payload];\n      }\n    },\n    clearTransactionToSign: (state: TransactionsSliceStateType) => {\n      if (state?.transactionsToSign) {\n        state.transactionsToSign = null;\n      }\n    },\n    updateSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<SignedTransactionsType>\n    ) => {\n      state.signedTransactions = {\n        ...state.signedTransactions,\n        ...action.payload\n      };\n    },\n    updateSignedTransactions: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionsPayloadType>\n    ) => {\n      const { sessionId, status, errorMessage, transactions } = action.payload;\n      const transaction = state.signedTransactions[sessionId];\n      if (transaction != null) {\n        state.signedTransactions[sessionId].status = status;\n        if (errorMessage != null) {\n          state.signedTransactions[sessionId].errorMessage = errorMessage;\n        }\n        if (transactions != null) {\n          state.signedTransactions[sessionId].transactions = transactions;\n        }\n      }\n    },\n    updateSignedTransactionStatus: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionStatusPayloadType>\n    ) => {\n      const {\n        sessionId,\n        status,\n        errorMessage,\n        transactionHash\n      } = action.payload;\n      const transactions = state.signedTransactions?.[sessionId]?.transactions;\n      if (transactions != null) {\n        state.signedTransactions[sessionId].transactions = transactions.map(\n          (transaction) => {\n            if (transaction.hash === transactionHash) {\n              return {\n                ...transaction,\n                status,\n                errorMessage\n              };\n            }\n            return transaction;\n          }\n        );\n        const areTransactionsSuccessful = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) => {\n          return getIsTransactionCompleted(transaction.status);\n        });\n\n        const areTransactionsFailed = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) =>\n          getIsTransactionFailed(transaction.status)\n        );\n        if (areTransactionsSuccessful) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.success;\n        }\n        if (areTransactionsFailed) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.fail;\n        }\n      }\n    },\n    setTransactionsToSign: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<TransactionsToSignType>\n    ) => {\n      state.transactionsToSign = action.payload;\n\n      const { sessionId, customTransactionInformation } = action.payload;\n      state.customTransactionInformationForSessionId[\n        sessionId\n      ] = customTransactionInformation;\n\n      state.signTransactionsError = null;\n    },\n    clearAllTransactionsToSign: (state) => {\n      state.transactionsToSign = initialState.transactionsToSign;\n      state.signTransactionsError = null;\n    },\n    clearAllSignedTransactions: (state) => {\n      state.signedTransactions = initialState.signedTransactions;\n    },\n    setSignTransactionsError: (state, action: PayloadAction<string | null>) => {\n      state.signTransactionsError = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.transactions) {\n        return;\n      }\n\n      const {\n        signedTransactions,\n        customTransactionInformationForSessionId\n      } = action.payload.transactions;\n      const parsedSignedTransactions = Object.entries(\n        signedTransactions\n      ).reduce((acc, [sessionId, transaction]) => {\n        const txTimestamp: any = new Date(sessionId);\n        const expiration: any = new Date();\n        expiration.setHours(expiration.getHours() + 5);\n        const isExpired = expiration - txTimestamp > 0;\n        if (!isExpired) {\n          acc[sessionId] = transaction;\n        }\n        return acc;\n      }, {} as { [key: string]: any });\n      if (customTransactionInformationForSessionId != null) {\n        state.customTransactionInformationForSessionId = customTransactionInformationForSessionId;\n      }\n      if (signedTransactions != null) {\n        state.signedTransactions = parsedSignedTransactions;\n      }\n    });\n  }\n});\n\nexport const {\n  updateSignedTransactionStatus,\n  updateSignedTransactions,\n  setTransactionsToSign,\n  clearAllTransactionsToSign,\n  clearAllSignedTransactions,\n  clearSignedTransaction,\n  clearTransactionToSign,\n  setSignTransactionsError,\n  moveTransactionsToSignedState\n} = transactionsSlice.actions;\n\nexport default transactionsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TransactionsDisplayInfoType } from 'types/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface StateType {\n  [sessionId: string]: TransactionsDisplayInfoType;\n}\n\nexport interface SetTransactionsInfoPayloadType {\n  sessionId: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n}\n\nexport const defaultTransactionErrorMessage = 'Transaction failed';\nexport const defaultTransactionSuccessMessage = 'Transaction successful';\nexport const defaultTransactionProcessingMessage = 'Processing transaction';\nexport const defaultTransactionSubmittedMessage = 'Transaction submitted';\n\nconst initialState: StateType = {};\n\nexport const signTransactionsSlice = createSlice({\n  name: 'transactionsInfo',\n  initialState,\n  reducers: {\n    setTransactionsDisplayInfo(\n      state: StateType,\n      action: PayloadAction<SetTransactionsInfoPayloadType>\n    ) {\n      const { sessionId, transactionsDisplayInfo } = action.payload;\n      if (sessionId != null) {\n        state[sessionId] = {\n          errorMessage:\n            transactionsDisplayInfo?.errorMessage ||\n            defaultTransactionErrorMessage,\n          successMessage:\n            transactionsDisplayInfo?.successMessage ||\n            defaultTransactionSuccessMessage,\n          processingMessage:\n            transactionsDisplayInfo?.processingMessage ||\n            defaultTransactionProcessingMessage,\n          submittedMessage:\n            transactionsDisplayInfo?.submittedMessage ||\n            defaultTransactionSubmittedMessage,\n          transactionDuration: transactionsDisplayInfo?.transactionDuration\n        };\n      }\n    },\n    clearTransactionsInfoForSessionId(\n      state: StateType,\n      action: PayloadAction<string | undefined>\n    ) {\n      if (action.payload != null) {\n        delete state[action.payload];\n      }\n    },\n    clearTransactionsInfo: () => initialState\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  clearTransactionsInfo,\n  setTransactionsDisplayInfo,\n  clearTransactionsInfoForSessionId\n} = signTransactionsSlice.actions;\n\nexport default signTransactionsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { NotificationTypesEnum } from 'types';\nimport { logoutAction } from '../commonActions';\n\nexport interface TxSubmittedModal {\n  sessionId: string;\n  submittedMessage: string;\n}\n\nexport interface NotificationModal {\n  type: NotificationTypesEnum;\n  iconClassName: string;\n  title: string;\n  description: string;\n}\n\nexport interface ModalsSliceState {\n  txSubmittedModal?: TxSubmittedModal;\n  notificationModal?: NotificationModal;\n}\n\nconst initialState: ModalsSliceState = {};\n\nexport const modalsSlice = createSlice({\n  name: 'modalsSlice',\n  initialState,\n  reducers: {\n    setTxSubmittedModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<TxSubmittedModal>\n    ) => {\n      state.txSubmittedModal = action.payload;\n    },\n    setNotificationModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<NotificationModal>\n    ) => {\n      state.notificationModal = action.payload;\n    },\n    clearTxSubmittedModal: (state: ModalsSliceState) => {\n      state.txSubmittedModal = undefined;\n    },\n    clearNotificationModal: (state: ModalsSliceState) => {\n      state.notificationModal = undefined;\n    }\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  setTxSubmittedModal,\n  setNotificationModal,\n  clearTxSubmittedModal,\n  clearNotificationModal\n} = modalsSlice.actions;\n\nexport default modalsSlice.reducer;\n","import isEqual from 'lodash.isequal';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  isEqual\n);\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const accountInfoSelector = (state: RootState) => state.account;\n\nexport const addressSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.address\n);\n\nexport const accountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.account\n);\n\nexport const accountBalanceSelector = createDeepEqualSelector(\n  accountSelector,\n  (account) => account.balance\n);\n\nexport const accountNonceSelector = createDeepEqualSelector(\n  accountSelector,\n  (state) => state?.nonce?.valueOf() || 0\n);\n\nexport const shardSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.shard\n);\n\nexport const ledgerAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.ledgerAccount\n);\n\nexport const walletConnectAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.walletConnectAccount\n);\n\nexport const isAccountLoadingSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.isAccountLoading\n);\n\nexport const isAccountLoadingErrorSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.accountLoadingError\n);\n","import { LoginMethodsEnum } from 'types/enums';\nimport { RootState } from '../store';\nimport { addressSelector } from './accountInfoSelectors';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const loginInfoSelector = (state: RootState) => state.loginInfo;\n\nexport const loginMethodSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.loginMethod\n);\n\nexport const isLoggedInSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  addressSelector,\n  (state, address) =>\n    state.loginMethod != LoginMethodsEnum.none && Boolean(address)\n);\n\nexport const walletConnectLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletConnectLogin\n);\n\nexport const ledgerLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.ledgerLogin\n);\n\nexport const walletLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletLogin\n);\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport throttle from 'lodash.throttle';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { logoutAction } from 'redux/commonActions';\nimport { isLoggedInSelector } from 'redux/selectors/loginInfoSelectors';\nimport { StoreType } from 'redux/store';\nimport { getNewLoginExpiresTimestamp, setLoginExpiresAt } from 'storage/local';\nimport storage from 'utils/storage';\nimport { localStorageKeys } from 'utils/storage/local';\n\nconst whitelistedActions = ['logout'];\n\nconst throttledSetNewExpires = throttle(() => {\n  setLoginExpiresAt(getNewLoginExpiresTimestamp());\n}, 5000);\n\nexport const loginSessionMiddleware: any = (store: StoreType) => (\n  next: (action: PayloadAction) => void\n) => (action: PayloadAction) => {\n  if (whitelistedActions.includes(action.type)) {\n    return next(action);\n  }\n  const appState = store.getState();\n  const loginTimestamp = storage.local.getItem(localStorageKeys.loginExpiresAt);\n  const isLoggedIn = isLoggedInSelector(appState);\n  if (!isLoggedIn) {\n    return next(action);\n  }\n  if (loginTimestamp == null) {\n    return setLoginExpiresAt(getNewLoginExpiresTimestamp());\n  }\n  const now = Date.now();\n  const isExpired = loginTimestamp - now < 0;\n  if (isExpired) {\n    return setTimeout(async () => {\n      const provider = getAccountProvider();\n      console.log('session expired');\n      store.dispatch(logoutAction());\n      try {\n        await provider?.logout({ callbackUrl: '/' });\n      } catch (err) {\n        console.error('error logging out', err);\n      }\n    }, 1000);\n  } else {\n    throttledSetNewExpires();\n  }\n  return next(action);\n};\n\nexport default loginSessionMiddleware;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\n\nimport account from './slices/accountInfoSlice';\nimport loginInfo from './slices/loginInfoSlice';\nimport modals from './slices/modalsSlice';\nimport networkConfig from './slices/networkConfigSlice';\nimport transactionsInfo from './slices/transactionsInfoSlice';\nimport transactions from './slices/transactionsSlice';\n\nconst reducers = {\n  account,\n  networkConfig,\n  loginInfo,\n  modals,\n  transactions,\n  transactionsInfo\n};\n\nif (typeof window !== 'undefined' && window.localStorage != null) {\n  //This allows for this library to be used on other platforms than web, like React Native\n  //without this condition, redux-persist 6+ will throw an error if persist storage fails\n  const sessionStorage = require('redux-persist/lib/storage/session').default;\n\n  //#region custom reducers\n  const transactionsInfoPersistConfig = {\n    key: 'dapp-core-transactionsInfo',\n    version: 1,\n    storage: sessionStorage\n  };\n  const transactionsReducer = {\n    key: 'dapp-core-transactions',\n    version: 1,\n    storage: sessionStorage,\n    blacklist: ['transactionsToSign']\n  };\n  reducers.transactions = persistReducer(\n    transactionsReducer,\n    transactions\n  ) as any;\n  reducers.transactionsInfo = persistReducer(\n    transactionsInfoPersistConfig,\n    transactionsInfo\n  ) as any;\n  //#endregion\n}\n\nconst rootReducer = combineReducers(reducers);\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { Reducer } from 'redux';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  createMigrate\n} from 'redux-persist';\n\nimport { defaultNetwork } from 'redux/slices';\nimport loginSessionMiddleware from './middlewares/loginSessionMiddleware';\nimport rootReducer from './reducers';\n\nlet localStorageReducers: Partial<Reducer> = rootReducer;\n\nconst migrations = {\n  2: (state: PestistedRootState) => {\n    return {\n      ...state,\n      networkConfig: defaultNetwork\n    };\n  }\n};\n\n//This allows for this library to be used on other platforms than web, like React Native\n//without this condition, redux-persist 6+ will throw an error if persist storage fails\nif (typeof window !== 'undefined' && window?.localStorage != null) {\n  const storage = require('redux-persist/lib/storage').default;\n  const persistConfig = {\n    key: 'dapp-core-store',\n    version: 2,\n    storage,\n    whitelist: ['account', 'loginInfo', 'toasts', 'modals', 'networkConfig'],\n    migrate: createMigrate(migrations, { debug: false })\n  };\n  localStorageReducers = persistReducer(persistConfig, rootReducer);\n}\n\nexport const store = configureStore({\n  reducer: localStorageReducers,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          FLUSH,\n          REHYDRATE,\n          PAUSE,\n          PERSIST,\n          PURGE,\n          REGISTER,\n          'accountInfoSlice/setAccount',\n          'accountInfoSlice/setAccountNonce'\n        ],\n        ignoredPaths: ['payload.nonce', 'account.account.nonce']\n      }\n    }).concat(loginSessionMiddleware)\n});\n\nexport const persistor = persistStore(store);\n\nconst storeType = configureStore({ reducer: rootReducer });\ntype PestistedRootState = ReturnType<typeof store.getState>;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type StoreType = typeof storeType;\nexport type RootState = ReturnType<typeof storeType.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { ChainID } from '@elrondnetwork/erdjs';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const networkConfigSelector = (state: RootState) => state.networkConfig;\n\nexport const chainIDSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => new ChainID(state.chainID)\n);\n\nexport const walletConnectBridgeAddressSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectBridgeAddress\n);\n\nexport const walletConnectDeepLinkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectDeepLink\n);\n\nexport const networkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network\n);\n\nexport const apiNetworkSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.apiAddress\n);\n\nexport const explorerAddressSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.explorerAddress\n);\n\nexport const egldLabelSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.egldLabel\n);\n","import {\n  Transaction,\n  GasLimit,\n  GasPrice,\n  Address,\n  TransactionPayload,\n  Balance,\n  ChainID,\n  Nonce,\n  TransactionOptions,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport {\n  gasLimit as defaultGasLimit,\n  gasPrice,\n  version as defaultVersion\n} from 'constants/index';\nimport { RawTransactionType } from 'types/transactions';\nimport { isStringBase64 } from 'utils/decoders/base64Utils';\n\nexport function newTransaction(rawTransaction: RawTransactionType) {\n  const { data } = rawTransaction;\n  const dataPayload = isStringBase64(data)\n    ? TransactionPayload.fromEncoded(data)\n    : new TransactionPayload(data);\n  return new Transaction({\n    value: Balance.fromString(rawTransaction.value),\n    data: dataPayload,\n    nonce: new Nonce(rawTransaction.nonce),\n    receiver: new Address(rawTransaction.receiver),\n    sender: new Address(rawTransaction.sender),\n    gasLimit: new GasLimit(rawTransaction.gasLimit ?? defaultGasLimit),\n    gasPrice: new GasPrice(rawTransaction.gasPrice ?? gasPrice),\n    chainID: new ChainID(rawTransaction.chainID),\n    version: new TransactionVersion(rawTransaction.version ?? defaultVersion),\n    ...(rawTransaction.options\n      ? { options: new TransactionOptions(rawTransaction.options) }\n      : {})\n  });\n}\n\nexport default newTransaction;\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport newTransaction from 'models/newTransaction';\nimport {\n  CustomTransactionInformation,\n  RawTransactionType,\n  SignedTransactionsType\n} from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils/transactions';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport interface TransactionsToSignReturnType {\n  callbackRoute?: string;\n  sessionId: string;\n  transactions: Transaction[];\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport const transactionsSelectors = (state: RootState) => state.transactions;\n\nexport const signedTransactionsSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signedTransactions as SignedTransactionsType\n);\n\nexport const signTransactionsErrorSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signTransactionsError\n);\n\nconst selectTxByStatus = (txStatusVerifier: typeof getIsTransactionPending) => (\n  signedTransactions: SignedTransactionsType\n) =>\n  Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n    if (txStatusVerifier(txBody.status)) {\n      acc[sessionId] = txBody;\n    }\n    return acc;\n  }, {} as SignedTransactionsType);\n\nexport const pendingSignedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionPending)\n);\n\nexport const successfulTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionSuccessful)\n);\n\nexport const completedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionCompleted)\n);\n\nexport const failedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionFailed)\n);\n\nexport const timedOutTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionTimedOut)\n);\n\nexport const transactionsToSignSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state): TransactionsToSignReturnType | null => {\n    if (state?.transactionsToSign == null) {\n      return null;\n    }\n    return {\n      ...state.transactionsToSign,\n      transactions:\n        state?.transactionsToSign?.transactions.map((tx: RawTransactionType) =>\n          newTransaction(tx)\n        ) || []\n    };\n  }\n);\n\nexport const transactionStatusSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (\n    signedTransactions: SignedTransactionsType,\n    transactionSessionId: string | null\n  ) =>\n    transactionSessionId != null\n      ? signedTransactions?.[transactionSessionId] || {}\n      : {}\n);\n","import { createDeepEqualSelector } from 'redux/selectors/helpers';\nimport {\n  defaultTransactionErrorMessage,\n  defaultTransactionProcessingMessage,\n  defaultTransactionSuccessMessage\n} from 'redux/slices';\nimport { RootState } from '../store';\n\nconst defaultTransactionInfo = {\n  errorMessage: defaultTransactionErrorMessage,\n  successMessage: defaultTransactionSuccessMessage,\n  processingMessage: defaultTransactionProcessingMessage\n};\n\nexport const transactionsInfoSelectors = (state: RootState) =>\n  state.transactionsInfo;\n\nexport const transactionDisplayInfoSelector = createDeepEqualSelector(\n  transactionsInfoSelectors,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (transactionsDisplayInfo: any, transactionSessionId: string | null) =>\n    transactionSessionId != null\n      ? transactionsDisplayInfo?.[Number(transactionSessionId)] ||\n        defaultTransactionInfo\n      : defaultTransactionInfo\n);\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const modalsSliceSelector = (state: RootState) => state.modals;\n\nexport const txSubmittedModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.txSubmittedModal\n);\n\nexport const notificationModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.notificationModal\n);\n","import { isLoggedInSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getIsLoggedIn() {\n  return isLoggedInSelector(store.getState());\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { getProviderType } from 'providers/utils';\nimport { logoutAction } from 'redux/commonActions';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types';\nimport { getIsLoggedIn } from 'utils/getIsLoggedIn';\n\nexport async function logout(\n  callbackUrl?: string,\n  onRedirect?: (callbackUrl?: string) => void\n) {\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n  const isLoggedIn = getIsLoggedIn();\n  if (!isLoggedIn || !provider) {\n    return;\n  }\n\n  store.dispatch(logoutAction());\n\n  try {\n    const isWalletProvider = providerType === LoginMethodsEnum.wallet;\n    const needsCallbackUrl = isWalletProvider && !callbackUrl;\n    const url = needsCallbackUrl ? window.location.origin : callbackUrl;\n\n    await provider.logout({ callbackUrl: url });\n    if (callbackUrl && providerType !== LoginMethodsEnum.wallet) {\n      if (typeof onRedirect === 'function') {\n        onRedirect(callbackUrl);\n      } else {\n        window.location.href = callbackUrl;\n      }\n    }\n  } catch (err) {\n    console.error('error logging out', err);\n  }\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { getProviderType } from 'providers/utils';\n\nexport function getAccountProviderType() {\n  const provider = getAccountProvider();\n  return getProviderType(provider);\n}\n","import { egldLabelSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getEgldLabel() {\n  return egldLabelSelector(store.getState());\n}\n","import { getAccountProviderType } from './getAccountProviderType';\n\nexport function getIsProviderEqualTo(comparedProviderType: any) {\n  const providerType = getAccountProviderType();\n  return providerType === comparedProviderType;\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport {\n  addressSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getIsProviderEqualTo } from 'utils/network';\nimport { addressIsValid } from './addressIsValid';\n\nexport function getAddress(): Promise<string> {\n  const { search } = window.location;\n  const appState = store.getState();\n  const provider = getAccountProvider();\n  const address = addressSelector(appState);\n  const loggedIn = isLoggedInSelector(appState);\n  const walletLogin = walletLoginSelector(appState);\n\n  if (!provider) {\n    throw 'provider not initialized';\n  }\n\n  if (getIsProviderEqualTo(LoginMethodsEnum.ledger) && loggedIn) {\n    return new Promise((resolve) => {\n      resolve(address);\n    });\n  }\n\n  return !getIsProviderEqualTo(LoginMethodsEnum.none) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.wallet) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.extra)\n    ? // TODO: does not take into account ledger locked see link for details:\n      // https://github.com/ElrondNetwork/dapp/blob/d5c57695a10055f20d387ba064b6843606789ee9/src/helpers/accountMethods.tsx#L21\n      provider.getAddress()\n    : new Promise((resolve) => {\n        if (walletLogin != null) {\n          const urlSearchParams = new URLSearchParams(search);\n          const params = Object.fromEntries(urlSearchParams as any);\n          if (addressIsValid(params.address)) {\n            resolve(params.address);\n          }\n        }\n        if (loggedIn) {\n          resolve(address);\n        }\n        resolve('');\n      });\n}\n\nexport default getAddress;\n","import { ProxyProvider } from '@elrondnetwork/erdjs';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { NetworkType } from 'types';\n\nlet proxyProvider: ProxyProvider | null = null;\n\nexport function initializeProxyProvider(networkConfig?: NetworkType) {\n  const initializationNetworkConfig =\n    networkConfig || networkSelector(store.getState());\n  proxyProvider = new ProxyProvider(initializationNetworkConfig.apiAddress, {\n    timeout: Number(initializationNetworkConfig.apiTimeout)\n  });\n  return proxyProvider;\n}\n\nexport function getProxyProvider(): ProxyProvider {\n  if (proxyProvider == null) {\n    return initializeProxyProvider();\n  } else {\n    return proxyProvider;\n  }\n}\n\nexport async function getAccountFromProxyProvider(address?: string) {\n  try {\n    const proxy = getProxyProvider();\n    return await proxy.getAccount(new Address(address));\n  } catch (err) {\n    return null;\n  }\n}\n\nexport async function getNetworkConfigFromProxyProvider() {\n  try {\n    return await getProxyProvider().getNetworkConfig();\n  } catch (err) {\n    console.error('error fetching network config');\n    return null;\n  }\n}\n","import { getAccountFromProxyProvider } from 'providers/proxyProvider';\n\nexport function getAccount(address?: string) {\n  return getAccountFromProxyProvider(address);\n}\n\nexport default getAccount;\n","import { setAccountNonce } from 'redux/slices';\nimport { store } from 'redux/store';\n\n// this is is needed to allow the users to set the nonce dynamically from outside the library\n// without getting access to store.dispatch function\nexport function setNonce(nonce: number) {\n  store.dispatch(setAccountNonce(nonce));\n}\n","import { AccountOnNetwork } from '@elrondnetwork/erdjs';\nimport { accountNonceSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getLatestNonce(account: AccountOnNetwork | null) {\n  const appState = store.getState();\n  const currentAccountNonce = accountNonceSelector(appState);\n  if (!account) {\n    return currentAccountNonce;\n  }\n  return currentAccountNonce && !isNaN(currentAccountNonce)\n    ? Math.max(currentAccountNonce, account.nonce.valueOf())\n    : account.nonce.valueOf();\n}\n\nexport default getLatestNonce;\n","import { accountSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { getAccount } from './getAccount';\n\nexport async function getAccountBalance(address?: string) {\n  let accountAddress = address;\n  if (accountAddress == null) {\n    const account = accountSelector(store.getState());\n    accountAddress = account.address;\n  }\n  const account = await getAccount(accountAddress);\n  if (account == null) {\n    throw 'Could not read account, user not logged in';\n  }\n  return account?.balance?.toString();\n}\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { setAccount } from 'redux/slices';\nimport { store } from 'redux/store';\nimport getAccount from './getAccount';\nimport getAddress from './getAddress';\nimport getLatestNonce from './getLatestNonce';\n\nconst setNewAccount = async () => {\n  try {\n    const address = await getAddress();\n    try {\n      const account = await getAccount(address);\n      if (account != null) {\n        const accountData = {\n          balance: account.balance.toString(),\n          address,\n          nonce: getLatestNonce(account)\n        };\n        store.dispatch(setAccount(accountData));\n        return accountData;\n      }\n    } catch (e) {\n      console.error('Failed getting account ', e);\n    }\n  } catch (e) {\n    console.error('Failed getting address ', e);\n  }\n  return null;\n};\n\nexport async function refreshAccount() {\n  const provider = getAccountProvider();\n  if (provider == null) {\n    throw 'Provider not initialized';\n  }\n  if (provider.isInitialized()) {\n    return setNewAccount();\n  } else {\n    try {\n      const initialized = await provider.init();\n      if (!initialized) {\n        return;\n      }\n      return setNewAccount();\n    } catch (e) {\n      console.error('Failed initializing provider ', e);\n    }\n  }\n  return undefined;\n}\n","const isAddressOfMetachain = (pubKey: Buffer) => {\n  // prettier-ignore\n  const metachainPrefix = Buffer.from([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ]);\n  const pubKeyPrefix = pubKey.slice(0, metachainPrefix.length);\n  if (pubKeyPrefix.equals(metachainPrefix)) {\n    return true;\n  }\n  const zeroAddress = Buffer.alloc(32).fill(0);\n  return pubKey.equals(zeroAddress);\n};\nexport const getShardOfAddress = (hexPubKey: any) => {\n  try {\n    const numShards = 3;\n    const maskHigh = parseInt('11', 2);\n    const maskLow = parseInt('01', 2);\n    const pubKey = Buffer.from(hexPubKey, 'hex');\n    const lastByteOfPubKey = pubKey[31];\n    if (isAddressOfMetachain(pubKey)) {\n      return 4294967295;\n    }\n    let shard = lastByteOfPubKey & maskHigh;\n    if (shard > numShards - 1) {\n      shard = lastByteOfPubKey & maskLow;\n    }\n    return shard;\n  } catch (err) {\n    return -1;\n  }\n};\n","import { SignableMessage, Address } from '@elrondnetwork/erdjs';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { getAddress } from 'utils/account/getAddress';\n\ninterface SignMessageType {\n  message: string;\n  callbackRoute?: string;\n}\n\nexport async function signMessage({ message, callbackRoute }: SignMessageType) {\n  const address = await getAddress();\n  const provider = getAccountProvider();\n\n  const callbackUrl = `${window.location.origin}${callbackRoute}`;\n  const signableMessage = new SignableMessage({\n    address: new Address(address),\n    message: Buffer.from(message, 'ascii')\n  });\n  const signedMessage = await provider.signMessage(signableMessage, {\n    callbackUrl: encodeURIComponent(callbackUrl)\n  });\n\n  return signedMessage;\n}\n\nexport default signMessage;\n","export const logarithmicRest = (position: number) => {\n  const minp = 0;\n  const maxp = 10;\n\n  const minv = Math.log(0.005);\n  const maxv = Math.log(2);\n\n  const scale = (maxv - minv) / (maxp - minp);\n\n  return Math.exp(minv + scale * (position - minp));\n};\n","import BigNumber from 'bignumber.js';\n\nexport const stringIsInteger = (\n  integer: string,\n  positiveNumbersOnly = true\n) => {\n  const stringInteger = String(integer);\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n  const bNparsed = new BigNumber(stringInteger);\n  const limit = positiveNumbersOnly ? 0 : -1;\n  return (\n    bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit\n  );\n};\n","import BigNumber from 'bignumber.js';\n\nexport const stringIsFloat = (amount: string) => {\n  // tslint:disable-next-line\n  let [wholes, decimals] = amount.split('.');\n  if (decimals) {\n    while (decimals.charAt(decimals.length - 1) === '0') {\n      decimals = decimals.slice(0, -1);\n    }\n  }\n  const number = decimals ? [wholes, decimals].join('.') : wholes;\n  const bNparsed = new BigNumber(number);\n  return bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\n};\n","const esdtParts = 2;\nconst nftParts = 3;\n\nconst defaultResult = {\n  isEsdt: false,\n  isNft: false,\n  isEgld: false\n};\n\nexport function getIdentifierType(identifier?: string): {\n  isEsdt: boolean;\n  isNft: boolean;\n  isEgld: boolean;\n} {\n  const parts = identifier?.split('-').length;\n\n  if (parts === esdtParts) {\n    return {\n      ...defaultResult,\n      isEsdt: true\n    };\n  }\n  if (parts === nftParts) {\n    return {\n      ...defaultResult,\n      isNft: true\n    };\n  }\n  return {\n    ...defaultResult,\n    isEgld: true\n  };\n}\nexport default getIdentifierType;\n","export function pipe<ValueType>(previous: ValueType) {\n  return {\n    if: function (condition: boolean) {\n      if (condition) {\n        return {\n          then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n            // if a callback is passed, callback is executed with previous value\n            newValue instanceof Function\n              ? pipe(newValue(previous))\n              : pipe(newValue)\n        };\n      } else {\n        return {\n          then: () => pipe(previous)\n        };\n      }\n    },\n\n    then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n      newValue instanceof Function ? pipe(newValue(previous)) : pipe(newValue),\n\n    valueOf: function () {\n      return previous;\n    }\n  };\n}\nexport default pipe;\n","import { Balance, Token } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport { stringIsInteger } from 'utils/validation';\nimport pipe from './pipe';\n\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nexport function denominate({\n  input,\n  denomination = configDenomination,\n  decimals = configDecimals,\n  showLastNonZeroDecimal = true,\n  showIsLessThanDecimalsLabel = false,\n  addCommas = false\n}: {\n  input: string | Balance;\n  denomination?: number;\n  decimals?: number;\n  showIsLessThanDecimalsLabel?: boolean;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}) {\n  const token = new Token({ decimals: denomination });\n\n  if (typeof input === 'string' && !stringIsInteger(input, false)) {\n    throw new Error('Invalid input');\n  }\n\n  return (\n    pipe(input as string)\n      // denominate\n      .if(typeof input === 'string')\n      .then(() =>\n        new Balance(token, 0, new BigNumber(input as string)).toDenominated()\n      )\n\n      .if(input.constructor === Balance)\n      .then(() => (input as Balance).toDenominated())\n\n      // format\n      .then((current) => {\n        const bnBalance = new BigNumber(current);\n\n        if (bnBalance.isZero()) {\n          return '0';\n        }\n        const balance = bnBalance.toString(10);\n        const [integerPart, decimalPart] = balance.split('.');\n        const bNdecimalPart = new BigNumber(decimalPart || 0);\n\n        const decimalPlaces = pipe(0)\n          .if(Boolean(decimalPart && showLastNonZeroDecimal))\n          .then(() => Math.max(decimalPart.length, decimals))\n\n          .if(bNdecimalPart.isZero() && !showLastNonZeroDecimal)\n          .then(0)\n\n          .if(Boolean(decimalPart && !showLastNonZeroDecimal))\n          .then(() => Math.min(decimalPart.length, decimals))\n\n          .valueOf();\n\n        const shownDecimalsAreZero =\n          decimalPart &&\n          decimals >= 1 &&\n          decimals <= decimalPart.length &&\n          bNdecimalPart.isGreaterThan(0) &&\n          new BigNumber(decimalPart.substring(0, decimals)).isZero();\n\n        const formatted = bnBalance.toFormat(decimalPlaces);\n\n        const formattedBalance = pipe(balance)\n          .if(addCommas)\n          .then(formatted)\n\n          .if(Boolean(shownDecimalsAreZero))\n          .then((current) => {\n            const integerPartZero = new BigNumber(integerPart).isZero();\n            const [numericPart, decimalSide] = current.split('.');\n\n            const zeroPlaceholders = new Array(decimals - 1).fill(0);\n            const zeros = [...zeroPlaceholders, 0].join('');\n            const minAmount = [...zeroPlaceholders, 1].join(''); // 00..1\n\n            if (!integerPartZero) {\n              return `${numericPart}.${zeros}`;\n            }\n\n            if (showIsLessThanDecimalsLabel) {\n              return `<${numericPart}.${minAmount}`;\n            }\n\n            return `${numericPart}.${decimalSide}`;\n          })\n\n          .if(Boolean(!shownDecimalsAreZero && decimalPart))\n          .then((current) => {\n            if (showLastNonZeroDecimal) {\n              return current;\n            }\n\n            const [numericPart] = current.split('.');\n            const decimalSide = decimalPart.substring(0, decimalPlaces);\n\n            if (!decimalSide) {\n              return numericPart;\n            }\n\n            return `${numericPart}.${decimalSide}`;\n          })\n\n          .valueOf();\n\n        return formattedBalance;\n      })\n\n      .valueOf()\n  );\n}\nexport default denominate;\n","import {\n  Transaction,\n  Nonce,\n  Balance,\n  GasPrice,\n  GasLimit,\n  TransactionPayload,\n  ChainID,\n  TransactionVersion,\n  Address,\n  NetworkConfig,\n  GasPriceModifier\n} from '@elrondnetwork/erdjs';\nimport { stringIsFloat, stringIsInteger } from 'utils/validation';\n\ninterface CalculateFeeLimitType {\n  gasLimit: string;\n  gasPrice: string;\n  data: string;\n  gasPerDataByte: string;\n  gasPriceModifier: string;\n  chainId: string;\n  minGasLimit?: string;\n  defaultGasPrice?: string;\n}\nconst placeholderData = {\n  from: 'erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa',\n  to: 'erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa'\n};\nexport function calculateFeeLimit({\n  minGasLimit = '50000',\n  gasLimit,\n  gasPrice,\n  data: inputData,\n  gasPerDataByte,\n  gasPriceModifier,\n  defaultGasPrice = '1000000000',\n  chainId\n}: CalculateFeeLimitType) {\n  const data = inputData || '';\n  const validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\n  const validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\n  const transaction = new Transaction({\n    nonce: new Nonce(0),\n    value: Balance.Zero(),\n    receiver: new Address(placeholderData.to),\n    gasPrice: new GasPrice(parseInt(validGasPrice)),\n    gasLimit: new GasLimit(parseInt(validGasLimit)),\n    data: new TransactionPayload(data.trim()),\n    chainID: new ChainID(chainId),\n    version: new TransactionVersion(1)\n  });\n\n  const networkConfig = new NetworkConfig();\n  networkConfig.MinGasLimit = new GasLimit(parseInt(minGasLimit));\n  networkConfig.GasPerDataByte = parseInt(gasPerDataByte);\n  networkConfig.GasPriceModifier = new GasPriceModifier(\n    parseFloat(gasPriceModifier)\n  );\n  try {\n    const bNfee = transaction.computeFee(networkConfig);\n    const fee = bNfee.toString(10);\n    return fee;\n  } catch (err) {\n    return '0';\n  }\n}\n","export const getUsdValue = ({\n  amount,\n  usd,\n  decimals = 2\n}: {\n  amount: string;\n  usd: number;\n  decimals?: number;\n}) => {\n  const sum = (parseFloat(amount) * usd).toFixed(decimals);\n  return parseFloat(sum).toLocaleString('en', {\n    maximumFractionDigits: decimals,\n    minimumFractionDigits: decimals\n  });\n};\n","import { Address, TransactionPayload } from '@elrondnetwork/erdjs';\nimport { TypesOfSmartContractCallsEnum } from 'types';\nimport { addressIsValid } from './account';\nimport { isStringBase64 } from './decoders';\n\nexport const ESDTTransferTypes = [\n  'ESDTNFTTransfer',\n  'ESDTNFTBurn',\n  'ESDTNFTAddQuantity',\n  'ESDTNFTCreate',\n  'MultiESDTNFTTransfer',\n  'ESDTTransfer',\n  'ESDTBurn',\n  'ESDTLocalMint',\n  'ESDTLocalBurn',\n  'ESDTWipe',\n  'ESDTFreeze'\n];\n\nexport function isContract(\n  receiver: string,\n  sender?: string,\n  data = ''\n): boolean {\n  const isValid = addressIsValid(receiver);\n\n  if (!isValid) {\n    return false;\n  }\n\n  const isContract = new Address(receiver).isContractAddress();\n\n  if (isContract) {\n    return true;\n  }\n\n  const extractedAddress = getAddressFromDataField({ receiver, data });\n\n  if (!extractedAddress) {\n    return false;\n  }\n\n  const isExtractedAddressContractCall = new Address(\n    extractedAddress\n  ).isContractAddress();\n\n  return (\n    isExtractedAddressContractCall || isSelfESDTContract(receiver, sender, data)\n  );\n}\n\nconst isHexValidCharacters = (str: string) => {\n  return str.toLowerCase().match(/[0-9a-f]/g);\n};\nconst isHexValidLength = (str: string) => {\n  return str.length % 2 === 0;\n};\n\nexport function isSelfESDTContract(\n  receiver: string,\n  sender?: string,\n  data?: string\n) {\n  const parts = data?.split('@');\n  if (parts == null) {\n    return false;\n  }\n  const [type, ...restParts] = parts;\n  const isSelfTransaction =\n    sender != null && receiver != null && receiver === sender;\n  const isCorrectESDTType = ESDTTransferTypes.includes(type);\n  const areDataPartsValid = restParts.every(\n    (part) => isHexValidCharacters(part) && isHexValidLength(part)\n  );\n  return isSelfTransaction && isCorrectESDTType && areDataPartsValid;\n}\n\nexport function getAddressFromDataField({\n  receiver,\n  data\n}: {\n  receiver: string;\n  data: string;\n}) {\n  try {\n    if (!data) {\n      return receiver;\n    }\n    const parsedData = isStringBase64(data)\n      ? TransactionPayload.fromEncoded(data).toString()\n      : data;\n\n    const addressIndex = getAddressIndex(parsedData);\n\n    const parts = parsedData.split('@');\n    return addressIndex > -1 ? parts[addressIndex] : receiver;\n  } catch (err) {\n    console.log(err);\n    return;\n  }\n}\n\nfunction getAddressIndex(data: string) {\n  if (data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)) {\n    return 1;\n  }\n  if (data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)) {\n    return 4;\n  }\n  return -1;\n}\n\nexport default isContract;\n","let classnames: any = {};\ntry {\n  classnames = require('classnames');\n} catch (err) {}\n\nexport default classnames;\n","import classNames from 'optionalPackages/classnames';\n\nexport function getGeneratedClasses(\n  className: string,\n  shouldRenderDefaultCss: boolean,\n  defaultStyles: Record<string, string>\n) {\n  return Object.entries(defaultStyles).reduce(\n    (acc, [key, defaultClassNames]) => {\n      acc[key] = classNames?.(\n        `${className}_${key}`,\n        shouldRenderDefaultCss && (defaultClassNames as string)\n      );\n      return acc;\n    },\n    {} as Record<string, string>\n  );\n}\n","export const wrapperClassName = 'dapp-core-ui-component';\nexport default wrapperClassName;\n","import React from 'react';\nimport {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook\n} from 'react-redux';\n\nconst defaultContextValue: any = null;\nexport const DappCoreContext = React.createContext(defaultContextValue);\n\nexport const useStore = createStoreHook(DappCoreContext);\nexport const useDispatch = createDispatchHook(DappCoreContext);\nexport const useSelector = createSelectorHook(DappCoreContext);\n","import { useState } from 'react';\nimport { ExtensionProvider } from '@elrondnetwork/erdjs';\nimport { setAccountProvider } from 'providers/accountProvider';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector } from 'redux/selectors';\nimport { setTokenLogin } from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseExtensionLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport type UseExtensionLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useExtensionLogin = ({\n  callbackRoute,\n  token,\n  redirectAfterLogin = false\n}: UseExtensionLoginPropsType): UseExtensionLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const dispatch = useDispatch();\n\n  async function initiateLogin() {\n    setIsLoading(true);\n    const provider: ExtensionProvider = ExtensionProvider.getInstance();\n\n    try {\n      const isSuccessfullyInitialized: boolean = await provider.init();\n\n      if (!isSuccessfullyInitialized) {\n        console.warn(\n          'Something went wrong trying to redirect to wallet login..'\n        );\n        return;\n      }\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const providerLoginData = {\n        callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(providerLoginData);\n\n      setAccountProvider(provider);\n\n      const { signature, address } = provider.account;\n      if (signature) {\n        dispatch(\n          setTokenLogin({\n            loginToken: String(token),\n            signature\n          })\n        );\n      }\n      dispatch(\n        loginAction({ address, loginMethod: LoginMethodsEnum.extension })\n      );\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (error) {\n      console.error('error loging in', error);\n      // TODO: can be any or typed error\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = Boolean(error);\n  return [\n    initiateLogin,\n    {\n      loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n","import { useState } from 'react';\nimport { newWalletProvider } from 'providers/utils';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, networkSelector } from 'redux/selectors';\nimport { setWalletLogin } from 'redux/slices';\nimport { store } from 'redux/store';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseWebWalletLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n}\n\nexport type UseWebWalletLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useWebWalletLogin = ({\n  callbackRoute,\n  token\n}: UseWebWalletLoginPropsType): UseWebWalletLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  async function initiateLogin() {\n    try {\n      setIsLoading(true);\n      const appState = store.getState();\n      const network = networkSelector(appState);\n      const provider = newWalletProvider(network.walletAddress);\n\n      const now = new Date();\n      const expires: number = now.setMinutes(now.getMinutes() + 3) / 1000;\n      const walletLoginData = {\n        data: {},\n        expires: expires\n      };\n\n      store.dispatch(setWalletLogin(walletLoginData));\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const loginData = {\n        callbackUrl: callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(loginData);\n    } catch (error) {\n      console.error(error);\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = error != null;\n\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n\nexport default useWebWalletLogin;\n","import { useEffect, useState } from 'react';\nimport { HWProvider } from '@elrondnetwork/erdjs';\nimport { setAccountProvider } from 'providers/accountProvider';\nimport { getProxyProvider } from 'providers/proxyProvider';\nimport { getLedgerConfiguration } from 'providers/utils';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, ledgerAccountSelector } from 'redux/selectors';\nimport {\n  updateLedgerAccount,\n  setLedgerLogin,\n  setTokenLogin,\n  setLedgerAccount\n} from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getLedgerErrorCodes, optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\nconst failInitializeErrorText =\n  'Could not initialise ledger app, make sure Elrond app is open';\n\nconst defaultAddressesPerPage = 10;\n\nexport interface UseLedgerLoginPropsType {\n  callbackRoute: string;\n  addressesPerPage?: number;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface SelectedAddress {\n  address: string;\n  index: number;\n}\n\nexport interface LedgerLoginHookCustomStateType {\n  accounts: string[];\n  showAddressList: boolean;\n  startIndex: number;\n  selectedAddress: SelectedAddress | null;\n  version: string;\n  contractDataEnabled: boolean;\n\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onSelectAddress: (address: SelectedAddress | null) => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nexport type LedgerLoginHookReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType,\n  LedgerLoginHookCustomStateType\n];\n\nexport function useLedgerLogin({\n  callbackRoute,\n  token,\n  addressesPerPage = defaultAddressesPerPage,\n  redirectAfterLogin = false\n}: UseLedgerLoginPropsType): LedgerLoginHookReturnType {\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const proxy = getProxyProvider();\n  const dispatch = useDispatch();\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hwWalletP = new HWProvider(proxy);\n  const [startIndex, setStartIndex] = useState(0);\n  const [accounts, setAccounts] = useState<string[]>([]);\n  const [version, setVersion] = useState('');\n  const [contractDataEnabled, setContractDataEnabled] = useState(false);\n  const [\n    selectedAddress,\n    setSelectedAddress\n  ] = useState<SelectedAddress | null>(null);\n\n  const [showAddressList, setShowAddressList] = useState(false);\n\n  function dispatchLoginActions({\n    provider,\n    address,\n    index,\n    signature\n  }: {\n    provider: HWProvider;\n    address: string;\n    index: number;\n    signature?: string;\n  }) {\n    setAccountProvider(provider);\n\n    dispatch(setLedgerLogin({ index, loginType: LoginMethodsEnum.ledger }));\n\n    if (signature) {\n      dispatch(\n        setTokenLogin({\n          loginToken: String(token),\n          signature\n        })\n      );\n    }\n    dispatch(loginAction({ address, loginMethod: LoginMethodsEnum.ledger }));\n    optionalRedirect(callbackRoute, redirectAfterLogin);\n  }\n\n  const onLoginFailed = (err: any, customMessage?: string) => {\n    const { errorMessage } = getLedgerErrorCodes(err);\n\n    if (errorMessage) {\n      setError(errorMessage + customMessage);\n    }\n    setIsLoading(false);\n    console.warn(err);\n    dispatch(setLedgerAccount(null));\n  };\n\n  async function loginUser(hwWalletProvider: HWProvider) {\n    if (selectedAddress == null) {\n      return false;\n    }\n    const { index } = selectedAddress;\n\n    if (token) {\n      try {\n        const loginInfo = await hwWalletProvider.tokenLogin({\n          token: Buffer.from(`${token}{}`),\n          addressIndex: index\n        });\n        dispatchLoginActions({\n          address: loginInfo.address,\n          provider: hwWalletProvider,\n          index: index,\n          signature: loginInfo.signature.hex()\n        });\n      } catch (err) {\n        onLoginFailed(err, '. Update Elrond App to continue.');\n      }\n    } else {\n      try {\n        const address = await hwWalletProvider.login({ addressIndex: index });\n        dispatchLoginActions({\n          address,\n          provider: hwWalletProvider,\n          index\n        });\n      } catch (err) {\n        onLoginFailed(err);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async function onConfirmSelectedAddress() {\n    try {\n      setIsLoading(true);\n      if (selectedAddress == null) {\n        return false;\n      }\n      if (ledgerAccount) {\n        dispatch(updateLedgerAccount(selectedAddress));\n      } else {\n        dispatch(\n          setLedgerAccount({\n            ...selectedAddress,\n            version,\n            hasContractDataEnabled: contractDataEnabled\n          })\n        );\n      }\n\n      const hwWalletProvider = new HWProvider(proxy);\n      const initialized = await hwWalletProvider.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        return false;\n      }\n      setIsLoading(false);\n      await loginUser(hwWalletProvider);\n    } catch (err) {\n      const { errorMessage } = getLedgerErrorCodes(err);\n      if (errorMessage) {\n        setError(errorMessage);\n      }\n      console.warn(failInitializeErrorText, err);\n    } finally {\n      setIsLoading(false);\n    }\n    setShowAddressList(false);\n    return true;\n  }\n\n  async function fetchAccounts() {\n    try {\n      setIsLoading(true);\n      const initialized = await hwWalletP.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        setIsLoading(false);\n        return;\n      }\n      const accounts = await hwWalletP.getAccounts(\n        startIndex,\n        addressesPerPage\n      );\n      const ledgerData = await getLedgerConfiguration(hwWalletP);\n      setVersion(ledgerData.version);\n      setContractDataEnabled(ledgerData.dataEnabled);\n      setAccounts(accounts);\n      setIsLoading(false);\n    } catch (err) {\n      const { errorMessage, defaultErrorMessage } = getLedgerErrorCodes(err);\n      setError(errorMessage ?? defaultErrorMessage);\n      console.error('error', err);\n      setIsLoading(false);\n    }\n  }\n\n  async function onStartLogin() {\n    setError('');\n    try {\n      setIsLoading(true);\n      if (ledgerAccount != null) {\n        const hwWalletP = new HWProvider(proxy);\n        const initialized = await hwWalletP.init();\n        if (!initialized) {\n          console.warn(failInitializeErrorText);\n          return;\n        }\n        const address = await hwWalletP.login({\n          addressIndex: selectedAddress?.index\n        });\n        setAccountProvider(hwWalletP);\n        dispatch(\n          loginAction({ address, loginMethod: LoginMethodsEnum.ledger })\n        );\n        optionalRedirect(callbackRoute, redirectAfterLogin);\n      } else {\n        if (accounts?.length > 0) {\n          setShowAddressList(true);\n        } else {\n          await fetchAccounts();\n          setShowAddressList(true);\n        }\n      }\n    } catch (error) {\n      console.error('error ', error);\n      const { defaultErrorMessage } = getLedgerErrorCodes();\n      setError(defaultErrorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function onSelectAddress(newSelectedAddress: SelectedAddress | null) {\n    setSelectedAddress(newSelectedAddress);\n  }\n\n  function onGoToNextPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => current + 1);\n  }\n\n  function onGoToPrevPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => (current === 0 ? 0 : current - 1));\n  }\n\n  useEffect(() => {\n    fetchAccounts();\n  }, [startIndex]);\n\n  const loginFailed = Boolean(error);\n\n  return [\n    onStartLogin,\n    {\n      loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed\n    },\n    {\n      accounts,\n      showAddressList,\n      startIndex,\n      selectedAddress,\n      version,\n      contractDataEnabled,\n\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress\n    }\n  ];\n}\n","import { useRef, useEffect } from 'react';\n\nexport function useUpdateEffect(effect: any, dependencies: any[] = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { WalletConnectProvider } from '@elrondnetwork/erdjs';\n\nimport { useUpdateEffect } from 'hooks/useUpdateEffect';\nimport {\n  getAccountProvider,\n  setAccountProvider\n} from 'providers/accountProvider';\nimport { getProxyProvider } from 'providers/proxyProvider';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  walletConnectBridgeAddressSelector,\n  walletConnectDeepLinkSelector\n} from 'redux/selectors';\nimport {\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletConnectLogin\n} from 'redux/slices';\n\nimport { LoginMethodsEnum } from 'types/enums';\nimport { logout } from 'utils';\nimport { optionalRedirect } from 'utils/internal';\nimport Timeout = NodeJS.Timeout;\nimport { LoginHookGenericStateType } from '../types';\n\ninterface InitWalletConnectType {\n  callbackRoute: string;\n  logoutRoute: string;\n  token?: string;\n  shouldLoginUser?: boolean;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface WalletConnectLoginHookCustomStateType {\n  uriDeepLink: string | null;\n  walletConnectUri?: string;\n}\n\nexport type WalletConnectLoginHookReturnType = [\n  (loginProvider?: boolean) => void,\n  LoginHookGenericStateType,\n  WalletConnectLoginHookCustomStateType\n];\n\nexport const useWalletConnectLogin = ({\n  callbackRoute,\n  logoutRoute,\n  token,\n  redirectAfterLogin = false\n}: InitWalletConnectType): WalletConnectLoginHookReturnType => {\n  const dispatch = useDispatch();\n  const heartbeatInterval = 15000;\n\n  const [error, setError] = useState<string>('');\n  const [wcUri, setWcUri] = useState<string>('');\n\n  const proxy = getProxyProvider();\n\n  const provider = getAccountProvider();\n  const walletConnectBridgeAddress = useSelector(\n    walletConnectBridgeAddressSelector\n  );\n  const walletConnectDeepLink = useSelector(walletConnectDeepLinkSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const providerRef = useRef<any>(provider);\n\n  let heartbeatDisconnectInterval: Timeout;\n\n  const hasWcUri = Boolean(wcUri);\n  const isLoading = !hasWcUri;\n  const uriDeepLink = hasWcUri\n    ? `${walletConnectDeepLink}?wallet-connect=${encodeURIComponent(wcUri)}`\n    : null;\n\n  useEffect(() => {\n    handleHeartbeat();\n\n    const interval = setInterval(() => {\n      handleHeartbeat();\n    }, heartbeatInterval);\n\n    return () => clearInterval(interval);\n  }, [provider]);\n\n  useUpdateEffect(() => {\n    generateWcUri();\n  }, [token]);\n\n  useUpdateEffect(() => {\n    providerRef.current = provider;\n  }, [provider]);\n\n  async function handleHeartbeat() {\n    const isProviderConnected = Boolean(\n      providerRef.current?.walletConnector?.connected\n    );\n    if (!isProviderConnected) {\n      return;\n    }\n\n    const customMessage = {\n      method: 'heartbeat',\n      params: {}\n    };\n\n    try {\n      await providerRef.current.sendCustomMessage(customMessage);\n    } catch (error) {\n      console.error('Connection lost', error);\n      handleOnLogout();\n    }\n  }\n\n  async function handleOnLogin() {\n    try {\n      const provider = providerRef.current;\n      if (isLoggedIn) {\n        return;\n      }\n      if (provider == null) {\n        return;\n      }\n      const address = await provider.getAddress();\n      const signature = await provider.getSignature();\n      const hasSignature = Boolean(signature);\n      const loginActionData = {\n        address: address,\n        loginMethod: LoginMethodsEnum.walletconnect\n      };\n\n      const loginData = {\n        logoutRoute: logoutRoute,\n        loginType: 'walletConnect',\n        callbackRoute: callbackRoute\n      };\n\n      if (hasSignature) {\n        dispatch(setWalletConnectLogin(loginData));\n        dispatch(setTokenLoginSignature(signature));\n      } else {\n        dispatch(setWalletConnectLogin(loginData));\n      }\n      dispatch(loginAction(loginActionData));\n\n      provider.walletConnector.on('heartbeat', () => {\n        clearInterval(heartbeatDisconnectInterval);\n        heartbeatDisconnectInterval = setInterval(() => {\n          console.log('Maiar Wallet Connection Lost');\n          handleOnLogout();\n          clearInterval(heartbeatDisconnectInterval);\n        }, 150000);\n      });\n\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (err) {\n      setError('Invalid address');\n      console.error(err);\n    }\n  }\n\n  const handleOnLogout = () => {\n    logout(logoutRoute);\n  };\n\n  async function initiateLogin(loginProvider = true) {\n    const shouldGenerateWcUri = loginProvider && !wcUri;\n    if (\n      !walletConnectBridgeAddress ||\n      (providerRef?.current?.isInitialized?.() && !shouldGenerateWcUri)\n    ) {\n      return;\n    }\n\n    const providerHandlers = {\n      onClientLogin: handleOnLogin,\n      onClientLogout: handleOnLogout\n    };\n\n    const newProvider = new WalletConnectProvider(\n      proxy,\n      walletConnectBridgeAddress,\n      providerHandlers\n    );\n\n    await newProvider.init();\n    setAccountProvider(newProvider);\n    providerRef.current = newProvider;\n    if (loginProvider) {\n      generateWcUri();\n    }\n  }\n\n  async function generateWcUri() {\n    if (!walletConnectBridgeAddress) {\n      return;\n    }\n\n    const walletConnectUri:\n      | string\n      | undefined = await providerRef.current?.login();\n    const hasUri = Boolean(walletConnectUri);\n\n    if (!hasUri) {\n      return;\n    }\n\n    if (!token) {\n      setWcUri(walletConnectUri as string);\n      return;\n    }\n\n    const wcUriWithToken = `${walletConnectUri}&token=${token}`;\n\n    setWcUri(wcUriWithToken);\n    dispatch(setTokenLogin({ loginToken: token }));\n  }\n\n  const loginFailed = error != null;\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    },\n    { uriDeepLink, walletConnectUri: wcUri }\n  ];\n};\n\nexport default useWalletConnectLogin;\n","import { Address, Transaction } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport {\n  gasPrice as configGasPrice,\n  gasLimit as configGasLimit,\n  gasPerDataByte\n} from 'constants/index';\nimport newTransaction from 'models/newTransaction';\nimport { addressSelector, chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SendSimpleTransactionPropsType } from 'types';\nimport { getAccount, getLatestNonce } from 'utils';\n\nenum ErrorCodesEnum {\n  'invalidReceiver' = 'Invalid Receiver address',\n  'unknownError' = 'Unknown Error. Please check the transactions and try again'\n}\n\n// TODO: replace with new erdjs function\nfunction calculateGasLimit(data?: string) {\n  const bNconfigGasLimit = new BigNumber(configGasLimit);\n  const bNgasPerDataByte = new BigNumber(gasPerDataByte);\n  const bNgasValue = data\n    ? bNgasPerDataByte.times(Buffer.from(data).length)\n    : 0;\n  const bNgasLimit = bNconfigGasLimit.plus(bNgasValue);\n  const gasLimit = bNgasLimit.toString(10);\n  return gasLimit;\n}\n\nexport async function transformAndSignTransactions({\n  transactions\n}: SendSimpleTransactionPropsType): Promise<Transaction[]> {\n  const address = addressSelector(store.getState());\n  const account = await getAccount(address);\n  const nonce = getLatestNonce(account);\n  return transactions.map((tx) => {\n    const {\n      value,\n      receiver,\n      data = '',\n      chainID,\n      version,\n      options,\n      gasPrice = configGasPrice,\n      gasLimit = calculateGasLimit(tx.data)\n    } = tx;\n    let validatedReceiver = receiver;\n\n    try {\n      const addr = new Address(receiver);\n      validatedReceiver = addr.hex();\n    } catch (err) {\n      throw ErrorCodesEnum.invalidReceiver;\n    }\n\n    const storeChainId = chainIDSelector(store.getState())\n      .valueOf()\n      .toString();\n    const transactionsChainId = chainID || storeChainId;\n    return newTransaction({\n      value,\n      receiver: validatedReceiver,\n      data,\n      gasPrice,\n      gasLimit: Number(gasLimit),\n      nonce: Number(nonce.valueOf().toString()),\n      sender: new Address(address).hex(),\n      chainID: transactionsChainId,\n      version,\n      options\n    });\n  });\n}\n\nexport default transformAndSignTransactions;\n","import BigNumber from 'bignumber.js';\nimport { networkConstants } from 'constants/index';\n\nimport { accountBalanceSelector, chainIDSelector } from 'redux/selectors';\nimport {\n  setTransactionsToSign,\n  setNotificationModal,\n  setTransactionsDisplayInfo\n} from 'redux/slices';\nimport { store } from 'redux/store';\nimport { NotificationTypesEnum, SignTransactionsPropsType } from 'types';\nimport { stringIsFloat } from 'utils';\nimport { SendTransactionReturnType } from './sendTransactions';\nimport { calcTotalFee } from './utils';\n\nexport function signTransactions({\n  transactions,\n  callbackRoute,\n  minGasLimit = networkConstants.DEFAULT_MIN_GAS_LIMIT,\n  customTransactionInformation,\n  transactionsDisplayInfo\n}: SignTransactionsPropsType): SendTransactionReturnType {\n  const appState = store.getState();\n  const sessionId = Date.now().toString();\n  const accountBalance = accountBalanceSelector(appState);\n  const storeChainId = chainIDSelector(appState);\n\n  const transactionsPayload = Array.isArray(transactions)\n    ? transactions\n    : [transactions];\n  const bNtotalFee = calcTotalFee(transactionsPayload, minGasLimit);\n  const bNbalance = new BigNumber(\n    stringIsFloat(accountBalance) ? accountBalance : '0'\n  );\n  const hasSufficientFunds = bNbalance.minus(bNtotalFee).isGreaterThan(0);\n\n  if (!hasSufficientFunds) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Insufficient EGLD funds',\n      description: 'Current EGLD balance cannot cover the transaction fees.'\n    };\n\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'insufficient funds', sessionId: null };\n  }\n\n  const hasValidChainId = transactionsPayload?.every(\n    (tx) => tx.getChainID().valueOf() === storeChainId.valueOf()\n  );\n  if (!hasValidChainId) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Network change detected',\n      description: 'The application tried to change the transaction network'\n    };\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'Invalid ChainID', sessionId: null };\n  }\n\n  const signTransactionsPayload = {\n    sessionId,\n    callbackRoute,\n    customTransactionInformation,\n    transactions: transactionsPayload.map((tx) => tx.toPlainObject())\n  };\n\n  store.dispatch(setTransactionsToSign(signTransactionsPayload));\n  store.dispatch(\n    setTransactionsDisplayInfo({ sessionId, transactionsDisplayInfo })\n  );\n  return { sessionId };\n}\n\nexport default signTransactions;\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport BigNumber from 'bignumber.js';\nimport { gasPerDataByte, gasPriceModifier } from 'constants/index';\nimport { calculateFeeLimit } from 'utils/operations';\n\nexport function calcTotalFee(transactions: Transaction[], minGasLimit: number) {\n  let totalFee = new BigNumber(0);\n\n  transactions.forEach((tx) => {\n    const fee = calculateFeeLimit({\n      gasPerDataByte,\n      gasPriceModifier,\n      minGasLimit: String(minGasLimit),\n      gasLimit: tx\n        .getGasLimit()\n        .valueOf()\n        .toString(),\n      gasPrice: tx\n        .getGasPrice()\n        .valueOf()\n        .toString(),\n      data: tx.getData().toString(),\n      chainId: tx.getChainID().valueOf()\n    });\n    totalFee = totalFee.plus(new BigNumber(fee));\n  });\n\n  return totalFee;\n}\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport { SendTransactionsPropsType, SimpleTransactionType } from 'types';\nimport { signTransactions } from './signTransactions';\nimport transformAndSignTransactions from './transformAndSignTransactions';\n\nexport interface SendTransactionReturnType {\n  error?: string;\n  sessionId: string | null;\n}\n\nexport async function sendTransactions({\n  transactions,\n  transactionsDisplayInfo,\n  redirectAfterSign = true,\n  callbackRoute = window.location.pathname,\n  signWithoutSending,\n  completedTransactionsDelay,\n  sessionInformation,\n  minGasLimit\n}: SendTransactionsPropsType): Promise<SendTransactionReturnType> {\n  try {\n    const transactionsPayload = Array.isArray(transactions)\n      ? transactions\n      : [transactions];\n\n    const areComplexTransactions = transactionsPayload.every(\n      (tx) => Object.getPrototypeOf(tx).toPlainObject != null\n    );\n    let txToSign = transactionsPayload;\n    if (!areComplexTransactions) {\n      txToSign = await transformAndSignTransactions({\n        transactions: transactionsPayload as SimpleTransactionType[],\n        minGasLimit\n      });\n    }\n\n    return signTransactions({\n      transactions: txToSign as Transaction[],\n      minGasLimit,\n      callbackRoute,\n      transactionsDisplayInfo,\n      customTransactionInformation: {\n        redirectAfterSign,\n        completedTransactionsDelay,\n        sessionInformation,\n        signWithoutSending\n      }\n    });\n  } catch (err) {\n    console.error('error signing transaction', err as any);\n    return { error: err as any, sessionId: null };\n  }\n}\n\nexport default sendTransactions;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { pendingSignedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface UseGetPendingTransactionsReturnType {\n  pendingTransactions: SignedTransactionsType;\n  pendingTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasPendingTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetPendingTransactions(): UseGetPendingTransactionsReturnType {\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const pendingTransactionsArray: [\n    string,\n    SignedTransactionsBodyType\n  ][] = Object.entries(pendingTransactions);\n  const hasPendingTransactions = pendingTransactionsArray?.length > 0;\n  return {\n    pendingTransactions,\n    pendingTransactionsArray,\n    hasPendingTransactions\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport {\n  MultiSignTxType,\n  TxDataTokenType,\n  TxsDataTokensType\n} from 'types/transactions';\nimport { getTokenFromData } from 'utils';\nimport parseMultiEsdtTransferData from 'utils/transactions/parseMultiEsdtTransferData';\n\nconst defaultTransactionInfo: TxDataTokenType = {\n  tokenId: '',\n  amount: '',\n  type: '',\n  multiTxData: '',\n  receiver: ''\n};\n\ninterface UseParseMultiEsdtTransferDataPropsType {\n  transactions?: Transaction[];\n}\n\ninterface UseParseMultiEsdtTransferDataReturnType {\n  parsedTransactionsByDataField: TxsDataTokensType;\n  getTxInfoByDataField: (\n    data: string,\n    multiTransactionData?: string\n  ) => TxDataTokenType;\n  allTransactions: MultiSignTxType[];\n}\n\nexport function useParseMultiEsdtTransferData({\n  transactions\n}: UseParseMultiEsdtTransferDataPropsType): UseParseMultiEsdtTransferDataReturnType {\n  const [parsedTransactionsByDataField, setParsedTransactions] =\n    useState<TxsDataTokensType>({});\n  const [allTransactions, setAllTransactions] = useState<MultiSignTxType[]>([]);\n\n  function addTransactionDataToParsedInfo(\n    data: string,\n    txInfo: TxDataTokenType\n  ) {\n    setParsedTransactions((existing) => ({\n      ...existing,\n      [data]: txInfo\n    }));\n  }\n\n  function getTxInfoByDataField(\n    data: string,\n    multiTransactionData?: string\n  ): TxDataTokenType {\n    if (parsedTransactionsByDataField == null) {\n      return defaultTransactionInfo;\n    }\n\n    if (data in parsedTransactionsByDataField) {\n      return parsedTransactionsByDataField[data];\n    }\n\n    if (\n      multiTransactionData != null &&\n      String(multiTransactionData) in parsedTransactionsByDataField\n    ) {\n      return parsedTransactionsByDataField[multiTransactionData];\n    }\n\n    return defaultTransactionInfo;\n  }\n\n  function extractTransactionESDTData() {\n    if (transactions && transactions.length > 0) {\n      const allTxs: MultiSignTxType[] = [];\n      transactions.forEach((transaction, transactionIndex) => {\n        const txData = transaction.getData().toString();\n        const multiTxs = parseMultiEsdtTransferData(txData);\n\n        if (multiTxs.length > 0) {\n          multiTxs.forEach((trx, idx) => {\n            const newTx: MultiSignTxType = {\n              transaction,\n              multiTxData: trx.data,\n              transactionIndex: idx\n            };\n            addTransactionDataToParsedInfo(trx.data, {\n              tokenId: trx.token ? trx.token : '',\n              amount: trx.amount ? trx.amount : '',\n              type: trx.type,\n              nonce: trx.nonce ? trx.nonce : '',\n              multiTxData: trx.data,\n              receiver: trx.receiver\n            });\n            allTxs.push(newTx);\n          });\n        } else {\n          const { tokenId, amount } = getTokenFromData(\n            transaction.getData().toString()\n          );\n\n          if (tokenId) {\n            addTransactionDataToParsedInfo(transaction.getData().toString(), {\n              tokenId,\n              amount,\n              receiver: transaction.getReceiver().bech32()\n            });\n          }\n          allTxs.push({ transaction, transactionIndex });\n        }\n      });\n      setAllTransactions(allTxs);\n    }\n  }\n\n  useEffect(() => {\n    extractTransactionESDTData();\n  }, [transactions]);\n\n  return {\n    parsedTransactionsByDataField,\n    getTxInfoByDataField,\n    allTransactions\n  };\n}\n","import {\n  clearSignedTransaction,\n  clearAllTransactionsToSign,\n  clearAllSignedTransactions\n} from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport function removeTransactionsToSign(sessionId: string) {\n  store.dispatch(clearSignedTransaction(sessionId));\n}\nexport function removeSignedTransaction(sessionId: string) {\n  store.dispatch(clearSignedTransaction(sessionId));\n}\n\nexport function removeAllSignedTransactions() {\n  store.dispatch(clearAllSignedTransactions());\n}\n\nexport function removeAllTransactionsToSign() {\n  store.dispatch(clearAllTransactionsToSign());\n}\n","import { useEffect } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { transactionStatusSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils';\n\nexport interface UseTrackTransactionStatusArgsType {\n  transactionId: string | null;\n  onSuccess?: (transactionId: string | null) => void;\n  onFail?: (transactionId: string | null, errorMessage?: string) => void;\n  onTimedOut?: (transactionId: string | null) => void;\n  onCancelled?: (transactionId: string | null) => void;\n  onCompleted?: (transactionId: string | null) => void;\n}\n\nexport function useTrackTransactionStatus({\n  transactionId,\n  onSuccess,\n  onFail,\n  onCancelled,\n  onTimedOut,\n  onCompleted\n}: UseTrackTransactionStatusArgsType) {\n  const transactionsBatch = useSelector((state: RootState) =>\n    transactionStatusSelector(state, transactionId)\n  );\n\n  const { status, transactions, errorMessage } = transactionsBatch;\n\n  const isPending = getIsTransactionPending(status);\n  const isFailed = getIsTransactionFailed(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n  const isSuccessful = getIsTransactionSuccessful(status);\n  const isCompleted = getIsTransactionCompleted(status);\n\n  const isCancelled = status === TransactionBatchStatusesEnum.cancelled;\n\n  useEffect(() => {\n    if (isSuccessful && onSuccess) {\n      onSuccess(transactionId);\n    }\n  }, [isSuccessful]);\n  useEffect(() => {\n    if (isCompleted && onCompleted) {\n      onCompleted(transactionId);\n    }\n  }, [isCompleted]);\n\n  useEffect(() => {\n    if (isFailed && onFail) {\n      onFail(transactionId, errorMessage);\n    }\n  }, [isFailed]);\n\n  useEffect(() => {\n    if (isCancelled && onCancelled) {\n      onCancelled(transactionId);\n    }\n  }, [isCancelled]);\n\n  useEffect(() => {\n    if (isTimedOut) {\n      if (onTimedOut) {\n        onTimedOut(transactionId);\n      } else {\n        onFail?.(transactionId, 'timeout');\n      }\n    }\n  }, [isTimedOut]);\n\n  if (transactionId == null) {\n    return {};\n  }\n\n  if (transactionsBatch == null) {\n    return { errorMessage: 'No transaction to track' };\n  }\n\n  return {\n    isPending,\n    isSuccessful,\n    isFailed,\n    isCancelled,\n    isCompleted,\n    errorMessage,\n    status,\n    transactions\n  };\n}\n\nexport default useTrackTransactionStatus;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { failedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetFailedTransactionsReturnType {\n  failedTransactions: SignedTransactionsType;\n  failedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasFailedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetFailedTransactions(): useGetFailedTransactionsReturnType {\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const failedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(failedTransactions);\n  const hasFailedTransactions = failedTransactionsArray?.length > 0;\n  return {\n    failedTransactions,\n    failedTransactionsArray,\n    hasFailedTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { successfulTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSuccessfulTransactionsReturnType {\n  successfulTransactions: SignedTransactionsType;\n  successfulTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSuccessfulTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetSuccessfulTransactions(): useGetSuccessfulTransactionsReturnType {\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const successfulTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(successfulTransactions);\n  const hasSuccessfulTransactions = successfulTransactionsArray?.length > 0;\n  return {\n    successfulTransactions,\n    successfulTransactionsArray,\n    hasSuccessfulTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport {\n  completedTransactionsSelector,\n  failedTransactionsSelector,\n  pendingSignedTransactionsSelector,\n  signedTransactionsSelector,\n  successfulTransactionsSelector,\n  timedOutTransactionsSelector\n} from 'redux/selectors';\n\ninterface useGetActiveTransactionsStatusReturnType {\n  pending: boolean;\n  timedOut: boolean;\n  fail: boolean;\n  success: boolean;\n  completed: boolean;\n  hasActiveTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetActiveTransactionsStatus(): useGetActiveTransactionsStatusReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const timedOutTransactions = useSelector(timedOutTransactionsSelector);\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const completedTransactions = useSelector(completedTransactionsSelector);\n\n  const pending = Object.keys(pendingTransactions)?.length > 0;\n\n  const timedOut = !pending && Object.keys(timedOutTransactions)?.length > 0;\n\n  const fail =\n    !pending && !timedOut && Object.keys(failedTransactions)?.length > 0;\n\n  const success =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(successfulTransactions).length > 0;\n\n  const completed =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(completedTransactions).length > 0;\n  const hasActiveTransactions = Object.keys(signedTransactions).length > 0;\n  return {\n    pending,\n    timedOut,\n    fail,\n    success,\n    completed,\n    hasActiveTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { completedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetCompletedTransactionsReturnType {\n  completedTransactions: SignedTransactionsType;\n  completedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasCompletedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetCompletedTransactions(): useGetCompletedTransactionsReturnType {\n  const completedTransactions = useSelector(completedTransactionsSelector);\n  const completedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(completedTransactions);\n  const hasCompletedTransactions = completedTransactionsArray?.length > 0;\n  return {\n    completedTransactions,\n    completedTransactionsArray,\n    hasCompletedTransactions\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { HWProvider, ExtensionProvider } from '@elrondnetwork/erdjs';\nimport {\n  setExternalProviderAsAccountProvider,\n  setAccountProvider\n} from 'providers/accountProvider';\nimport {\n  getNetworkConfigFromProxyProvider,\n  getProxyProvider\n} from 'providers/proxyProvider';\nimport { getLedgerConfiguration, newWalletProvider } from 'providers/utils';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  loginMethodSelector,\n  walletConnectLoginSelector,\n  networkSelector,\n  walletLoginSelector,\n  addressSelector,\n  ledgerAccountSelector,\n  ledgerLoginSelector,\n  isLoggedInSelector\n} from 'redux/selectors';\nimport {\n  setAccount,\n  setIsAccountLoading,\n  setAccountLoadingError,\n  setLedgerAccount,\n  setWalletLogin,\n  setChainID\n} from 'redux/slices';\nimport { useWalletConnectLogin } from 'services/login/useWalletConnectLogin';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getAddress, getAccount, getLatestNonce, logout } from 'utils';\n\nexport default function ProviderInitializer() {\n  const network = useSelector(networkSelector);\n  const walletConnectLogin = useSelector(walletConnectLoginSelector);\n  const loginMethod = useSelector(loginMethodSelector);\n  const walletLogin = useSelector(walletLoginSelector);\n  const address = useSelector(addressSelector);\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const ledgerLogin = useSelector(ledgerLoginSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const [ledgerData, setLedgerData] = useState<{\n    version: string;\n    dataEnabled: boolean;\n  }>();\n\n  const proxy = getProxyProvider();\n  const dispatch = useDispatch();\n\n  const { callbackRoute, logoutRoute } = walletConnectLogin\n    ? walletConnectLogin\n    : { callbackRoute: '', logoutRoute: '' };\n\n  const [initWalletLoginProvider] = useWalletConnectLogin({\n    callbackRoute,\n    logoutRoute\n  });\n\n  useEffect(() => {\n    refreshChainID();\n  }, [network]);\n\n  useEffect(() => {\n    initializeProvider();\n  }, [loginMethod]);\n\n  useEffect(() => {\n    fetchAccount();\n  }, [address, isLoggedIn]);\n\n  useEffect(() => {\n    // prevent balance double fetching by handling ledgerAccount data separately\n    setLedgerAccountInfo();\n  }, [ledgerAccount, isLoggedIn, ledgerData]);\n\n  function refreshChainID() {\n    getNetworkConfigFromProxyProvider()\n      .then((networkConfig) => {\n        if (networkConfig) {\n          dispatch(setChainID(networkConfig.ChainID.valueOf()));\n        }\n      })\n      .catch((e: any) => {\n        console.error('To do ', e);\n      });\n  }\n\n  function setLedgerAccountInfo() {\n    if (ledgerAccount == null && ledgerLogin != null && ledgerData) {\n      dispatch(\n        setLedgerAccount({\n          index: ledgerLogin.index,\n          address,\n          hasContractDataEnabled: ledgerData.dataEnabled,\n          version: ledgerData.version\n        })\n      );\n    }\n  }\n\n  async function fetchAccount() {\n    dispatch(setIsAccountLoading(true));\n    if (address && isLoggedIn) {\n      try {\n        const account = await getAccount(address);\n        if (account) {\n          dispatch(\n            setAccount({\n              balance: account.balance.toString(),\n              address,\n              nonce: account.nonce.valueOf()\n            })\n          );\n        }\n      } catch (e) {\n        dispatch(setAccountLoadingError('Failed getting account'));\n        console.error('Failed getting account ', e);\n      }\n    }\n    dispatch(setIsAccountLoading(false));\n  }\n\n  async function tryAuthenticateWalletUser() {\n    try {\n      if (walletLogin != null) {\n        const provider = newWalletProvider(network.walletAddress);\n        const address = await getAddress();\n        if (address) {\n          setAccountProvider(provider);\n          dispatch(\n            loginAction({ address, loginMethod: LoginMethodsEnum.wallet })\n          );\n          const account = await getAccount(address);\n          if (account) {\n            dispatch(\n              setAccount({\n                balance: account.balance.toString(),\n                address,\n                nonce: getLatestNonce(account)\n              })\n            );\n          }\n        }\n        dispatch(setWalletLogin(null));\n      }\n    } catch (e) {\n      console.error('Failed authenticating wallet user ', e);\n    }\n  }\n\n  async function getInitializedHwWalletProvider() {\n    const hwWalletP = new HWProvider(proxy);\n    let isInitialized = hwWalletP.isInitialized();\n    if (!isInitialized) {\n      isInitialized = await hwWalletP.init();\n    }\n    if (!isInitialized && isLoggedIn) {\n      console.warn('Could not initialise ledger app');\n      logout();\n      return;\n    }\n    if (ledgerLogin?.index != null) {\n      hwWalletP.addressIndex = ledgerLogin.index;\n    }\n    return hwWalletP;\n  }\n\n  async function setLedgerProvider() {\n    try {\n      const hwWalletP = await getInitializedHwWalletProvider();\n      if (!hwWalletP) {\n        return;\n      }\n      const ledgerConfig = await getLedgerConfiguration(hwWalletP);\n      setAccountProvider(hwWalletP);\n      setLedgerData(ledgerConfig);\n    } catch (err) {\n      console.error('Could not initialise ledger app', err);\n      logout();\n    }\n  }\n\n  async function setExtensionProvider() {\n    try {\n      const address = await getAddress();\n      const provider = ExtensionProvider.getInstance().setAddress(address);\n      const success = await provider.init();\n\n      if (success) {\n        setAccountProvider(provider);\n      } else {\n        console.error(\n          'Could not initialise extension, make sure Elrond wallet extension is installed.'\n        );\n      }\n    } catch (err) {\n      console.error('Unable to login to ExtensionProvider', err);\n    }\n  }\n\n  function initializeProvider() {\n    if (loginMethod == null) {\n      return;\n    }\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger: {\n        setLedgerProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.walletconnect: {\n        initWalletLoginProvider(false);\n        break;\n      }\n      case LoginMethodsEnum.wallet: {\n        const provider = newWalletProvider(network.walletAddress);\n        setAccountProvider(provider);\n        break;\n      }\n\n      case LoginMethodsEnum.extension: {\n        setExtensionProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.extra: {\n        setExternalProviderAsAccountProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.none: {\n        tryAuthenticateWalletUser();\n        break;\n      }\n      default:\n        return;\n    }\n  }\n\n  return null;\n}\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport axios from 'axios';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport type SendSignedTransactionsReturnType = string[];\n\nexport async function sendSignedTransactions(\n  signedTransactions: Transaction[]\n): Promise<SendSignedTransactionsReturnType> {\n  const { apiAddress, apiTimeout } = networkSelector(store.getState());\n  const promises = signedTransactions.map((transaction) => {\n    return axios.post(\n      `${apiAddress}/transactions`,\n      transaction.toPlainObject(),\n      { timeout: parseInt(apiTimeout) }\n    );\n  });\n  const response = await Promise.all(promises);\n\n  return response.map(({ data }) => data.txHash);\n}\n","import axios from 'axios';\nimport { networkConfigSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SmartContractResult, TransactionServerStatusesEnum } from 'types';\n\nexport type GetTransactionsByHashesReturnType = {\n  hash: string;\n  invalidTransaction: boolean;\n  status: TransactionServerStatusesEnum;\n  results: SmartContractResult[];\n  sender: string;\n  receiver: string;\n  data: string;\n  previousStatus: string;\n  hasStatusChanged: boolean;\n}[];\n\nexport type PendingTransactionsType = {\n  hash: string;\n  previousStatus: string;\n}[];\n\nexport async function getTransactionsByHashes(\n  pendingTransactions: PendingTransactionsType\n): Promise<GetTransactionsByHashesReturnType> {\n  const networkConfig = networkConfigSelector(store.getState());\n  const hashes = pendingTransactions.map((tx) => tx.hash);\n  const { data: responseData } = await axios.get(\n    `${networkConfig.network.apiAddress}/transactions`,\n    {\n      params: {\n        hashes: hashes.join(','),\n        withScResults: true\n      }\n    }\n  );\n  return pendingTransactions.map(({ hash, previousStatus }) => {\n    const txOnNetwork = responseData.find(\n      (txResponse: any) => txResponse?.txHash === hash\n    );\n\n    return {\n      hash,\n      data: txOnNetwork.data,\n      invalidTransaction: txOnNetwork == null,\n      status: txOnNetwork.status,\n      results: txOnNetwork.results,\n      sender: txOnNetwork.sender,\n      receiver: txOnNetwork?.receiver,\n      previousStatus,\n      hasStatusChanged: txOnNetwork.status !== previousStatus\n    };\n  });\n}\n","import axios from 'axios';\nimport { configEndpoint } from 'constants/network';\nimport { NetworkType } from 'types';\n\nexport async function getServerConfiguration(apiAddress: string) {\n  const cleanApiAddress = apiAddress.endsWith('/')\n    ? apiAddress.slice(0, -1)\n    : apiAddress;\n\n  const configUrl = `${cleanApiAddress}/${configEndpoint}`;\n\n  try {\n    const { data } = await axios.get<NetworkType>(configUrl);\n    if (data != null) {\n      return data;\n    }\n  } catch (err) {\n    console.error('error fetching configuration for ', configUrl);\n  }\n  return null;\n}\n","import { fallbackNetworkConfigurations } from 'constants/network';\nimport { EnvironmentsEnum } from 'types';\nimport { getServerConfiguration } from './getServerConfiguration';\n\nexport async function getServerConfigurationForEnvironment(\n  environment: EnvironmentsEnum\n) {\n  const fallbackConfig = fallbackNetworkConfigurations[environment];\n  const config = await getServerConfiguration(fallbackConfig.apiAddress);\n\n  return config !== null ? config : fallbackConfig;\n}\n","import axios from 'axios';\nimport { networkConfigSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport type ScamInfoType = {\n  scamInfo?: {\n    type: string;\n    info: string;\n  };\n  code: string;\n};\n\nexport async function getScamAddressData(addressToVerify: string) {\n  const {\n    network: { apiAddress, apiTimeout }\n  } = networkConfigSelector(store.getState());\n  const { data } = await axios.get<ScamInfoType>(\n    `/accounts/${addressToVerify}`,\n    {\n      baseURL: apiAddress,\n      timeout: Number(apiTimeout)\n    }\n  );\n\n  return data;\n}\n\nexport default getScamAddressData;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { networkConfigSelector } from 'redux/selectors';\n\nexport const useGetNetworkConfig = () => {\n  return useSelector(networkConfigSelector);\n};\n\nexport default useGetNetworkConfig;\n","import { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { notificationModalSelector } from 'redux/selectors';\nimport { clearNotificationModal } from 'redux/slices';\n\nexport function useGetNotification() {\n  const notification = useSelector(notificationModalSelector);\n  const dispatch = useDispatch();\n  const clearNotification = () => dispatch(clearNotificationModal());\n  return { notification, clearNotification };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { transactionDisplayInfoSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\n\nexport function useGetTransactionDisplayInfo(toastId: string | null) {\n  return useSelector((state: RootState) =>\n    transactionDisplayInfoSelector(state, toastId)\n  );\n}\n","import React from 'react';\nimport { WalletProvider } from '@elrondnetwork/erdjs';\nimport qs from 'qs';\nimport { dappInitRoute, walletSignSession } from 'constants/index';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { networkSelector } from 'redux/selectors';\nimport { moveTransactionsToSignedState } from 'redux/slices';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport { parseTransactionAfterSigning } from 'utils';\n\nexport function useParseSignedTransactions() {\n  const { search } = window.location;\n  const network = useSelector(networkSelector);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (search != null) {\n      const searchData = qs.parse(search.replace('?', ''));\n\n      if (searchData && walletSignSession in searchData) {\n        const signSessionId: number = (searchData as any)[walletSignSession];\n        const signedTransactions = new WalletProvider(\n          `${network.walletAddress}${dappInitRoute}`\n        ).getTransactionsFromWalletUrl();\n        if (signedTransactions.length > 0) {\n          dispatch(\n            moveTransactionsToSignedState({\n              sessionId: signSessionId.toString(),\n              status: TransactionBatchStatusesEnum.signed,\n              transactions: signedTransactions.map((tx) =>\n                parseTransactionAfterSigning(tx)\n              )\n            })\n          );\n          history.pushState({}, document.title, '?');\n        }\n      }\n    }\n  }, [search]);\n}\n\nexport default useParseSignedTransactions;\n","import { useEffect, useRef, useState } from 'react';\nimport { ExtensionProvider, Nonce, Transaction } from '@elrondnetwork/erdjs';\n\nimport { errorsMessages, walletSignSession } from 'constants/index';\nimport { useParseSignedTransactions } from 'hooks/transactions/useParseSignedTransactions';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { getAccountFromProxyProvider } from 'providers/proxyProvider';\nimport { getProviderType } from 'providers/utils';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { addressSelector, transactionsToSignSelector } from 'redux/selectors';\nimport {\n  clearAllTransactionsToSign,\n  clearTransactionsInfoForSessionId,\n  moveTransactionsToSignedState\n} from 'redux/slices';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  builtCallbackUrl,\n  getLatestNonce,\n  parseTransactionAfterSigning\n} from 'utils';\n\nexport const useSignTransactions = () => {\n  const dispatch = useDispatch();\n  const savedCallback = useRef('/');\n  const address = useSelector(addressSelector);\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n  const [error, setError] = useState<string | null>(null);\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const hasTransactions = Boolean(transactionsToSign?.transactions);\n\n  useParseSignedTransactions();\n\n  const onAbort = (sessionId?: string) => {\n    setError(null);\n    clearSignInfo(sessionId);\n  };\n\n  function clearSignInfo(sessionId?: string) {\n    const isExtensionProvider = provider instanceof ExtensionProvider;\n\n    dispatch(clearAllTransactionsToSign());\n    dispatch(clearTransactionsInfoForSessionId(sessionId));\n\n    if (!isExtensionProvider) {\n      return;\n    }\n\n    ExtensionProvider.getInstance()?.cancelAction?.();\n  }\n\n  const onCancel = (errorMessage: string, sessionId?: string) => {\n    const isTxCancelled = errorMessage !== errorsMessages.TRANSACTION_CANCELLED;\n\n    clearSignInfo(sessionId);\n\n    /*\n     * this is triggered by abort action,\n     * so no need to show error again\n     */\n    if (!isTxCancelled) {\n      return;\n    }\n\n    setError(errorMessage);\n  };\n\n  const signWithWallet = (\n    transactions: Array<Transaction>,\n    sessionId: string,\n    callbackRoute = ''\n  ) => {\n    const urlParams = { [walletSignSession]: sessionId };\n    const callbackUrl = `${window.location.origin}${callbackRoute}`;\n    const buildedCallbackUrl = builtCallbackUrl({ callbackUrl, urlParams });\n\n    provider.signTransactions(transactions, {\n      callbackUrl: encodeURIComponent(buildedCallbackUrl)\n    });\n  };\n\n  const signTransactionsWithProvider = async () => {\n    const {\n      sessionId,\n      transactions,\n      callbackRoute,\n      customTransactionInformation\n    } = transactionsToSign!;\n    const { redirectAfterSign } = customTransactionInformation;\n    const redirectRoute = callbackRoute || window.location.pathname;\n    const isCurrentRoute = window.location.pathname.includes(redirectRoute);\n    const shouldRedirectAfterSign = redirectAfterSign && !isCurrentRoute;\n\n    try {\n      const isProviderInitialized = await provider.init();\n\n      if (!isProviderInitialized) {\n        return;\n      }\n    } catch (error) {\n      const errorMessage =\n        ((error as unknown) as Error)?.message ||\n        (error as string) ||\n        errorsMessages.PROVIDER_NOT_INTIALIZED;\n      console.error(errorsMessages.PROVIDER_NOT_INTIALIZED, errorMessage);\n      onCancel(errorMessage);\n      return;\n    }\n\n    try {\n      const signedTransactions = await provider.signTransactions(transactions);\n      const hasSameTransactions =\n        Object.keys(signedTransactions).length === transactions.length;\n      const hasAllTransactionsSigned =\n        signedTransactions && hasSameTransactions;\n      const shouldMoveTransactionsToSignedState =\n        signedTransactions && hasAllTransactionsSigned;\n\n      if (!shouldMoveTransactionsToSignedState) {\n        return;\n      }\n\n      const signedTransactionsArray = Object.values(\n        signedTransactions\n      ).map((tx: any) => parseTransactionAfterSigning(tx));\n\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          transactions: signedTransactionsArray,\n          status: TransactionBatchStatusesEnum.signed\n        })\n      );\n\n      if (shouldRedirectAfterSign) {\n        window.location.href = redirectRoute;\n      }\n    } catch (err) {\n      const errorMessage =\n        ((error as unknown) as Error)?.message ||\n        (error as string) ||\n        errorsMessages.ERROR_SIGNING_TX;\n      console.error(errorsMessages.ERROR_SIGNING_TX, errorMessage);\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          status: TransactionBatchStatusesEnum.cancelled\n        })\n      );\n      onCancel(errorMessage, sessionId);\n    }\n  };\n\n  const signTransactions = async () => {\n    if (!transactionsToSign) {\n      return;\n    }\n\n    const { sessionId, transactions, callbackRoute } = transactionsToSign;\n\n    if (!provider) {\n      console.error(errorsMessages.MISSING_PROVIDER_MESSAGE);\n      return;\n    }\n\n    /*\n     * if the transaction is cancelled\n     * the callback will go to undefined,\n     * we save the most recent one for a valid transaction\n     */\n    savedCallback.current = callbackRoute || window.location.pathname;\n\n    const setTransactionNonces = (\n      latestNonce: number,\n      transactions: Array<Transaction>\n    ): Array<Transaction> => {\n      return transactions.map((tx: Transaction, index: number) => {\n        tx.setNonce(new Nonce(latestNonce + index));\n\n        return tx;\n      });\n    };\n\n    try {\n      const proxyAccount = await getAccountFromProxyProvider(address);\n      if (proxyAccount == null) {\n        return;\n      }\n      const isSigningWithWebWallet = providerType === LoginMethodsEnum.wallet;\n\n      const isSigningWithProvider = ![\n        LoginMethodsEnum.wallet,\n        LoginMethodsEnum.ledger\n      ].includes(providerType);\n\n      const latestNonce = getLatestNonce(proxyAccount);\n      const mappedTransactions = setTransactionNonces(\n        latestNonce,\n        transactions\n      );\n\n      if (isSigningWithWebWallet) {\n        signWithWallet(mappedTransactions, sessionId, callbackRoute);\n      }\n      if (isSigningWithProvider) {\n        signTransactionsWithProvider();\n      }\n    } catch (err) {\n      const defaultErrorMessage = ((error as unknown) as Error)?.message;\n      const errorMessage = defaultErrorMessage || errorsMessages.ERROR_SIGNING;\n      onCancel(errorMessage, sessionId);\n\n      dispatch(\n        moveTransactionsToSignedState({\n          sessionId,\n          status: TransactionBatchStatusesEnum.cancelled\n        })\n      );\n\n      console.error(errorMessage, err);\n    }\n  };\n\n  useEffect(() => {\n    signTransactions();\n  }, [transactionsToSign]);\n\n  return {\n    error,\n    onAbort,\n    hasTransactions,\n    callbackRoute: savedCallback.current,\n    sessionId: transactionsToSign?.sessionId,\n    transactions: transactionsToSign?.transactions\n  };\n};\n\nexport default useSignTransactions;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\n\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSignedTransactionsReturnType {\n  signedTransactions: SignedTransactionsType;\n  signedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSignedTransactions: boolean;\n}\n\nexport function useGetSignedTransactions(): useGetSignedTransactionsReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const signedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(signedTransactions);\n  const hasSignedTransactions = signedTransactionsArray?.length > 0;\n  return {\n    signedTransactions,\n    signedTransactionsArray,\n    hasSignedTransactions\n  };\n}\n","let swr: any = {};\ntry {\n  swr = require('swr').default;\n} catch (err) {}\n\nexport default swr;\n","import axios from 'axios';\nimport useGetNetworkConfig from 'hooks/useGetNetworkConfig';\n\nimport useSwr from 'optionalPackages/swr';\nimport { getIdentifierType } from 'utils';\n\ninterface TokenOptionType {\n  tokenLabel: string;\n  tokenDenomination: number;\n  tokenAvatar: string;\n  error?: string;\n}\n\ninterface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  assets: {\n    description: string;\n    status: string;\n    svgUrl: string;\n  };\n}\n\nconst fetcher = (url: string) =>\n  axios.get(url).then((response) => response.data);\n\nexport function useGetTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): TokenOptionType {\n  const { network } = useGetNetworkConfig();\n\n  const { isEsdt } = getIdentifierType(tokenId);\n  const tokenEndpoint = isEsdt ? 'tokens' : 'nfts';\n\n  const {\n    data: selectedToken,\n    error\n  }: { data?: TokenInfoResponse; error?: string } = useSwr(\n    Boolean(tokenId)\n      ? `${network.apiAddress}/${tokenEndpoint}/${tokenId}`\n      : null,\n    fetcher\n  );\n\n  if (!tokenId) {\n    return {\n      tokenDenomination: Number(network.egldDenomination),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n\n  const tokenDenomination = selectedToken\n    ? selectedToken?.decimals\n    : Number(network.egldDenomination);\n  const tokenLabel = selectedToken ? selectedToken?.name : '';\n  const tokenAvatar = selectedToken ? `${selectedToken?.assets?.svgUrl}` : '';\n\n  return { tokenDenomination, tokenLabel, tokenAvatar, error };\n}\n\nexport default useGetTokenDetails;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { accountInfoSelector } from 'redux/selectors';\n\nexport const useGetAccountInfo = () => {\n  return useSelector(accountInfoSelector);\n};\n\nexport default useGetAccountInfo;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, loginInfoSelector } from 'redux/selectors';\n\nexport const useGetLoginInfo = () => {\n  const loginInfo = useSelector(loginInfoSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  return { ...loginInfo, isLoggedIn };\n};\n\nexport default useGetLoginInfo;\n","import { getAccountProvider } from 'providers/accountProvider';\nimport { getProviderType } from 'providers/utils';\n\nexport const useGetAccountProvider = () => {\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n  return { provider, providerType };\n};\n\nexport default useGetAccountProvider;\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport { getScamAddressData } from 'apiCalls';\nimport { useGetAccountInfo } from 'hooks/account';\nimport { getAccountProvider } from 'providers/accountProvider';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { egldLabelSelector, transactionsToSignSelector } from 'redux/selectors';\nimport {\n  clearAllTransactionsToSign,\n  moveTransactionsToSignedState,\n  setSignTransactionsError\n} from 'redux/slices/transactionsSlice';\nimport { useParseMultiEsdtTransferData } from 'services/transactions/hooks/useParseMultiEsdtTransferData';\nimport { ActiveLedgerTransactionType, MultiSignTxType } from 'types';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport { getIsProviderEqualTo, isTokenTransfer } from 'utils';\nimport { parseTransactionAfterSigning } from 'utils';\nimport { getLedgerErrorCodes } from 'utils/internal';\n\nexport interface UseSignTransactionsWithDevicePropsType {\n  onCancel: () => void;\n  verifyReceiverScam?: boolean;\n}\n\ninterface VerifiedAddressesType {\n  [address: string]: { type: string; info: string };\n}\nlet verifiedAddresses: VerifiedAddressesType = {};\n\ntype DeviceSignedTransactions = Record<number, Transaction>;\n\nexport interface UseSignTransactionsWithDeviceReturnType {\n  allTransactions: MultiSignTxType[];\n  onSignTransaction: () => void;\n  onNext: () => void;\n  onPrev: () => void;\n  onAbort: () => void;\n  waitingForDevice: boolean;\n  isLastTransaction: boolean;\n  currentStep: number;\n  callbackRoute?: string;\n  signedTransactions?: DeviceSignedTransactions;\n  currentTransaction: ActiveLedgerTransactionType | null;\n}\n\nexport function useSignTransactionsWithDevice({\n  onCancel,\n  verifyReceiverScam = true\n}: UseSignTransactionsWithDevicePropsType): UseSignTransactionsWithDeviceReturnType {\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const {\n    account: { address }\n  } = useGetAccountInfo();\n\n  const {\n    sessionId,\n    transactions,\n    callbackRoute,\n    customTransactionInformation\n  } = transactionsToSign || {};\n  const [currentStep, setCurrentStep] = useState(0);\n  const [signedTransactions, setSignedTransactions] = useState<\n    DeviceSignedTransactions\n  >();\n  const {\n    getTxInfoByDataField,\n    allTransactions\n  } = useParseMultiEsdtTransferData({ transactions });\n  const [\n    currentTransaction,\n    setCurrentTransaction\n  ] = useState<ActiveLedgerTransactionType | null>(null);\n  const provider = getAccountProvider();\n  const egldLabel = useSelector(egldLabelSelector);\n  const [waitingForDevice, setWaitingForDevice] = useState(false);\n  const dispatch = useDispatch();\n  const isLedger = getIsProviderEqualTo(LoginMethodsEnum.ledger);\n\n  const isLastTransaction = currentStep === allTransactions.length - 1;\n\n  useEffect(() => {\n    extractTransactionsInfo();\n  }, [currentStep, allTransactions]);\n\n  async function extractTransactionsInfo() {\n    const tx = allTransactions[currentStep];\n    if (tx == null) {\n      return;\n    }\n    const { transaction, multiTxData } = tx;\n    const dataField = transaction.getData().toString();\n    const transactionTokenInfo = getTxInfoByDataField(\n      transaction.getData().toString(),\n      multiTxData\n    );\n    const { tokenId } = transactionTokenInfo;\n    const receiver = transaction.getReceiver().toString();\n    const notSender = address !== receiver;\n    const verified = receiver in verifiedAddresses;\n\n    if (notSender && !verified && verifyReceiverScam) {\n      const data = await getScamAddressData(receiver);\n      verifiedAddresses = {\n        ...verifiedAddresses,\n        ...(data.scamInfo ? { [receiver]: data.scamInfo } : {})\n      };\n    }\n\n    const isTokenTransaction = Boolean(\n      tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n    );\n\n    setCurrentTransaction({\n      transaction,\n      receiverScamInfo: verifiedAddresses[receiver]?.info || null,\n      transactionTokenInfo,\n      isTokenTransaction,\n      dataField\n    });\n  }\n\n  function reset() {\n    setCurrentStep(0);\n    setSignedTransactions(undefined);\n    setWaitingForDevice(false);\n  }\n\n  async function sign() {\n    try {\n      if (currentTransaction == null || sessionId == null) {\n        return;\n      }\n\n      setWaitingForDevice(isLedger);\n\n      const signedTx = await provider.signTransaction(\n        currentTransaction.transaction\n      );\n      const newSignedTx = { [currentStep]: signedTx };\n      const newSignedTransactions: any = signedTransactions\n        ? { ...signedTransactions, ...newSignedTx }\n        : newSignedTx;\n      setSignedTransactions(newSignedTransactions);\n      if (!isLastTransaction) {\n        setCurrentStep((exising) => exising + 1);\n        setWaitingForDevice(false);\n      } else if (newSignedTransactions) {\n        dispatch(\n          moveTransactionsToSignedState({\n            sessionId,\n            status: TransactionBatchStatusesEnum.signed,\n            transactions: Object.values(newSignedTransactions).map((tx) =>\n              parseTransactionAfterSigning(tx as Transaction, isLedger)\n            )\n          })\n        );\n\n        reset();\n        if (\n          callbackRoute != null &&\n          customTransactionInformation?.redirectAfterSign &&\n          !window.location.pathname.includes(callbackRoute)\n        ) {\n          window.location.href = callbackRoute;\n        }\n      }\n    } catch (err) {\n      console.error(err, 'sign error');\n      const { message } = err as any;\n      const errorMessage = isLedger\n        ? getLedgerErrorCodes(err).errorMessage\n        : null;\n\n      reset();\n      dispatch(setSignTransactionsError(errorMessage ?? message));\n    }\n  }\n\n  function signTx() {\n    try {\n      if (currentTransaction == null) {\n        return;\n      }\n      const signature = currentTransaction.transaction.getSignature();\n      if (signature) {\n        if (!isLastTransaction) {\n          setCurrentStep((exising) => exising + 1);\n        }\n      } else {\n        // currently code doesn't reach here because getSignature throws error if none is found\n        sign();\n      }\n    } catch {\n      // the only way to check if tx has signature is with try catch\n      sign();\n    }\n  }\n\n  const isFirst = currentStep === 0;\n\n  function onAbort() {\n    if (isFirst) {\n      dispatch(clearAllTransactionsToSign());\n      onCancel();\n      if (\n        callbackRoute != null &&\n        customTransactionInformation?.redirectAfterSign\n      ) {\n        window.location.href = callbackRoute;\n      }\n    } else {\n      setCurrentStep((existing) => existing - 1);\n    }\n  }\n\n  const continueWithoutSigning =\n    currentTransaction?.transactionTokenInfo?.type &&\n    currentTransaction?.transactionTokenInfo?.multiTxData &&\n    !currentTransaction?.dataField.endsWith(\n      currentTransaction?.transactionTokenInfo?.multiTxData\n    );\n\n  function onSignTransaction() {\n    if (continueWithoutSigning) {\n      setCurrentStep((exising) => exising + 1);\n    } else {\n      signTx();\n    }\n  }\n\n  function onNext() {\n    setCurrentStep((current) => {\n      const nextStep = current + 1;\n      if (nextStep > allTransactions?.length) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  function onPrev() {\n    setCurrentStep((current) => {\n      const nextStep = current - 1;\n      if (nextStep < 0) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  return {\n    allTransactions,\n    onSignTransaction,\n    onNext,\n    onPrev,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    callbackRoute,\n    currentStep,\n    signedTransactions,\n    currentTransaction\n  };\n}\n\nexport default useSignTransactionsWithDevice;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signTransactionsErrorSelector } from 'redux/selectors';\n\nexport const useGetSignTransactionsError = () => {\n  return useSelector(signTransactionsErrorSelector);\n};\n\nexport default useGetSignTransactionsError;\n","import { SignedTransactionType } from 'types';\nimport { getIsTransactionPending } from 'utils';\n\ninterface PendingTxType {\n  hash: string;\n  previousStatus: string;\n}\n\nexport function getPendingTransactions(\n  transactions: SignedTransactionType[],\n  timedOutHashes: string[]\n): PendingTxType[] {\n  const pendingTransactions = transactions.reduce(\n    (acc: PendingTxType[], { status, hash }) => {\n      if (\n        hash != null &&\n        !timedOutHashes.includes(hash) &&\n        getIsTransactionPending(status)\n      ) {\n        acc.push({\n          hash,\n          previousStatus: status\n        });\n      }\n      return acc;\n    },\n    []\n  );\n  return pendingTransactions;\n}\n\nexport default getPendingTransactions;\n","import { updateSignedTransactions } from 'redux/slices';\nimport { store } from 'redux/store';\nimport { TransactionBatchStatusesEnum } from 'types';\n\nexport function manageTimedOutTransactions(sessionId: string) {\n  store.dispatch(\n    updateSignedTransactions({\n      sessionId,\n      status: TransactionBatchStatusesEnum.timedOut\n    })\n  );\n}\n\nexport default manageTimedOutTransactions;\n","import {\n  getTransactionsByHashes as defaultGetTxByHash,\n  GetTransactionsByHashesReturnType\n} from 'apiCalls/transactions';\nimport { GetTransactionsByHashesType } from 'contexts/types';\nimport { updateSignedTransactionStatus } from 'redux/slices';\nimport { store } from 'redux/store';\nimport { TransactionServerStatusesEnum } from 'types/enums';\nimport {\n  CustomTransactionInformation,\n  SignedTransactionsBodyType\n} from 'types/transactions';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful\n} from 'utils';\nimport { refreshAccount } from 'utils/account';\nimport getPendingTransactions from './getPendingTransactions';\nimport manageFailedTransactions from './manageFailedTransactions';\nimport manageTimedOutTransactions from './manageTimedOutTransactions';\n\ninterface TransactionStatusTrackerPropsType {\n  sessionId: string;\n  transactionBatch: SignedTransactionsBodyType;\n  getTransactionsByHash?: GetTransactionsByHashesType;\n  shouldRefreshBalance?: boolean;\n}\n\ninterface RetriesType {\n  [hash: string]: number;\n}\n\nconst retries: RetriesType = {};\nconst timeouts: string[] = [];\n\ninterface ManageTransactionType {\n  serverTransaction: GetTransactionsByHashesReturnType[0];\n  sessionId: string;\n  customTransactionInformation?: CustomTransactionInformation;\n  shouldRefreshBalance?: boolean;\n}\n\nfunction manageTransaction({\n  serverTransaction,\n  sessionId,\n  customTransactionInformation,\n  shouldRefreshBalance\n}: ManageTransactionType) {\n  const {\n    hash,\n    status,\n    results,\n    invalidTransaction,\n    hasStatusChanged\n  } = serverTransaction;\n  try {\n    if (timeouts.includes(hash)) {\n      return;\n    }\n\n    const retriesForThisHash = retries[hash];\n    if (retriesForThisHash > 30) {\n      // consider transaction as stuck after 1 minute\n      manageTimedOutTransactions(sessionId);\n      return;\n    }\n\n    if (invalidTransaction || getIsTransactionPending(status)) {\n      retries[hash] = retries[hash] ? retries[hash] + 1 : 1;\n      return;\n    }\n    if (hasStatusChanged) {\n      if (\n        getIsTransactionSuccessful(status) &&\n        customTransactionInformation?.completedTransactionsDelay != null\n      ) {\n        //if the transaction is successful and the success status should be updated with a delay\n        //it will enter a timeout and then change the status\n        timeouts.push(hash);\n        setTimeout(\n          () =>\n            store.dispatch(\n              updateSignedTransactionStatus({\n                sessionId,\n                status: TransactionServerStatusesEnum.completed,\n                transactionHash: hash\n              })\n            ),\n          customTransactionInformation?.completedTransactionsDelay\n        );\n      } else {\n        //otherwise, it will just trigger the change of status\n        store.dispatch(\n          updateSignedTransactionStatus({\n            sessionId,\n            status,\n            transactionHash: hash\n          })\n        );\n      }\n    }\n\n    // if set to true will trigger a balance refresh after each iteration\n    if (!shouldRefreshBalance) {\n      refreshAccount();\n    }\n\n    if (getIsTransactionFailed(status)) {\n      manageFailedTransactions({ sessionId, hash, results });\n    }\n  } catch (error) {\n    console.error(error);\n    manageTimedOutTransactions(sessionId);\n  }\n}\n\nexport async function checkBatch({\n  sessionId,\n  transactionBatch: { transactions, customTransactionInformation },\n  getTransactionsByHash = defaultGetTxByHash,\n  shouldRefreshBalance\n}: TransactionStatusTrackerPropsType) {\n  try {\n    if (transactions == null) {\n      return;\n    }\n\n    const pendingTransactions = getPendingTransactions(transactions, timeouts);\n\n    const serverTransactions = await getTransactionsByHash(pendingTransactions);\n\n    for (const serverTransaction of serverTransactions) {\n      manageTransaction({\n        serverTransaction,\n        sessionId,\n        customTransactionInformation,\n        shouldRefreshBalance\n      });\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport default checkBatch;\n","import {\n  updateSignedTransactions,\n  updateSignedTransactionStatus\n} from 'redux/slices';\nimport { store } from 'redux/store';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { SmartContractResult } from 'types/transactions';\n\nexport function manageFailedTransactions({\n  results,\n  hash,\n  sessionId\n}: {\n  results: SmartContractResult[];\n  hash: string;\n  sessionId: string;\n}) {\n  const resultWithError = results.find(\n    (scResult) => scResult?.returnMessage !== ''\n  );\n\n  store.dispatch(\n    updateSignedTransactionStatus({\n      transactionHash: hash,\n      sessionId,\n      status: TransactionServerStatusesEnum.fail,\n      errorMessage: resultWithError?.returnMessage\n    })\n  );\n  store.dispatch(\n    updateSignedTransactions({\n      sessionId,\n      status: TransactionBatchStatusesEnum.fail,\n      errorMessage: resultWithError?.returnMessage\n    })\n  );\n}\n\nexport default manageFailedTransactions;\n","import { GetTransactionsByHashesType } from 'contexts/types';\nimport { useGetPendingTransactions } from 'services/transactions/hooks';\nimport { getIsTransactionPending, refreshAccount } from 'utils';\nimport checkBatch from './checkBatch';\n\nexport function useCheckTransactionStatus() {\n  const { pendingTransactionsArray } = useGetPendingTransactions();\n\n  async function checkTransactionStatus(props: {\n    getTransactionsByHash?: GetTransactionsByHashesType;\n    shouldRefreshBalance?: boolean;\n  }) {\n    const pendingBatches = pendingTransactionsArray.filter(\n      ([sessionId, transactionBatch]) => {\n        const isPending =\n          sessionId != null && getIsTransactionPending(transactionBatch.status);\n        return isPending;\n      }\n    );\n    if (pendingBatches.length > 0) {\n      for (const [sessionId, transactionBatch] of pendingBatches) {\n        await checkBatch({\n          sessionId,\n          transactionBatch,\n          ...props\n        });\n      }\n    }\n    if (props.shouldRefreshBalance) {\n      refreshAccount();\n    }\n  }\n\n  return checkTransactionStatus;\n}\n\nexport default useCheckTransactionStatus;\n","import axios from 'axios';\nimport {\n  addressSelector,\n  apiNetworkSelector,\n  shardSelector\n} from 'redux/selectors';\n\nimport { setAccountShard } from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport default async function getAccountShard() {\n  const appState = store.getState();\n  const apiAddress = apiNetworkSelector(appState);\n  const address = addressSelector(appState);\n  const shard = shardSelector(appState);\n\n  try {\n    if (shard == null && address) {\n      const { data: account } = await axios.get(\n        `${apiAddress}/accounts/${address}`\n      );\n      store.dispatch(setAccountShard(account.shard));\n      return account.shard;\n    } else {\n      return shard;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { getServerConfiguration } from 'apiCalls';\nimport { fallbackNetworkConfigurations } from 'constants/network';\nimport { useGetAccountInfo } from 'hooks';\nimport { initializeProxyProvider } from 'providers/proxyProvider';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport { initializeNetworkConfig } from 'redux/slices/networkConfigSlice';\nimport { CustomNetworkType, EnvironmentsEnum, NetworkType } from 'types';\nimport { logout } from 'utils';\nimport getAccountShard from 'utils/account/getAccountShard';\n\ninterface AppInitializerPropsType {\n  customNetworkConfig?: CustomNetworkType;\n  children: any;\n  environment: EnvironmentsEnum;\n}\n\nexport function AppInitializer({\n  customNetworkConfig = {},\n  children,\n  environment\n}: AppInitializerPropsType) {\n  const [initialized, setInitialized] = useState(false);\n  const account = useGetAccountInfo();\n  const { address, publicKey } = account;\n  const dispatch = useDispatch();\n\n  function initializeProviders(networkConfig: NetworkType) {\n    initializeProxyProvider(networkConfig);\n  }\n\n  async function initializeNetwork() {\n    const fetchConfigFromServer = !customNetworkConfig?.skipFetchFromServer;\n    const customNetworkApiAddress = customNetworkConfig?.apiAddress;\n    const fallbackConfig = fallbackNetworkConfigurations[environment] || {};\n\n    const localConfig = {\n      ...fallbackConfig,\n      ...customNetworkConfig\n    };\n\n    if (fetchConfigFromServer) {\n      const fallbackApiAddress = fallbackConfig?.apiAddress;\n\n      const serverConfig = await getServerConfiguration(\n        customNetworkApiAddress || fallbackApiAddress\n      );\n\n      if (serverConfig != null) {\n        const apiConfig = {\n          ...fallbackConfig,\n          ...serverConfig,\n          ...customNetworkConfig\n        };\n        dispatch(initializeNetworkConfig(apiConfig));\n        initializeProviders(apiConfig);\n        return;\n      }\n    }\n\n    dispatch(initializeNetworkConfig(localConfig));\n    initializeProviders(localConfig);\n  }\n\n  async function initializeApp() {\n    await initializeNetwork();\n    setInitialized(true);\n\n    getAccountShard();\n  }\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    getAccountShard();\n  }, [address]);\n\n  useEffect(() => {\n    if (address) {\n      const pubKey = new Address(address).hex();\n      if (pubKey !== publicKey) {\n        logout();\n      }\n    }\n  }, [address, publicKey]);\n\n  useEffect(() => {\n    initializeApp();\n  }, [customNetworkConfig, environment]);\n\n  return initialized ? <>{children}</> : null;\n}\n\nexport default AppInitializer;\n","import React, { useRef } from 'react';\nimport { Address } from '@elrondnetwork/erdjs';\nimport { Signature } from '@elrondnetwork/erdjs/out/signature';\n\nimport { sendSignedTransactions as defaultSendSignedTxs } from 'apiCalls/transactions';\nimport { SendSignedTransactionsAsyncType } from 'contexts/types';\nimport newTransaction from 'models/newTransaction';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\nimport { accountSelector } from 'redux/selectors';\nimport {\n  setTxSubmittedModal,\n  clearAllTransactionsToSign,\n  updateSignedTransactions\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { setNonce } from 'utils';\n\nexport interface TransactionSenderType {\n  sendSignedTransactionsAsync?: SendSignedTransactionsAsyncType;\n}\n\nexport const TransactionSender = ({\n  sendSignedTransactionsAsync = defaultSendSignedTxs\n}: TransactionSenderType) => {\n  const account = useSelector(accountSelector);\n  const signedTransactions = useSelector(signedTransactionsSelector);\n\n  const sendingRef = useRef(false);\n\n  const dispatch = useDispatch();\n\n  const clearSignInfo = () => {\n    dispatch(clearAllTransactionsToSign());\n    sendingRef.current = false;\n  };\n  async function handleSendTransactions() {\n    const sessionIds = Object.keys(signedTransactions);\n    for (const sessionId of sessionIds) {\n      const skipSending =\n        signedTransactions?.[sessionId]?.customTransactionInformation\n          ?.signWithoutSending;\n\n      if (!sessionId || skipSending) {\n        continue;\n      }\n\n      try {\n        const isSessionIdSigned =\n          signedTransactions[sessionId].status ===\n          TransactionBatchStatusesEnum.signed;\n        const shouldSendCurrentSession =\n          isSessionIdSigned && !sendingRef.current;\n        if (!shouldSendCurrentSession) {\n          continue;\n        }\n        const { transactions } = signedTransactions[sessionId];\n\n        if (!transactions) {\n          continue;\n        }\n        sendingRef.current = true;\n        const transactionsToSend = transactions.map((tx) => {\n          const address = new Address(tx.sender);\n          const transactionObject = newTransaction(tx);\n          const signature = new Signature(tx.signature);\n\n          transactionObject.applySignature(signature, address);\n          return transactionObject;\n        });\n        const responseHashes = await sendSignedTransactionsAsync(\n          transactionsToSend\n        );\n\n        const newStatus = TransactionServerStatusesEnum.pending;\n        const newTransactions = transactions.map((transaction) => {\n          if (responseHashes.includes(transaction.hash)) {\n            return { ...transaction, status: newStatus };\n          }\n\n          return transaction;\n        });\n\n        const submittedModalPayload = {\n          sessionId,\n          submittedMessage: 'submitted'\n        };\n\n        dispatch(setTxSubmittedModal(submittedModalPayload));\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.sent,\n            transactions: newTransactions\n          })\n        );\n        clearSignInfo();\n        setNonce(account.nonce + transactions.length);\n\n        history.pushState({}, document.title, '?');\n      } catch (error) {\n        console.error('Unable to send transactions', error);\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.fail,\n            errorMessage: (error as any).message\n          })\n        );\n        clearSignInfo();\n      } finally {\n        sendingRef.current = false;\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    handleSendTransactions();\n  }, [signedTransactions, account]);\n\n  return null;\n};\n\nexport default TransactionSender;\n","import useTransactionsTracker, {\n  TransactionsTrackerType\n} from './useTransactionsTracker';\n\nexport function TransactionsTracker({\n  getTransactionsByHash\n}: TransactionsTrackerType) {\n  useTransactionsTracker({ getTransactionsByHash });\n  return null;\n}\n\nexport default TransactionsTracker;\n","import { useEffect, useRef } from 'react';\nimport { getTransactionsByHashes as defaultGetTxByHash } from 'apiCalls/transactions';\nimport { GetTransactionsByHashesType } from 'contexts/types';\nimport { useCheckTransactionStatus } from 'hooks';\nimport { useGetPendingTransactions } from 'services/transactions';\nimport { getIsTransactionPending } from 'utils';\n\nexport interface TransactionsTrackerType {\n  getTransactionsByHash?: GetTransactionsByHashesType;\n}\n\nexport function useTransactionsTracker(props?: TransactionsTrackerType) {\n  const { pendingTransactionsArray } = useGetPendingTransactions();\n\n  const getTransactionsByHash =\n    props?.getTransactionsByHash ?? defaultGetTxByHash;\n\n  const checkTransactionStatus = useCheckTransactionStatus();\n  const intervalRef = useRef<any>();\n\n  const pendingBatches = pendingTransactionsArray.filter(\n    ([sessionId, transactionBatch]) => {\n      const isPending =\n        sessionId != null && getIsTransactionPending(transactionBatch.status);\n      return isPending;\n    }\n  );\n\n  useEffect(() => {\n    if (pendingBatches.length > 0) {\n      intervalRef.current = setInterval(() => {\n        checkTransactionStatus({ getTransactionsByHash });\n      }, 2000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [pendingBatches]);\n}\n\nexport default useTransactionsTracker;\n","import React from 'react';\nimport TransactionSender, {\n  TransactionSenderType\n} from 'components/TransactionSender';\nimport TransactionsTracker from 'components/TransactionsTracker';\nimport { TransactionsTrackerType } from 'components/TransactionsTracker/useTransactionsTracker';\n\nexport interface CustomComponentsType {\n  transactionSender?: {\n    component: typeof TransactionSender;\n    props?: TransactionSenderType;\n  };\n  transactionTracker?: {\n    component: typeof TransactionsTracker;\n    props?: TransactionsTrackerType;\n  };\n}\n\nexport function CustomComponents({\n  customComponents\n}: {\n  customComponents?: CustomComponentsType;\n}) {\n  const transactionSender = customComponents?.transactionSender;\n  const transactionTracker = customComponents?.transactionTracker;\n\n  const TxSender = transactionSender?.component ?? TransactionSender;\n  const TxTracker = transactionTracker?.component ?? TransactionsTracker;\n\n  return (\n    <>\n      <TxSender {...transactionSender?.props} />\n      <TxTracker {...transactionTracker?.props} />\n    </>\n  );\n}\n","import { Address } from '@elrondnetwork/erdjs';\n\nexport class TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n\n  constructor(\n    sender: Address,\n    receiver: Address,\n    functionName: string,\n    inputParameters: string[],\n    outputParameters: string[]\n  ) {\n    this.sender = sender;\n    this.receiver = receiver;\n    this.functionName = functionName;\n    this.inputParameters = inputParameters;\n    this.outputParameters = outputParameters;\n  }\n}\n","import React from 'react';\nimport { wrapperClassName } from 'utils';\n\nexport const withClassNameWrapper =\n  (Component: any) =>\n  ({ ...props }) =>\n    (\n      <span className={wrapperClassName}>\n        <Component {...props} />\n      </span>\n    );\n","import React from 'react';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport { denominate, getEgldLabel, stringIsInteger } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nexport interface DenominateType {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  egldLabel?: string;\n  'data-testid'?: string;\n}\n\nconst denominateInvalid = (props: DenominateType) => {\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>...</span>\n    </span>\n  );\n};\n\nconst denominateValid = (props: DenominateType, erdLabel: string) => {\n  const { value, showLastNonZeroDecimal = false, showLabel = true } = props;\n  const decimals =\n    props.decimals !== undefined ? props.decimals : configDecimals;\n  const denomination =\n    props.denomination !== undefined ? props.denomination : configDenomination;\n\n  const denominatedValue = denominate({\n    input: value,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas: true\n  });\n\n  const valueParts = denominatedValue.split('.');\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = denominatedValue !== '0';\n\n  if (decimals > 0 && hasNoDecimals && isNotZero) {\n    let zeros = '';\n\n    for (let i = 1; i <= decimals; i++) {\n      zeros = zeros + '0';\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>{valueParts[0]}</span>\n      {valueParts.length > 1 && (\n        <span className='decimals'>.{valueParts[1]}</span>\n      )}\n      {showLabel && (\n        <span className={`symbol ${props.token ? 'text-muted' : ''}`}>\n          &nbsp;{props.token ? props.token : erdLabel}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst Denominate = (props: DenominateType) => {\n  const { value } = props;\n\n  return !stringIsInteger(value)\n    ? denominateInvalid(props)\n    : denominateValid(props, props.egldLabel || '');\n};\n\nconst DenominateWrapper = (props: DenominateType) => {\n  const egldLabel = props.egldLabel || getEgldLabel();\n  const denominateProps = { ...props, egldLabel };\n  return <Denominate {...denominateProps} />;\n};\n\nexport default withClassNameWrapper(DenominateWrapper);\n","let fontawesomeFreeSolidIcons: any = {};\ntry {\n  fontawesomeFreeSolidIcons = require('@fortawesome/free-solid-svg-icons');\n} catch (err) {}\n\nexport default fontawesomeFreeSolidIcons;\n","let ReactFontawesome: any = {};\ntry {\n  ReactFontawesome = require('@fortawesome/react-fontawesome');\n} catch (err) {}\n\nexport default ReactFontawesome;\n","import React from 'react';\nimport { useGetNetworkConfig } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst ExplorerLink = ({\n  page,\n  text,\n  className\n}: {\n  page: string;\n  text?: any;\n  className?: string;\n}) => {\n  const {\n    network: { explorerAddress }\n  } = useGetNetworkConfig();\n  return (\n    <a\n      href={`${explorerAddress}${page}`}\n      {...{\n        target: '_blank'\n      }}\n      className={`link-style ${className}`}\n    >\n      {text ? (\n        <React.Fragment>{text}</React.Fragment>\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faSearch}\n          className='text-secondary'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(ExplorerLink);\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useExtensionLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ExtensionLoginButtonPropsType } from './types';\n\nconst ExtensionLoginButton: (\n  props: ExtensionLoginButtonPropsType\n) => JSX.Element = ({\n  token,\n  className = 'extension-login',\n  children,\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Maiar DeFi Wallet',\n  redirectAfterLogin = false,\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useExtensionLogin({\n    callbackRoute,\n    token,\n    redirectAfterLogin\n  });\n\n  const isFirefox = navigator.userAgent.indexOf('Firefox') != -1;\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left',\n    noExtensionButtonWrapper: 'btn btn-unlock d-inline-block',\n    noExtensionButtonContent:\n      'd-flex justify-content-between align-items-center',\n    noExtensionButtonTitle: 'title',\n    noExtensionButtonIcon: ''\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return !window.elrondWallet ? (\n    <a\n      rel='noreferrer'\n      href={\n        isFirefox\n          ? 'https://addons.mozilla.org/en-US/firefox/addon/maiar-defi-wallet/'\n          : 'https://chrome.google.com/webstore/detail/dngmlblcodfobpdpecaadgfbcggfjfnm?authuser=0&hl=en'\n      }\n      target='_blank'\n      className={classes.noExtensionButtonWrapper}\n    >\n      {children || (\n        <div className={classes.noExtensionButtonContent}>\n          <div className={classes.noExtensionButtonTitle}>\n            Maiar DeFi Wallet\n          </div>\n          <ReactFontawesome.FontAwesomeIcon\n            className={classes.noExtensionButtonIcon}\n            icon={icons.faArrowRight}\n          />\n        </div>\n      )}\n    </a>\n  ) : (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(ExtensionLoginButton);\n","import React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { wrapperClassName } from 'utils';\n\nconst ModalContainer = ({\n  children,\n  noSpacer,\n  className,\n  title,\n  onClose\n}: {\n  children: React.ReactNode;\n  noSpacer?: boolean;\n  className?: string;\n  title: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={onClose}\n      className={`modal-container ${\n        className ? className : ''\n      } ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='modal-card card w-100'>\n        <div className='card-title h5 mb-0'>\n          <div className='d-flex justify-content-between align-items-center pt-spacer px-spacer mb-0'>\n            <div className={'px-3'}>{title}</div>\n            <button\n              type='button'\n              className='btn btn-light px-3 py-2'\n              onClick={onClose}\n            >\n              <ReactFontawesome.FontAwesomeIcon\n                size='lg'\n                icon={icons.faTimes}\n              />\n            </button>\n          </div>\n        </div>\n\n        <div\n          className={`modal-card-body text-center ${\n            noSpacer ? 'p-0' : 'p-spacer'\n          }`}\n        >\n          {children}\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default ModalContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { PageStateProps } from './types';\n\nexport const PageState = ({\n  icon,\n  title,\n  action,\n  iconClass,\n  dataTestId,\n  description,\n  iconBgClass,\n  iconSize = '5x',\n  className = 'page-state',\n  shouldRenderDefaultCss = true\n}: PageStateProps) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'state m-auto p-4 text-center',\n      iconContainer: classNames('icon-state mx-auto', {\n        [`${iconBgClass}`]: Boolean(iconBgClass)\n      }),\n      iconClass: classNames(iconClass != null && iconClass),\n      title: 'h4 my-4',\n      description: 'mb-3'\n    }\n  );\n\n  return (\n    <div className={generatedClasses.wrapper} data-testid={dataTestId}>\n      {icon && (\n        <span className={generatedClasses.iconContainer}>\n          <ReactFontawesome.FontAwesomeIcon\n            icon={icon}\n            className={generatedClasses.iconClass}\n            size={iconSize}\n          />\n        </span>\n      )}\n      {title && <p className={generatedClasses.title}>{title}</p>}\n      {description && (\n        <div className={generatedClasses.description}>{description}</div>\n      )}\n      {action && <React.Fragment>{action}</React.Fragment>}\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(PageState);\n","import React from 'react';\n\nimport Denominate from 'UI/Denominate';\nimport { getAccountBalance } from 'utils';\n\ninterface AddressRowType {\n  selectedAddress?: string;\n  index: number;\n  address: string;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n}\n\n// TODO: why not use Trim component?\nconst trimHash = (hash: string, keep = 10) => {\n  const start = hash.substring(0, keep);\n  const end = hash.substring(hash.length - keep);\n  return `${start}...${end}`;\n};\n\nconst noBalance = '...';\n\nconst AddressRow = ({\n  address,\n  index,\n  selectedAddress,\n  onSelectAddress\n}: AddressRowType) => {\n  const [balance, setBalance] = React.useState(noBalance);\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    const { checked } = e.target as HTMLInputElement;\n    if (checked) {\n      onSelectAddress({ address, index });\n    }\n  };\n\n  const fetchBalance = async () => {\n    try {\n      const balance = await getAccountBalance(address);\n      setBalance(balance);\n    } catch (err) {\n      console.error('error fetching balance', err, balance);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchBalance();\n  }, []);\n\n  return (\n    <tr>\n      <td className='text-left'>\n        <div className='d-flex align-items-start text-left form-check'>\n          <input\n            type='radio'\n            id={`check_${index}`}\n            data-testid={`check_${index}`}\n            onChange={handleChange}\n            role='button'\n            checked={selectedAddress === address}\n            className='form-check-input mr-1'\n          />\n          <label\n            htmlFor={`check_${index}`}\n            role='button'\n            data-testid={`label_${index}`}\n            className='form-check-label text-nowrap trim-size-xl m-0'\n          >\n            <div className='d-flex align-items-center text-nowrap trim'>\n              <span>{trimHash(address)}</span>\n            </div>\n          </label>\n        </div>\n      </td>\n      <td className='text-left'>\n        <Denominate value={balance} />\n      </td>\n      <td className='text-left'>{index}</td>\n    </tr>\n  );\n};\n\nexport default AddressRow;\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\n\nimport AddressRow from './AddressRow';\n\nconst ledgerWaitingText = 'Waiting for device';\n\nconst addressesPerPage = 10;\n\ninterface AddressTablePropsType {\n  loading: boolean;\n  accounts: string[];\n  startIndex: number;\n  selectedAddress?: string;\n  className: string;\n  shouldRenderDefaultCss: boolean;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nconst AddressTable = ({\n  loading,\n  accounts,\n  startIndex,\n  selectedAddress,\n  onGoToPrevPage,\n  onGoToNextPage,\n  onConfirmSelectedAddress,\n  onSelectAddress,\n  shouldRenderDefaultCss = true,\n  className = 'ledger-address-table'\n}: AddressTablePropsType) => {\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: 'card my-4 text-center border-0',\n    cardBody: 'card-body p-4 mx-lg-4',\n    tableWrapper: 'table-responsive',\n    tableContent: 'table m-0 border-bottom',\n    tableHeader: 'py-2 text-semibold border-bottom',\n    tableHeaderText: 'text-left border-0',\n    buttonsWrapper: 'd-flex justify-content-center pager mt-2',\n    arrowButton: 'btn btn-link mx-2',\n    confirmButton: 'btn btn-primary px-4 mt-4'\n  });\n  switch (true) {\n    case loading:\n      return (\n        <PageState\n          className={className}\n          icon={icons.faCircleNotch}\n          iconClass='fa-spin text-primary'\n          title={ledgerWaitingText}\n        />\n      );\n    default:\n      return (\n        <React.Fragment>\n          <div className='m-auto'>\n            <div className={classes.wrapper}>\n              <div className={classes.cardBody}>\n                <div\n                  className={classes.tableWrapper}\n                  data-testid='ledgerAddresses'\n                >\n                  <table className={classes.tableContent}>\n                    <thead className={classes.tableHeader}>\n                      <tr>\n                        <th className={classes.tableHeaderText}>Address</th>\n                        <th className={classes.tableHeaderText}>Balance</th>\n                        <th className={classes.tableHeaderText}>#</th>\n                      </tr>\n                    </thead>\n                    <tbody data-testid='addressesTable'>\n                      {accounts.map((address, index) => {\n                        const key = index + startIndex * addressesPerPage;\n                        return (\n                          <AddressRow\n                            key={key}\n                            address={address}\n                            index={key}\n                            selectedAddress={selectedAddress}\n                            onSelectAddress={onSelectAddress}\n                          />\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n                <div className={classes.buttonsWrapper}>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToPrevPage}\n                    data-testid='prevBtn'\n                    disabled={startIndex === 0}\n                  >\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronLeft}\n                    />{' '}\n                    Prev\n                  </button>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToNextPage}\n                    data-testid='nextBtn'\n                  >\n                    Next{' '}\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronRight}\n                    />\n                  </button>\n                </div>\n                <button\n                  className={classes.confirmButton}\n                  disabled={selectedAddress === ''}\n                  onClick={onConfirmSelectedAddress}\n                  data-testid='confirmBtn'\n                >\n                  Confirm\n                </button>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n  }\n};\n\nexport default AddressTable;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nconst ConfirmAddress = ({\n  token,\n  noBorder\n}: {\n  token?: string;\n  noBorder?: boolean;\n}) => {\n  const { ledgerAccount } = useGetAccountInfo();\n  return (\n    <div className='m-auto'>\n      <div className={`card my-4 text-center ${noBorder ? 'border-0' : ''}`}>\n        <div className='card-body p-4 mx-lg-4'>\n          <h4 className='mb-4'>Confirm Ledger Address</h4>\n          <p>For security, please confirm that your address: </p>\n          <p className='lead border rounded p-2'>\n            {ledgerAccount ? ledgerAccount.address : ''}\n          </p>\n          {token && (\n            <React.Fragment>\n              <p>and Auth Token</p>\n              <p className='lead border rounded p-2'>{`${token}{}`}</p>\n            </React.Fragment>\n          )}\n          <p className='m-0'>\n            {token\n              ? 'are the one shown on your Ledger device screen now.'\n              : 'is the one shown on your Ledger device screen now.'}\n          </p>\n\n          <p>Select Approve on your device to confirm.</p>\n          <p>\n            Or, if it does not match, close this page and{' '}\n            <a\n              href='https://help.elrond.com/en/'\n              {...{\n                target: '_blank'\n              }}\n            >\n              contact support\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmAddress;\n","import React from 'react';\nimport { ReactComponent as LedgerLogo } from '../assets/ledger-nano.svg';\n\nconst LedgerConnect = ({\n  onClick,\n  error,\n  connectPageContent\n}: {\n  onClick: () => void;\n  error: string;\n  connectPageContent?: React.ReactNode;\n}) => {\n  return (\n    <div className='m-auto login-container'>\n      <div className='card my-4 text-center border-0'>\n        <div className='card-body p-4 mx-lg-4'>\n          {connectPageContent ? (\n            <React.Fragment>{connectPageContent}</React.Fragment>\n          ) : (\n            <React.Fragment>\n              <LedgerLogo className='mb-4' />\n              <h4 className='mb-4'>Connect Ledger</h4>\n              <p className='lead mb-4'>\n                Unlock your device &amp; open the Elrond App.\n              </p>\n            </React.Fragment>\n          )}\n\n          <div>\n            {error && (\n              <p className='text-danger d-flex justify-content-center align-items-center'>\n                {error}\n              </p>\n            )}\n            <button\n              className='btn btn-primary px-4'\n              onClick={onClick}\n              data-testid='connectBtn'\n            >\n              Connect Ledger\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LedgerConnect;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport { useLedgerLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\n\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport AddressTable from './AddressTable';\nimport ConfirmAddress from './ConfirmAddress';\nimport LedgerConnect from './LedgerConnect';\n\nconst ledgerWaitingText = 'Waiting for device';\n\ninterface LedgerLoginContainerPropsType {\n  callbackRoute: string;\n  className?: string;\n  shouldRenderDefaultCss?: boolean;\n  wrapContentInsideModal?: boolean;\n  redirectAfterLogin?: boolean;\n  token?: string;\n  onClose?: () => void;\n}\n\nfunction LedgerLoginContainer({\n  callbackRoute,\n  className = 'login-modal-content',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  onClose,\n  token\n}: LedgerLoginContainerPropsType) {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    { spinner: 'fa-spin text-primary' }\n  );\n  const { ledgerAccount } = useGetAccountInfo();\n  const [\n    onStartLogin,\n    { error, isLoading },\n    {\n      showAddressList,\n      accounts,\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress,\n      startIndex,\n      selectedAddress\n    }\n  ] = useLedgerLogin({ callbackRoute, token, redirectAfterLogin });\n\n  function getContent() {\n    if (isLoading) {\n      return (\n        <PageState\n          icon={icons.faCircleNotch}\n          iconClass={generatedClasses.spinner}\n          title={ledgerWaitingText}\n        />\n      );\n    }\n    if (ledgerAccount != null && !error) {\n      return <ConfirmAddress token={token} />;\n    }\n\n    if (showAddressList && !error) {\n      return (\n        <AddressTable\n          accounts={accounts}\n          loading={isLoading}\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultCss}\n          onGoToNextPage={onGoToNextPage}\n          onGoToPrevPage={onGoToPrevPage}\n          onSelectAddress={onSelectAddress}\n          startIndex={startIndex}\n          selectedAddress={selectedAddress?.address}\n          onConfirmSelectedAddress={onConfirmSelectedAddress}\n        />\n      );\n    }\n\n    return <LedgerConnect onClick={onStartLogin} error={error} />;\n  }\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with ledger'}\n      className={className}\n      onClose={onClose}\n    >\n      {getContent()}\n    </ModalContainer>\n  ) : (\n    getContent()\n  );\n}\n\nexport default withClassNameWrapper(LedgerLoginContainer);\n","import React from 'react';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport LedgerLoginContainer from '../LoginModal';\nimport { LedgerLoginButtonPropsType } from './types';\n\nconst LedgerLoginButton: (props: LedgerLoginButtonPropsType) => JSX.Element = ({\n  token,\n  callbackRoute,\n  children,\n  onModalOpens,\n  onModalCloses,\n  loginButtonText = 'Ledger',\n  buttonClassName,\n  className = 'ledger-login',\n  redirectAfterLogin = false,\n  wrapContentInsideModal = true,\n  shouldRenderDefaultCss = true,\n  shouldRenderDefaultModalCss = true,\n  hideButtonWhenModalOpens = false\n}) => {\n  const [showLoginModal, setShowLoginModal] = React.useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  function handleOpenModal() {\n    setShowLoginModal(true);\n    onModalOpens?.();\n  }\n\n  function handleCloseModal() {\n    setShowLoginModal(false);\n    onModalCloses?.();\n  }\n  \n  const shouldRenderButton = !hideButtonWhenModalOpens || !showLoginModal;\n\n  return (\n    <span className={wrapperClassName}>\n      {shouldRenderButton && (\n        <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n          {children || (\n            <span className={generatedClasses.loginText}>\n              {loginButtonText}\n            </span>\n          )}\n        </button>\n      )}\n      {showLoginModal && (\n        <LedgerLoginContainer\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultModalCss}\n          callbackRoute={callbackRoute}\n          token={token}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(LedgerLoginButton);\n","import React from 'react';\n\nimport { useGetNotification } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { NotificationTypesEnum } from 'types';\n\nimport { wrapperClassName } from 'utils';\nimport PageState from '../PageState';\n\nconst typedIcons: any = icons;\n\nconst notificationTypesToIcons = {\n  [NotificationTypesEnum.warning]: typedIcons.faExclamationTriangle\n};\nconst defaultIcon = typedIcons.faExclamationTriangle;\n\nexport function NotificationModal() {\n  const { notification, clearNotification } = useGetNotification();\n\n  const showModal = Boolean(notification);\n  const onDone = () => {\n    clearNotification();\n  };\n\n  const type = notification?.type as NotificationTypesEnum.warning;\n\n  const icon = notification\n    ? notificationTypesToIcons[type] || defaultIcon\n    : null;\n\n  return notification ? (\n    <ReactBootstrap.Modal\n      show={showModal}\n      backdrop={true}\n      onHide={notification}\n      className={`modal-container ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='card w-100 notification-modal'>\n        <PageState\n          icon={icon}\n          iconClass={notification.iconClassName}\n          iconBgClass='p-4 rounded-bg-circle'\n          iconSize='3x'\n          title={notification.title}\n          description={notification.description}\n          action={\n            <button className='btn btn-primary' onClick={onDone}>\n              Done\n            </button>\n          }\n        />\n      </div>\n    </ReactBootstrap.Modal>\n  ) : null;\n}\n\nexport default NotificationModal;\n","import React from 'react';\n\nconst Dot = ({\n  color,\n  'data-testid': dataTestId\n}: {\n  color: string;\n  'data-testid'?: string;\n}) => {\n  return <span className={`dot ${color}`} data-testid={dataTestId} />;\n};\nexport default Dot;\n","import React from 'react';\nimport Dot from './Dot';\n\ninterface ProgressStepsType {\n  totalSteps: number;\n  currentStep: number;\n  className?: string;\n}\n\nconst ProgressSteps = ({\n  totalSteps,\n  currentStep,\n  className\n}: ProgressStepsType) => {\n  const dots = [];\n\n  for (let i = 1; i <= totalSteps; i += 1) {\n    const isCurrentStep = currentStep === i;\n    const color =\n      isCurrentStep || i < currentStep ? 'bg-primary' : 'bg-secondary';\n\n    dots.push(\n      <Dot\n        data-testid={`step${i}${isCurrentStep ? 'active' : ''}`}\n        key={i}\n        color={color}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={`progress-steps d-flex justify-content-center ${className}`}\n    >\n      <div className='steps d-flex justify-content-center align-items-center position-relative'>\n        <hr className='position-absolute w-100 m-0' />\n        {dots}\n      </div>\n    </div>\n  );\n};\nexport default ProgressSteps;\n","import React from 'react';\nimport classNames from 'optionalPackages/classnames';\nimport freeSolidIcons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nconst SignWithExtensionModal = ({\n  handleClose,\n  error,\n  callbackRoute,\n  transactions,\n  className = 'extension-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container extension',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n  const description = error\n    ? error\n    : transactions && transactions.length > 1\n    ? 'Check your Elrond Wallet Extension to sign the transactions'\n    : 'Check your Elrond Wallet Extension to sign the transaction';\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? freeSolidIcons.faTimes : freeSolidIcons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar DeFi Wallet'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithExtensionModal;\n","import * as React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\n\nexport const Simple = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol'>{children}</div>\n);\n\nexport const Combined = ({\n  small,\n  children\n}: {\n  small: boolean | undefined;\n  children: React.ReactNode;\n}) => (\n  <div className={`token-symbol-combined ${small ? 'small' : ''}`}>\n    {children}\n  </div>\n);\n\nexport const Wrapped = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-wrapped'>\n    <div className='wrapped rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faDollarSign} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n\nexport const Pool = ({\n  first,\n  second\n}: {\n  first: React.ReactNode;\n  second: React.ReactNode;\n}) => (\n  <div className='token-symbol-pool'>\n    <div className='pool rounded-circle shadow'>\n      {first}\n      <div className='pool-icon'>{second}</div>\n    </div>\n  </div>\n);\n\nexport const Locked = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-locked'>\n    <div className='locked rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faLock} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n","import React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getEgldLabel, wrapperClassName } from 'utils';\nimport { ReactComponent as EgldIcon } from '../../assets/icons/EGLD.svg';\nimport { Simple, Combined } from './TokenSymbol';\n\nconst getIdentifierWithoutNonce = (identifier: string) => {\n  const tokenParts = identifier.split('-');\n  return identifier.includes('-')\n    ? `${tokenParts[0]}-${tokenParts[1]}`\n    : identifier;\n};\n\ntype TokenIconProps = {\n  token: string;\n  combined?: boolean | undefined;\n  small?: boolean | undefined;\n  tokenAvatar?: string;\n};\ntype TokenIconType = TokenIconProps & {\n  symbol: string;\n  label: string;\n  icon: React.ReactNode;\n};\n\nfunction getIcon(isEgldTransfer: boolean, tokenAvatar?: string) {\n  if (tokenAvatar) {\n    return <img className='token-symbol-custom-token' src={tokenAvatar} />;\n  }\n  return isEgldTransfer ? (\n    <EgldIcon />\n  ) : (\n    <ReactFontawesome.FontAwesomeIcon icon={icons.faDiamond} />\n  );\n}\n\nconst getDetails = (token: string, tokenAvatar?: string): TokenIconType => {\n  const egldLabel = getEgldLabel();\n  const isEgldTransfer = token === egldLabel;\n\n  return {\n    token,\n    symbol: token ? token.split('-')[0] : '',\n    label: token,\n    // eslint-disable-next-line react/display-name\n    icon: () => getIcon(isEgldTransfer, tokenAvatar)\n  };\n};\n\nexport default class TokenDetails extends React.Component {\n  static Token = (props: TokenIconProps) => (\n    <React.Fragment>{props.token}</React.Fragment>\n  );\n  static Symbol = (props: TokenIconProps) => (\n    <React.Fragment>\n      {\n        getDetails(getIdentifierWithoutNonce(props.token), props.tokenAvatar)\n          .symbol\n      }\n    </React.Fragment>\n  );\n  static Label = (props: TokenIconProps) => (\n    <React.Fragment>\n      {\n        getDetails(getIdentifierWithoutNonce(props.token), props.tokenAvatar)\n          .label\n      }\n    </React.Fragment>\n  );\n  static Icon = (props: TokenIconProps) => {\n    const Component: any =\n      process.env.NODE_ENV !== 'test'\n        ? getDetails(getIdentifierWithoutNonce(props.token), props.tokenAvatar)\n            .icon\n        : () => null;\n\n    return (\n      <span className={wrapperClassName}>\n        {props.combined ? (\n          <Combined small={props.small}>\n            <Component />\n          </Combined>\n        ) : (\n          <Simple>\n            <Component />\n          </Simple>\n        )}\n      </span>\n    );\n  };\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport { decodePart } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst allOccurences = (sourceStr: string, searchStr: string) =>\n  [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map((a) => a.index);\n\nconst TransactionData = ({\n  data,\n  highlight,\n  isScCall\n}: {\n  data: string;\n  highlight?: string;\n  isScCall?: boolean;\n}) => {\n  let output = <React.Fragment>{data}</React.Fragment>;\n\n  const [encodedScCall, ...remainingDataFields] =\n    highlight && isScCall ? highlight.split('@') : [];\n\n  if (data && highlight && allOccurences(data, highlight).length === 1) {\n    switch (true) {\n      case data.startsWith(highlight): {\n        const [, rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            {highlight}\n            <span className='text-muted'>{rest}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n      case data.endsWith(highlight): {\n        const [rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{rest}</span>\n            {highlight}\n          </React.Fragment>\n        );\n        break;\n      }\n\n      default: {\n        const [start, end] = data.split(highlight);\n\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{start}</span>\n            <span className={'highlighted'}>{highlight}</span>\n            <span className='text-muted'>{end}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {encodedScCall && (\n        <div className='form-group mb-0 data-field mw-100'>\n          <span className='form-label text-secondary d-block'>SC Call</span>\n\n          <div\n            data-testid='confirmScCall'\n            className='textarea sc-call form-control cursor-text mt-1 text-break-all'\n          >\n            {[decodePart(encodedScCall), ...remainingDataFields].join('@')}\n          </div>\n        </div>\n      )}\n      <div className='form-group mb-0 data-field mw-100'>\n        <span className='form-label text-secondary d-block'>Data</span>\n\n        <div\n          data-testid='confirmData'\n          className='textarea form-control cursor-text mt-1 text-break-all'\n        >\n          {data ? output : 'N/A'}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TransactionData);\n","import React from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { useGetNetworkConfig } from 'hooks';\nimport useGetTokenDetails from 'hooks/transactions/useGetTokenDetails';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { ActiveLedgerTransactionType, MultiSignTxType } from 'types';\nimport PageState from 'UI/PageState';\nimport ProgressSteps from 'UI/ProgressSteps';\nimport TokenDetails from 'UI/TokenDetails';\nimport TransactionData from 'UI/TransactionData';\nimport {\n  denominate,\n  getEgldLabel,\n  getGeneratedClasses,\n  isTokenTransfer\n} from 'utils';\n\nexport interface SignStepType {\n  onSignTransaction: () => void;\n  onPrev: () => void;\n  handleClose: () => void;\n  waitingForDevice: boolean;\n  error: string | null;\n  callbackRoute?: string;\n  title?: React.ReactNode;\n  currentStep: number;\n  currentTransaction: ActiveLedgerTransactionType | null;\n  allTransactions: MultiSignTxType[];\n  isLastTransaction: boolean;\n  className: string;\n}\n\nconst SignStep = ({\n  onSignTransaction,\n  handleClose,\n  onPrev,\n  title,\n  waitingForDevice,\n  currentTransaction,\n  error,\n  allTransactions,\n  isLastTransaction,\n  currentStep,\n  className\n}: SignStepType) => {\n  const egldLabel = getEgldLabel();\n\n  if (!currentTransaction) {\n    return null;\n  }\n\n  const transactionData = currentTransaction.transaction.getData().toString();\n  const { network } = useGetNetworkConfig();\n\n  const {\n    tokenId,\n    amount,\n    type,\n    multiTxData,\n    receiver\n  } = currentTransaction.transactionTokenInfo;\n\n  const isTokenTransaction = Boolean(\n    tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n  );\n\n  const isFirst = currentStep === 0;\n\n  const onCloseClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (isFirst) {\n      handleClose();\n    } else {\n      onPrev();\n    }\n  };\n\n  const continueWithoutSigning =\n    type && multiTxData && !transactionData.endsWith(multiTxData);\n\n  let signBtnLabel = 'Sign & Continue';\n  signBtnLabel = waitingForDevice ? 'Check your Ledger' : signBtnLabel;\n  signBtnLabel =\n    isLastTransaction && !waitingForDevice ? 'Sign & Submit' : signBtnLabel;\n  signBtnLabel = continueWithoutSigning ? 'Continue' : signBtnLabel;\n\n  const { tokenDenomination, tokenAvatar } = useGetTokenDetails({\n    tokenId: currentTransaction.transactionTokenInfo.tokenId\n  });\n\n  const denominatedAmount = denominate({\n    input: isTokenTransaction\n      ? amount\n      : currentTransaction.transaction.getValue().toString(),\n    denomination: isTokenTransaction\n      ? tokenDenomination\n      : Number(network.egldDenomination),\n    decimals: Number(network.decimals),\n    showLastNonZeroDecimal: false,\n    addCommas: true\n  });\n\n  const scamReport = currentTransaction.receiverScamInfo;\n  const showProgressSteps = allTransactions.length > 1;\n\n  const classes = getGeneratedClasses(className, true, {\n    formGroup: 'form-group text-left',\n    formLabel: 'form-label text-secondary',\n    icon: 'text-white',\n    contentWrapper:\n      'd-flex flex-column justify-content-start flex-md-row justify-content-md-between mb-3',\n    tokenWrapper: 'mb-3 mb-md-0 d-flex flex-column align-items-start',\n    tokenLabel: 'text-secondary text-left',\n    tokenValue: 'd-flex align-items-center mt-1',\n    scamReport: 'text-warning',\n    scamReportIcon: 'text-warning mr-1',\n    tokenAmountLabel: 'text-secondary text-left',\n    tokenAmountValue: 'd-flex align-items-center',\n    dataFormGroup: 'form-group text-left',\n    errorMessage:\n      'text-danger d-flex justify-content-center align-items-center',\n    buttonsWrapper: 'd-flex align-items-center justify-content-end mt-spacer',\n    cancelButton: 'btn btn-dark text-white flex-even mr-2',\n    signButton: `btn ${\n      scamReport ? 'btn-warning' : 'btn-primary'\n    } flex-even ml-2`\n  });\n\n  return (\n    <PageState\n      icon={error ? icons.faTimes : icons.faHourglass}\n      iconClass={classes.icon}\n      iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n      iconSize='3x'\n      className={className}\n      title={title || 'Confirm on Ledger'}\n      description={\n        <React.Fragment>\n          {currentTransaction.transaction && (\n            <React.Fragment>\n              {showProgressSteps && (\n                <ProgressSteps\n                  totalSteps={allTransactions.length}\n                  currentStep={currentStep + 1} // currentStep starts at 0\n                  className='mb-4'\n                />\n              )}\n\n              <div className={classes.formGroup} data-testid='transactionTitle'>\n                <div className={classes.formLabel}>To: </div>\n                {multiTxData\n                  ? new Address(receiver).bech32()\n                  : currentTransaction.transaction.getReceiver().toString()}\n                {scamReport && (\n                  <div className={classes.scamReport}>\n                    <span>\n                      <ReactFontawesome.FontAwesomeIcon\n                        icon={icons.faExclamationTriangle}\n                        className={classes.scamReportIcon}\n                      />\n                      <small>{scamReport}</small>\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              <div className={classes.contentWrapper}>\n                <div className={classes.tokenWrapper}>\n                  <div className={classes.tokenlabel}>Token</div>\n                  <div className={classes.tokenValue}>\n                    <TokenDetails.Icon\n                      tokenAvatar={tokenAvatar}\n                      token={tokenId || egldLabel}\n                    />\n                    <div className='mr-1'></div>\n                    <TokenDetails.Label token={tokenId || egldLabel} />\n                  </div>\n                </div>\n                <div>\n                  <div className={classes.tokenAmountLabel}>Amount</div>\n                  <div className={classes.tokenAmountValue}>\n                    <div className='mr-1'>{denominatedAmount}</div>\n                    <TokenDetails.Symbol token={tokenId || egldLabel} />\n                  </div>\n                </div>\n              </div>\n\n              <div className={classes.dataFormGroup}>\n                {currentTransaction.transaction.getData() && (\n                  <TransactionData\n                    {...{\n                      data: currentTransaction.transaction.getData().toString(),\n                      highlight: multiTxData,\n                      isScCall: !tokenId\n                    }}\n                  />\n                )}\n              </div>\n              {error && <p className={classes.errorMessage}>{error}</p>}\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      }\n      action={\n        <div className={classes.buttonsWrapper}>\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={onCloseClick}\n            className={classes.cancelButton}\n          >\n            {isFirst ? 'Cancel' : 'Back'}\n          </button>\n\n          <button\n            type='button'\n            className={classes.signButton}\n            id='signBtn'\n            data-testid='signBtn'\n            onClick={onSignTransaction}\n            disabled={waitingForDevice}\n          >\n            {signBtnLabel}\n          </button>\n        </div>\n      }\n    />\n  );\n};\n\nexport default SignStep;\n","import React from 'react';\nimport { useSignTransactionsWithDevice } from 'hooks';\nimport classNames from 'optionalPackages/classnames';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport SignStep from './SignStep';\n\nconst SignWithDeviceModal = ({\n  handleClose,\n  error,\n  className = 'device-modal',\n  verifyReceiverScam = true,\n  title = 'Confirm transaction'\n}: SignModalPropsType) => {\n  const {\n    onSignTransaction,\n    onNext,\n    onPrev,\n    allTransactions,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    currentStep,\n    callbackRoute,\n    currentTransaction\n  } = useSignTransactionsWithDevice({\n    onCancel: handleClose,\n    verifyReceiverScam\n  });\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    container: 'card container',\n    cardBody: 'card-body'\n  });\n  return (\n    <ReactBootstrap.Modal\n      show={currentTransaction != null}\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <div className={classes.container}>\n        <div className={classes.cardBody}>\n          <SignStep\n            {...{\n              onSignTransaction,\n              onNext,\n              onPrev,\n              allTransactions,\n              waitingForDevice,\n              isLastTransaction,\n              currentStep,\n              callbackRoute,\n              currentTransaction,\n              handleClose: onAbort,\n              className,\n              error,\n              title\n            }}\n          />\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithDeviceModal;\n","import React from 'react';\nimport { SignModalPropsType } from 'types';\nimport SignWithDeviceModal from '../SignWithDeviceModal';\n\nconst SignWithLedgerModal = (props: SignModalPropsType) => {\n  return (\n    <SignWithDeviceModal\n      {...props}\n      title={props.title || 'Confirm on Ledger'}\n      className={props.className || 'ledger-modal'}\n    />\n  );\n};\n\nexport default SignWithLedgerModal;\n","import React from 'react';\n\nimport classNames from 'optionalPackages/classnames';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nexport const SignWithWalletConnectModal = ({\n  error,\n  handleClose,\n  callbackRoute,\n  transactions,\n  className = 'wallet-connect-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n\n  const hasMultipleTransactions = transactions && transactions?.length > 1;\n  const description = error\n    ? error\n    : `Check your phone to sign the transaction${\n        hasMultipleTransactions ? 's' : ''\n      }`;\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={close}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? icons.faTimes : icons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithWalletConnectModal;\n","import React from 'react';\n\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport { useGetLoginInfo } from 'hooks';\nimport {\n  useGetAccountProvider,\n  useGetSignTransactionsError,\n  useSignTransactions\n} from 'hooks';\nimport { LoginMethodsEnum } from 'types';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport SignWithExtensionModal from './SignWithExtensionModal';\nimport SignWithLedgerModal from './SignWithLedgerModal';\nimport SignWithWalletConnectModal from './SignWithWalletConnectModal';\n\ninterface SignPropsType {\n  handleClose: () => void;\n  error: string | null;\n  sessionId?: string;\n  transactions: Transaction[];\n  providerType: LoginMethodsEnum;\n  callbackRoute: string;\n  className?: string;\n  verifyReceiverScam?: boolean;\n}\n\ninterface CustomConfirmScreensType {\n  Ledger: (signProps: SignPropsType) => JSX.Element;\n  Extension: (signProps: SignPropsType) => JSX.Element;\n  WalletConnect: (signProps: SignPropsType) => JSX.Element;\n  Extra: (signProps: SignPropsType) => JSX.Element;\n}\n\ninterface SignTransactionsPropsType {\n  className?: string;\n  CustomConfirmScreens?: CustomConfirmScreensType;\n  verifyReceiverScam?: SignPropsType['verifyReceiverScam'];\n}\n\nfunction SignTransactionsModals({\n  className,\n  CustomConfirmScreens,\n  verifyReceiverScam = true\n}: SignTransactionsPropsType) {\n  const {\n    callbackRoute,\n    transactions,\n    error,\n    sessionId,\n    onAbort,\n    hasTransactions\n  } = useSignTransactions();\n\n  const { providerType } = useGetAccountProvider();\n  const signTransactionsError = useGetSignTransactionsError();\n  const { loginMethod } = useGetLoginInfo();\n\n  const handleClose = () => {\n    onAbort(sessionId);\n  };\n\n  const signError = error || signTransactionsError;\n\n  const signProps: SignPropsType = {\n    handleClose,\n    error: signError,\n    sessionId,\n    transactions: transactions!,\n    providerType,\n    callbackRoute,\n    className,\n    verifyReceiverScam\n  };\n\n  if (signError || hasTransactions) {\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger:\n        return CustomConfirmScreens?.Ledger ? (\n          <CustomConfirmScreens.Ledger {...signProps} />\n        ) : (\n          <SignWithLedgerModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.walletconnect:\n        return CustomConfirmScreens?.WalletConnect ? (\n          <CustomConfirmScreens.WalletConnect {...signProps} />\n        ) : (\n          <SignWithWalletConnectModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.extension:\n        return CustomConfirmScreens?.Extension ? (\n          <CustomConfirmScreens.Extension {...signProps} />\n        ) : (\n          <SignWithExtensionModal {...signProps} />\n        );\n\n      case LoginMethodsEnum.extra:\n        return CustomConfirmScreens?.Extra ? (\n          <CustomConfirmScreens.Extra {...signProps} />\n        ) : null;\n\n      default:\n        return null;\n    }\n  }\n\n  return null;\n}\n\nexport default withClassNameWrapper(SignTransactionsModals);\n","enum SessionStorageKeysEnum {\n  'toasts' = 'toasts'\n}\n\nexport function setToastsIdsToStorage(ids: string[]) {\n  return sessionStorage.setItem(\n    SessionStorageKeysEnum.toasts,\n    JSON.stringify(ids)\n  );\n}\n\nexport function getToastsIdsFromStorage() {\n  const toastsIds = sessionStorage.getItem(SessionStorageKeysEnum.toasts);\n  return toastsIds != null ? JSON.parse(toastsIds) : [];\n}\n","import React from 'react';\nimport classnames from 'optionalPackages/classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst IconState = ({\n  icon,\n  iconSize = '3x',\n  className = 'icon-state',\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: classnames('icon-state mx-auto', className, {\n        half: iconSize === '2x'\n      }),\n      icon: classnames('text-white', className)\n    }\n  );\n\n  return (\n    <span className={generatedClasses.wrapper}>\n      <ReactFontawesome.FontAwesomeIcon\n        icon={icon}\n        size={iconSize}\n        className={generatedClasses.icon}\n      />\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(IconState);\n","import React from 'react';\nimport moment from 'optionalPackages/moment';\nimport { logarithmicRest } from 'utils';\nimport storage from 'utils/storage';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './type';\n\nconst Progress = ({\n  id,\n  children,\n  progress,\n  done,\n  expiresIn = 10 * 60\n}: Props) => {\n  const ref = React.useRef(null);\n  const intervalRef = React.useRef<any>();\n  const removeTxFromSession = () => {\n    const toastProgress = storage.session.getItem('toastProgress');\n    const hasSessionStoredTx = Boolean(toastProgress?.[id]);\n\n    if (!hasSessionStoredTx) {\n      return;\n    }\n\n    const expires = moment().add(expiresIn, 'seconds').unix();\n\n    delete toastProgress[id];\n\n    storage.session.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires\n    });\n  };\n\n  const saveToSession = ({ value }: { value: number }) => {\n    const toastProgress = storage.session.getItem('toastProgress') || {};\n    toastProgress[id] = value;\n    storage.session.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires: moment().add(expiresIn, 'seconds').unix()\n    });\n  };\n\n  const getInitialData = () => {\n    const totalSeconds = progress ? progress.endTime - progress.startTime : 0;\n    const toastProgress = storage.session.getItem('toastProgress');\n    const remaining = progress\n      ? ((progress.endTime - moment().unix()) * 100) / totalSeconds\n      : 0;\n\n    const currentRemaining =\n      toastProgress && id in toastProgress ? toastProgress[id] : remaining;\n    return { currentRemaining, totalSeconds };\n  };\n\n  const { totalSeconds, currentRemaining } = getInitialData();\n\n  const [percentRemaining, setPercentRemaining] =\n    React.useState<number>(currentRemaining);\n\n  React.useEffect(() => {\n    if (progress) {\n      const maxPercent = 90;\n      const perc = totalSeconds / maxPercent;\n      const int = moment.duration(perc.toFixed(2), 's').asMilliseconds();\n\n      if (done) {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const value = existing - 1;\n              if (value <= 0) {\n                clearInterval(intervalRef.current);\n                removeTxFromSession();\n                return 0;\n              } else {\n                saveToSession({ value });\n                return value;\n              }\n            });\n          }\n        }, 5);\n      } else {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const decrement =\n                existing > 100 - maxPercent ? 1 : logarithmicRest(existing);\n              const value = existing - decrement;\n              saveToSession({ value });\n              return value;\n            });\n          }\n        }, int);\n      }\n\n      return () => {\n        clearInterval(intervalRef.current);\n      };\n    }\n    return;\n  }, [progress, done]);\n  return progress ? (\n    <div className='progress position-relative' ref={ref}>\n      <div\n        className='progress-bar'\n        role='progressbar'\n        style={{ width: `${percentRemaining}%` }}\n        aria-valuenow={percentRemaining}\n        aria-valuemin={0}\n        aria-valuemax={100}\n      >\n        <div className='content-height'>{children}</div>\n      </div>\n      <div className='d-flex position-absolute w-100'>{children}</div>\n    </div>\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(Progress);\n","function fallbackCopyTextToClipboard(text: string) {\n  let success = false;\n\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  textArea.style.position = 'fixed';\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    document.execCommand('copy');\n    success = true;\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n\n  return success;\n}\n\nexport default async function copyTextToClipboard(text: string) {\n  let success = false;\n\n  if (!navigator.clipboard) {\n    success = fallbackCopyTextToClipboard(text);\n  } else {\n    success = await navigator.clipboard.writeText(text).then(\n      function done() {\n        return true;\n      },\n      function error(err) {\n        console.error('Async: Could not copy text: ', err);\n        return false;\n      }\n    );\n  }\n\n  return success;\n}\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport copyTextToClipboard from './helpers/copyToClipboard';\n\ninterface CopyButtonType {\n  text: string;\n  className?: string;\n}\n\nconst CopyButton = ({ text, className = '' }: CopyButtonType) => {\n  const [copyResult, setCopyResut] = React.useState({\n    default: true,\n    success: false\n  });\n\n  const handleCopyToClipboard = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const noSpaces = text ? text.trim() : text;\n    setCopyResut({\n      default: false,\n      success: await copyTextToClipboard(noSpaces)\n    });\n\n    setTimeout(() => {\n      setCopyResut({\n        default: true,\n        success: false\n      });\n    }, 1000);\n  };\n\n  return (\n    <a\n      href='/#'\n      onClick={handleCopyToClipboard}\n      className={`side-action text-secondary ${className}`}\n    >\n      {copyResult.default || !copyResult.success ? (\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faCopy} />\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faCheck}\n          className='text-primary-highlight'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(CopyButton);\n","import React from 'react';\nimport { useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\ninterface TrimType {\n  text: string;\n  dataTestId?: string;\n}\n\nconst Trim = ({ text, dataTestId = '' }: TrimType) => {\n  const [overflow, setOverflow] = React.useState(false);\n  const trimRef = React.useRef(document.createElement('span'));\n  const hiddenTextRef = React.useRef(document.createElement('span'));\n\n  const listener = useCallback(\n    debounce(() => {\n      if (trimRef.current && hiddenTextRef.current) {\n        const diff =\n          hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n        setOverflow(diff > 1);\n      }\n    }, 300),\n    []\n  );\n\n  const addWindowResizeListener = () => {\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  };\n\n  React.useEffect(addWindowResizeListener);\n\n  React.useEffect(() => {\n    listener();\n  }, []);\n\n  return (\n    <span\n      ref={trimRef}\n      className={`trim ${overflow ? 'overflow' : ''}`}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className='hidden-text-ref'>\n        {text}\n      </span>\n\n      {overflow ? (\n        <React.Fragment>\n          <span className='left'>\n            <span>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n          <span className='ellipsis'>...</span>\n          <span className='right'>\n            <span>{String(text).substring(Math.ceil(text.length / 2))}</span>\n          </span>\n        </React.Fragment>\n      ) : (\n        <span>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(Trim);\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport CopyButton from 'UI/CopyButton';\nimport ExplorerLink from 'UI/ExplorerLink';\nimport Trim from 'UI/Trim';\nimport { getGeneratedClasses, isServerTransactionPending } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst TxDetails = ({\n  title,\n  transactions,\n  className = 'tx-details',\n  isTimedOut = false,\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      title: 'mb-0',\n      statusTransactions: 'mb-2 mt-1',\n      iconSuccess: 'mr-1 text-secondary',\n      iconFailed: 'mr-1 text-secondary',\n      trimContainer: 'text-nowrap trim-fs-sm mr-3',\n      iconPending: 'mr-1 text-secondary fa-spin slow-spin',\n      item: 'tx-description d-flex justify-content-start align-items-center'\n    }\n  );\n\n  const iconSuccessData = {\n    icon: icons.faCheck,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconFailedData = {\n    icon: icons.faTimes,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconPendingData = {\n    icon: icons.faCircleNotch,\n    classNames: generatedClasses.iconPending\n  };\n\n  const iconData: Record<string, typeof iconPendingData> = {\n    pending: iconPendingData,\n    success: iconSuccessData,\n    completed: iconSuccessData,\n    fail: iconFailedData,\n    invalid: iconFailedData,\n    timedOut: iconFailedData\n  };\n  return (\n    <React.Fragment>\n      {title && <div className={generatedClasses.title}>{title}</div>}\n      <div className={generatedClasses.statusTransactions}>\n        {\n          transactions.filter((tx) => !isServerTransactionPending(tx.status))\n            .length\n        }{' '}\n        / {transactions.length} transactions processed\n      </div>\n      {transactions.map(({ hash, status }) => {\n        const iconSrc = iconData[status];\n        return (\n          <div className={generatedClasses.item} key={hash}>\n            {!isTimedOut && iconSrc != null && (\n              <ReactFontawesome.FontAwesomeIcon\n                icon={iconSrc.icon}\n                className={iconSrc.classNames}\n              />\n            )}\n            <span\n              className={generatedClasses.trimContainer}\n              style={{ width: '10rem' }}\n            >\n              <Trim text={hash} />\n            </span>\n            <CopyButton text={hash} />\n            {!isServerTransactionPending(status) && (\n              <ExplorerLink page={`/transactions/${hash}`} className='ml-2' />\n            )}\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TxDetails);\n","import React, { useMemo, useRef, useState } from 'react';\n\nimport { useGetTransactionDisplayInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport moment from 'optionalPackages/moment';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { shardSelector } from 'redux/selectors';\nimport { isCrossShardTransaction } from 'services/transactions/isCrossShardTransaction';\nimport { SignedTransactionType } from 'types';\nimport IconState from 'UI/IconState';\nimport Progress from 'UI/Progress';\nimport TxDetails from 'UI/TxDetails';\nimport {\n  getAddressFromDataField,\n  getGeneratedClasses,\n  getIsTransactionPending,\n  getIsTransactionTimedOut\n} from 'utils';\n\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { TransactionToastPropsType } from './types';\n\nconst averageTxDurationMs = 6000;\nconst crossShardRounds = 5;\n\nconst TransactionToast = ({\n  toastId,\n  title = '',\n  shouldRenderDefaultCss = true,\n  className = 'transaction-toast',\n  withTxNonce = false,\n  transactions,\n  status,\n  onClose,\n  startTimeProgress,\n  endTimeProgress,\n  lifetimeAfterSuccess\n}: TransactionToastPropsType) => {\n  const ref = useRef(null);\n  const [shouldRender, setShouldRender] = useState(true);\n  const transactionDisplayInfo = useGetTransactionDisplayInfo(toastId);\n  const accountShard = useSelector(shardSelector);\n\n  const {\n    errorMessage = 'Transaction failed',\n    timedOutMessage = 'Transaction timed out',\n    successMessage = 'Transaction successful',\n    processingMessage = 'Processing transaction'\n  } = transactionDisplayInfo;\n\n  const isSameShard = useMemo(\n    () =>\n      transactions!.reduce(\n        (\n          prevTxIsSameShard: boolean,\n          { receiver, data }: SignedTransactionType\n        ) => {\n          const receiverAddress = getAddressFromDataField({\n            receiver,\n            data\n          });\n          if (receiverAddress == null) {\n            return prevTxIsSameShard;\n          }\n          return (\n            prevTxIsSameShard &&\n            isCrossShardTransaction({\n              receiverAddress,\n              senderShard: accountShard\n            })\n          );\n        },\n        true\n      ),\n    [transactions, accountShard]\n  );\n\n  const shardAdjustedDuration = isSameShard\n    ? averageTxDurationMs\n    : crossShardRounds * averageTxDurationMs;\n\n  const transactionDuration =\n    transactionDisplayInfo?.transactionDuration || shardAdjustedDuration;\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      toastFooter: 'mb-0 text-break',\n      details: 'media-body flex-grow-1',\n      toastContainer: 'w-100 media p-2',\n      wrapper: 'toast-visible clickable',\n      toastHeader: 'd-flex justify-content-between mb-1',\n      iconContainer: 'align-self-center ml-2 mr-2 pr-1',\n      title: 'm-0 font-weight-normal text-nowrap text-truncate',\n      closeButton: 'close d-flex side-action align-items-center mx-2 outline-0'\n    }\n  );\n\n  const [startTime, endTime] = useMemo(() => {\n    const startTime = startTimeProgress || moment().unix();\n    const endTime =\n      endTimeProgress ||\n      moment().add(Number(transactionDuration), 'milliseconds').unix();\n    return [startTime, endTime];\n  }, []);\n\n  const progress = { startTime, endTime };\n\n  const successToastData = {\n    id: toastId,\n    icon: icons.faCheck,\n    expires: 30000,\n    hasCloseButton: true,\n    title: successMessage,\n    iconClassName: 'bg-success'\n  };\n\n  const pendingToastData = {\n    id: toastId,\n    expires: false,\n    icon: icons.faHourglass,\n    hasCloseButton: false,\n    title: processingMessage,\n    iconClassName: 'bg-warning'\n  };\n\n  const failToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: errorMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-danger'\n  };\n\n  const timedOutToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: timedOutMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-warning'\n  };\n\n  const isPending = getIsTransactionPending(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n\n  const toatsOptionsData = {\n    signed: pendingToastData,\n    sent: pendingToastData,\n    pending: pendingToastData,\n    success: successToastData,\n    completed: successToastData,\n    cancelled: failToastData,\n    fail: failToastData,\n    timedOut: timedOutToastData\n  };\n\n  const toastDataState = toatsOptionsData[status!];\n\n  const handleDeleteToast = () => {\n    setShouldRender(false);\n    onClose?.(toastId);\n  };\n\n  if (!shouldRender || transactions == null) {\n    return null;\n  }\n\n  return (\n    <ReactBootstrap.Toast\n      ref={ref}\n      className={generatedClasses.wrapper}\n      key={toastId}\n    >\n      <Progress\n        key={toastId}\n        id={toastId}\n        progress={progress}\n        expiresIn={lifetimeAfterSuccess}\n        done={!isPending || isTimedOut}\n      >\n        <div className={generatedClasses.toastContainer}>\n          <div className={generatedClasses.iconContainer}>\n            <IconState\n              iconSize='2x'\n              icon={toastDataState.icon}\n              className={toastDataState.iconClassName}\n            />\n            {withTxNonce &&\n              transactions.map((tx: any) => (\n                <p key={tx.nonce.valueOf()}>{tx.nonce.valueOf()}</p>\n              ))}\n          </div>\n          <div className={generatedClasses.details} style={{ minWidth: 0 }}>\n            <div className={generatedClasses.toastHeader}>\n              <h5 className={generatedClasses.title}>{toastDataState.title}</h5>\n              {!isPending && (\n                <button\n                  type='button'\n                  className={generatedClasses.closeButton}\n                  onClick={handleDeleteToast}\n                >\n                  <ReactFontawesome.FontAwesomeIcon\n                    icon={icons.faTimes}\n                    size='xs'\n                  />\n                </button>\n              )}\n            </div>\n            <div className={generatedClasses.toastFooter}>\n              <TxDetails\n                transactions={transactions}\n                title={title}\n                isTimedOut={isTimedOut}\n              />\n            </div>\n          </div>\n        </div>\n      </Progress>\n    </ReactBootstrap.Toast>\n  );\n};\n\nexport default withClassNameWrapper(TransactionToast);\n","import { Address } from '@elrondnetwork/erdjs/out';\nimport { getShardOfAddress } from 'utils';\n\ninterface IsCrossShardTransactionPropsType {\n  receiverAddress: string;\n  senderShard?: number;\n  senderAddress?: string;\n}\nexport function isCrossShardTransaction({\n  receiverAddress,\n  senderShard,\n  senderAddress\n}: IsCrossShardTransactionPropsType) {\n  try {\n    const receiver = new Address(receiverAddress);\n    const receiverShard = getShardOfAddress(receiver.pubkey());\n    if (senderShard == null && senderAddress != null) {\n      const sender = new Address(senderAddress);\n      return getShardOfAddress(sender) === receiverShard;\n    }\n    return receiverShard === senderShard;\n  } catch (err) {\n    return false;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useGetSignedTransactions } from 'hooks';\nimport { useGetPendingTransactions } from 'services';\nimport {\n  getToastsIdsFromStorage,\n  setToastsIdsToStorage\n} from 'storage/session';\nimport { SignedTransactionsBodyType } from 'types';\nimport TransactionToast from 'UI/TransactionToast';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nimport { TransactionsToastListPropsType } from './types';\n\nfunction TransactionsToastList({\n  shouldRenderDefaultCss = true,\n  withTxNonce = false,\n  className = 'transactions-toast-list',\n  pendingTransactions,\n  signedTransactions,\n  successfulToastLifetime\n}: TransactionsToastListPropsType) {\n  const [toastsIds, setToastsIds] = useState<any>([]);\n\n  const pendingTransactionsFromStore =\n    useGetPendingTransactions().pendingTransactions;\n\n  const signedTransactionsFromStore =\n    useGetSignedTransactions().signedTransactions;\n\n  const pendingTransactionsToRender =\n    pendingTransactions || pendingTransactionsFromStore;\n\n  const signedTransactionsToRender =\n    signedTransactions || signedTransactionsFromStore;\n\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper:\n        'toast-messages d-flex flex-column align-items-center justify-content-sm-end',\n      toast: ''\n    }\n  );\n\n  const mappedToastsList = toastsIds?.map((toastId: string) => {\n    const currentTx: SignedTransactionsBodyType =\n      signedTransactionsToRender[toastId];\n    if (\n      currentTx == null ||\n      currentTx?.transactions == null ||\n      currentTx?.status == null\n    ) {\n      return null;\n    }\n\n    const { transactions, status } = currentTx;\n    return (\n      <TransactionToast\n        className={className}\n        key={toastId}\n        transactions={transactions}\n        status={status}\n        toastId={toastId}\n        withTxNonce={withTxNonce}\n        lifetimeAfterSuccess={successfulToastLifetime}\n      />\n    );\n  });\n\n  const mapPendingSignedTransactions = () => {\n    const newToasts = [...toastsIds];\n\n    for (const sessionId in pendingTransactionsToRender) {\n      const hasToast = toastsIds.includes(sessionId);\n\n      if (!hasToast) {\n        newToasts.push(sessionId);\n      }\n    }\n\n    setToastsIds(newToasts);\n  };\n\n  const fetchSessionStorageToasts = () => {\n    const sessionStorageToastsIds = getToastsIdsFromStorage();\n\n    if (sessionStorageToastsIds) {\n      const newToasts = [...toastsIds, ...sessionStorageToastsIds];\n      setToastsIds(newToasts);\n    }\n  };\n\n  const saveSessionStorageToasts = () => {\n    const shouldSaveLocalToasts = Boolean(toastsIds.length);\n    if (!shouldSaveLocalToasts) {\n      return;\n    }\n\n    setToastsIdsToStorage(toastsIds);\n  };\n\n  useEffect(() => {\n    fetchSessionStorageToasts();\n    return () => {\n      saveSessionStorageToasts();\n    };\n  }, []);\n\n  useEffect(() => {\n    mapPendingSignedTransactions();\n  }, [pendingTransactionsToRender]);\n\n  return <div className={generatedClasses.wrapper}>{mappedToastsList}</div>;\n}\n\nexport default withClassNameWrapper(TransactionsToastList);\n","let platform: any = {};\ntry {\n  platform = require('platform');\n} catch (err) {}\n\nexport default platform;\n","let qrcode: any = {};\ntry {\n  qrcode = require('qrcode');\n} catch (err) {}\n\nexport default qrcode;\n","import React, { useEffect, useState } from 'react';\n\nimport platform from 'optionalPackages/platform';\nimport QRCode from 'optionalPackages/qrcode';\nimport { useWalletConnectLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ReactComponent as Lighting } from '../WalletConnectLoginButton/lightning.svg';\nimport { LoginModalPropsType } from './types';\n\nfunction WalletConnectLoginContainer({\n  callbackRoute,\n  loginButtonText,\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  className = 'wallect-connect-login-modal',\n  lead = 'Scan the QR code using Maiar',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  token,\n  onClose\n}: LoginModalPropsType) {\n  const [\n    initLoginWithWalletConnect,\n    { error },\n    { uriDeepLink, walletConnectUri }\n  ] = useWalletConnectLogin({\n    logoutRoute,\n    callbackRoute,\n    token,\n    redirectAfterLogin,\n    shouldLoginUser: true\n  });\n  const [qrCodeSvg, setQrCodeSvg] = useState<string>('');\n  const isMobileDevice =\n    platform?.os?.family === 'iOS' || platform?.os?.family === 'Android';\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'btn btn-primary px-sm-4 m-1 mx-sm-3',\n      loginText: 'text-left',\n      container: 'm-auto login-container',\n      card: 'card my-3 text-center',\n      cardBody: 'card-body p-4 mx-lg-4',\n      qrCodeSvgContainer: 'mx-auto mb-3',\n      title: 'mb-3',\n      leadText: 'lead mb-0',\n      mobileLoginButton:\n        'btn btn-primary d-inline-flex align-items-center px-4 mt-4',\n      mobileLoginButtonIcon: 'mr-2',\n      errorMessage:\n        'text-danger d-flex justify-content-center align-items-center'\n    }\n  );\n\n  const generateQRCode = async () => {\n    if (!walletConnectUri) {\n      return;\n    }\n\n    const svg = await QRCode.toString(walletConnectUri, {\n      type: 'svg'\n    });\n\n    setQrCodeSvg(svg);\n  };\n\n  useEffect(() => {\n    generateQRCode();\n  }, [walletConnectUri]);\n\n  useEffect(() => {\n    initLoginWithWalletConnect();\n  }, []);\n\n  const content = (\n    <div className={generatedClasses.container}>\n      <div className={generatedClasses.root}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <div\n              className={generatedClasses.qrCodeSvgContainer}\n              dangerouslySetInnerHTML={{\n                __html: qrCodeSvg\n              }}\n              style={{\n                width: '15rem',\n                height: '15rem'\n              }}\n            />\n            <h4 className={generatedClasses.title}>{title}</h4>\n            {isMobileDevice ? (\n              <React.Fragment>\n                <p className={generatedClasses.leadText}>{loginButtonText}</p>\n                <a\n                  id='accessWalletBtn'\n                  data-testid='accessWalletBtn'\n                  className={generatedClasses.mobileLoginButton}\n                  href={uriDeepLink || undefined}\n                  rel='noopener noreferrer nofollow'\n                  target='_blank'\n                >\n                  <Lighting\n                    className={generatedClasses.mobileLoginButtonIcon}\n                    style={{\n                      width: '0.9rem',\n                      height: '0.9rem'\n                    }}\n                  />\n                  {title}\n                </a>\n              </React.Fragment>\n            ) : (\n              <p className={generatedClasses.leadText}>{lead}</p>\n            )}\n            <div>\n              {error && (\n                <p className={generatedClasses.errorMessage}>{error}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with Maiar'}\n      className={className}\n      onClose={onClose}\n    >\n      {content}\n    </ModalContainer>\n  ) : (\n    content\n  );\n}\n\nexport default withClassNameWrapper(WalletConnectLoginContainer);\n","import React, { Fragment, useState } from 'react';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport WalletConnectLoginContainer from '../WalletConnectLoginContainer';\nimport { WalletConnectLoginButtonPropsType } from './types';\n\nconst WalletConnectLoginButton = ({\n  children,\n  callbackRoute,\n  onModalOpens,\n  onModalCloses,\n  loginButtonText = 'Maiar App',\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin = false,\n  buttonClassName,\n  className = 'wallect-connect-login',\n  lead = 'Scan the QR code using Maiar',\n  token,\n  hideButtonWhenModalOpens = false\n}: WalletConnectLoginButtonPropsType) => {\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  const handleOpenModal = () => {\n    setShowLoginModal(true);\n    onModalOpens?.();\n  };\n\n  const handleCloseModal = () => {\n    setShowLoginModal(false);\n    onModalCloses?.();\n  };\n\n  const shouldRenderButton = !hideButtonWhenModalOpens || !showLoginModal;\n  return (\n    <Fragment>\n      {shouldRenderButton && (\n        <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n          {children || (\n            <span className={generatedClasses.loginText}>\n              {loginButtonText}\n            </span>\n          )}\n        </button>\n      )}\n      {showLoginModal && (\n        <WalletConnectLoginContainer\n          callbackRoute={callbackRoute}\n          loginButtonText={loginButtonText}\n          title={title}\n          token={token}\n          className={className}\n          logoutRoute={logoutRoute}\n          lead={lead}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default withClassNameWrapper(WalletConnectLoginButton);\n","import React from 'react';\nimport { useWebWalletLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { WebWalletLoginButtonPropsType } from './types';\n\nconst WebWalletLoginButton: (\n  props: WebWalletLoginButtonPropsType\n) => JSX.Element = ({\n  children,\n  token,\n  className = 'web-wallet-login',\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Elrond Web Wallet',\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useWebWalletLogin({\n    callbackRoute,\n    token\n  });\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left'\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(WebWalletLoginButton);\n","import * as React from 'react';\nimport { getUsdValue } from 'utils/operations';\n\nconst UsdValue = (props: {\n  amount: string;\n  usd: number;\n  'data-testid'?: string;\n}) => {\n  const { amount, usd, ...dataTestId } = props;\n  const value = `≈ $${getUsdValue({ amount, usd })}`;\n  return (\n    <small className='form-text text-secondary mt-0' {...dataTestId}>\n      {`${amount}` === '0' ? '= $0' : value}\n    </small>\n  );\n};\n\nexport default UsdValue;\n","import React from 'react';\nimport { useGetLoginInfo } from 'hooks';\nimport ExtensionLoginButton from 'UI/extension/LoginButton';\n\nimport LedgerLoginButton from 'UI/ledger/LoginButton';\nimport WalletConnectLoginButton from 'UI/walletConnect/WalletConnectLoginButton';\nimport WebWalletLoginButton from 'UI/webWallet/LoginButton';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst UnlockPage = ({\n  loginRoute,\n  title = 'Login',\n  className = 'unlock-page',\n  shouldRenderDefaultCss = true,\n  LedgerLoginButtonText = 'Ledger',\n  description = 'Pick a login method',\n  WalletConnectLoginButtonText = 'Maiar',\n  ExtensionLoginButtonText = 'Extension',\n  WebWalletLoginButtonText = 'Web wallet'\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `home d-flex flex-fill align-items-center ${wrapperClassName}`,\n      title: 'mb-4',\n      description: 'mb-4',\n      cardContainer: 'm-auto',\n      card: 'card my-4 text-center',\n      cardBody: 'card-body py-4 px-2 px-sm-2 mx-lg-4'\n    }\n  );\n  const { isLoggedIn } = useGetLoginInfo();\n\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      window.location.href = loginRoute;\n    }\n  }, [isLoggedIn]);\n\n  return (\n    <div className={generatedClasses.wrapper}>\n      <div className={generatedClasses.cardContainer}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <h4 className={generatedClasses.title}>{title}</h4>\n            <p className={generatedClasses.description}>{description}</p>\n            <ExtensionLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={ExtensionLoginButtonText}\n            />\n            <WebWalletLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WebWalletLoginButtonText}\n            />\n            <LedgerLoginButton\n              loginButtonText={LedgerLoginButtonText}\n              callbackRoute={loginRoute}\n            />\n            <WalletConnectLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WalletConnectLoginButtonText}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(UnlockPage);\n","import { ApiProvider } from '@elrondnetwork/erdjs';\nimport { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { NetworkType } from 'types';\n\nlet apiProvider: ApiProvider | null = null;\n\nexport function initializeApiProvider(networkConfig?: NetworkType) {\n  const initializationNetworkConfig =\n    networkConfig || networkSelector(store.getState());\n  apiProvider = new ApiProvider(initializationNetworkConfig.apiAddress, {\n    timeout: Number(initializationNetworkConfig.apiTimeout)\n  });\n\n  return apiProvider;\n}\n\nexport function getApiProvider(): ApiProvider {\n  if (apiProvider == null) {\n    return initializeApiProvider();\n  } else {\n    return apiProvider;\n  }\n}\n","const mnemonicWords = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo'\n];\n\nexport function getMnemonicWords() {\n  return mnemonicWords;\n}\n","import React, { useRef } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport {\n  isAccountLoadingSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'redux/selectors';\n\nimport { RouteType } from 'types';\n\nconst AuthenticatedRoutesWrapper = ({\n  children,\n  routes,\n  unlockRoute,\n  onRedirect\n}: {\n  children: React.ReactNode;\n  routes: RouteType[];\n  unlockRoute: string;\n  onRedirect?: (unlockRoute?: string) => void;\n}) => {\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  const isAccountLoading = useSelector(isAccountLoadingSelector);\n\n  const walletLogin = useSelector(walletLoginSelector);\n  const { pathname } = window.location;\n\n  const authenticatedRoutesRef = useRef(\n    routes.filter((route) => Boolean(route.authenticatedRoute))\n  );\n\n  const isOnAuthenticatedRoute = authenticatedRoutesRef.current.some(\n    ({ path }) => pathname === path\n  );\n\n  const shouldRedirect =\n    isOnAuthenticatedRoute && !isLoggedIn && walletLogin == null;\n\n  if (isAccountLoading || walletLogin) {\n    return null;\n  }\n\n  if (shouldRedirect) {\n    if (onRedirect) {\n      onRedirect(unlockRoute);\n    } else {\n      window.location.href = unlockRoute;\n    }\n    return null;\n  }\n\n  return <>{children}</>;\n};\n\nexport default AuthenticatedRoutesWrapper;\n","import React from 'react';\nimport { IDappProvider } from '@elrondnetwork/erdjs/out';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport ProviderInitializer from 'components/ProviderInitializer';\nimport {\n  GetTransactionsByHashesType,\n  SendSignedTransactionsAsyncType\n} from 'contexts/types';\nimport { setExternalProvider } from 'providers/accountProvider';\nimport { DappCoreContext } from 'redux/DappProviderContext';\nimport { CustomNetworkType, EnvironmentsEnum } from 'types';\nimport AppInitializer from 'wrappers/AppInitializer';\n\nimport { store, persistor } from '../store';\nimport { CustomComponents, CustomComponentsType } from './CustomComponents';\n\nexport interface DappProviderPropsType {\n  children: React.ReactChildren | React.ReactElement;\n  customNetworkConfig?: CustomNetworkType;\n  externalProvider?: IDappProvider;\n  environment: 'testnet' | 'mainnet' | 'devnet' | EnvironmentsEnum;\n  sendSignedTransactionsAsync?: SendSignedTransactionsAsyncType;\n  getTransactionsByHash?: GetTransactionsByHashesType;\n  customComponents?: CustomComponentsType;\n}\n\nexport const DappProvider = ({\n  children,\n  customNetworkConfig = {},\n  externalProvider,\n  environment,\n  customComponents\n}: DappProviderPropsType) => {\n  if (!environment) {\n    //throw if the user tries to initialize the app without a valid environment\n    throw new Error('missing environment flag');\n  }\n\n  if (externalProvider != null) {\n    setExternalProvider(externalProvider);\n  }\n\n  return (\n    <Provider context={DappCoreContext} store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        <AppInitializer\n          environment={environment as EnvironmentsEnum}\n          customNetworkConfig={customNetworkConfig}\n        >\n          <ProviderInitializer />\n          <CustomComponents customComponents={customComponents} />\n          {children}\n        </AppInitializer>\n      </PersistGate>\n    </Provider>\n  );\n};\n","export function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams: any = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams);\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n  return { nextUrlParams, params };\n}\n","import { chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getChainID() {\n  return chainIDSelector(store.getState());\n}\n","import { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getNetworkConfig() {\n  return networkSelector(store.getState());\n}\n","import { loginAction } from 'redux/commonActions';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types';\n\nexport function loginWithExternalProvider(address: string) {\n  store.dispatch(loginAction({ address, loginMethod: LoginMethodsEnum.extra }));\n}\n","import {\n  createBalanceBuilder,\n  Token,\n  TokenType\n} from '@elrondnetwork/erdjs/out';\nimport { denomination as configDenomination } from 'constants/index';\n\nexport function nominate(input: string, customDenomination?: number) {\n  const balance = createBalanceBuilder(\n    new Token({\n      decimals: customDenomination || configDenomination,\n      type: TokenType.Fungible\n    })\n  );\n  return balance(input).toString();\n}\n\nexport default nominate;\n","interface SwitchTrueType {\n  default: any;\n  [key: string]: any;\n}\n\ntype ReturnKeys = 'true' | 'false';\n\nexport function switchTrue(object: SwitchTrueType) {\n  const { default: defaultValue, ...rest } = object;\n  const obj = { default: defaultValue, ...rest };\n  const result = Object.keys(obj).reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur === 'default' ? 'true' : cur]: (obj as any)[cur as ReturnKeys]\n    };\n  }, {} as Record<ReturnKeys, any>);\n  return result['true'];\n}\n","import { useIdleTimer as useReactIdleTimer } from 'react-idle-timer';\nimport { getIsLoggedIn, logout as dappLogout } from 'utils';\n\nconst getTimeout = (minutes: number) => 1000 * 60 * minutes;\nconst debounce = 500;\n\ninterface IdleTimerType {\n  minutes?: number;\n  onLogout?: (props?: any) => void;\n}\n\nexport const useIdleTimer = ({ minutes = 10, onLogout }: IdleTimerType) => {\n  const isLoggedIn = getIsLoggedIn();\n  const logout = onLogout || dappLogout;\n  const timeout = getTimeout(minutes);\n\n  const onIdle = () => {\n    if (isLoggedIn) {\n      logout();\n    }\n  };\n\n  useReactIdleTimer({ timeout, onIdle, debounce });\n};\n\nexport default useIdleTimer;\n","import {\n  useSignTransactionsWithDevice,\n  UseSignTransactionsWithDevicePropsType,\n  UseSignTransactionsWithDeviceReturnType\n} from './useSignTransactionsWithDevice';\n\nexport function useSignTransactionsWithLedger(\n  props: UseSignTransactionsWithDevicePropsType\n): UseSignTransactionsWithDeviceReturnType {\n  return useSignTransactionsWithDevice(props);\n}\n\nexport default useSignTransactionsWithLedger;\n"],"names":["TransactionServerStatusesEnum","TransactionBatchStatusesEnum","LoginMethodsEnum","NotificationTypesEnum","TypesOfSmartContractCallsEnum","EnvironmentsEnum","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","MISSING_PROVIDER_MESSAGE","fallbackNetworkConfigurations","devnet","id","chainId","egldLabel","egldDenomination","decimals","gasPerDataByte","walletConnectDeepLink","walletConnectBridgeAddresses","walletAddress","apiAddress","explorerAddress","apiTimeout","testnet","mainnet","ledgerErrorCodes","36864","code","message","27013","27904","28160","28161","28162","28163","28164","28165","28166","28167","28168","28176","28169","28170","28171","28172","28173","28174","28175","28177","getProviderType","provider","WalletProvider","wallet","WalletConnectProvider","walletconnect","HWProvider","ledger","ExtensionProvider","extension","EmptyProvider","none","extra","newWalletProvider","getLedgerConfiguration","initializedHwWalletP","isInitialized","_context","hwApp","getAppConfiguration","version","_yield$hwApp$getAppCo","dataEnabled","contractData","notInitializedError","caller","_proto","init","login","options","logout","getAddress","isConnected","sendTransaction","transaction","signTransaction","signTransactions","transactions","signMessage","emptyProvider","accountProvider","externalProvider","setAccountProvider","setExternalProvider","getAccountProvider","logoutAction","createAction","loginAction","payload","localStorageKeys","loginExpiresAt","hasLocalStorage","localStorage","data","expires","setItem","String","JSON","stringify","item","getItem","deserializedItem","parse","moment","unix","removeItem","require","sessionStorage","clear","storage","session","local","getNewLoginExpiresTimestamp","Date","setHours","getHours","setLoginExpiresAt","expiresAt","initialState","loginMethod","walletConnectLogin","ledgerLogin","tokenLogin","walletLogin","extensionLogin","loginInfoSlice","createSlice","reducers","setLoginMethod","action","setTokenLogin","setTokenLoginSignature","signature","setWalletLogin","setWalletConnectLogin","setLedgerLogin","extraReducers","builder","addCase","actions","reducer","optionalRedirect","callbackUrl","shouldRedirect","setTimeout","window","location","pathname","includes","href","getLedgerErrorCodes","errorMessage","statusCode","defaultErrorMessage","TransactionTypesEnum","defaultNetwork","walletConnectBridgeAddress","networkConfigSlice","network","chainID","initializeNetworkConfig","Math","floor","random","omit","setChainID","address","account","balance","nonce","ledgerAccount","publicKey","walletConnectAccount","isAccountLoading","accountLoadingError","accountInfoSlice","setAddress","Address","hex","setAccount","setAccountNonce","setAccountShard","shard","setLedgerAccount","updateLedgerAccount","index","setWalletConnectAccount","setIsAccountLoading","setAccountLoadingError","REHYDRATE","_action$payload","accountInfo","pendingBatchTransactionsStates","successBatchTransactionsStates","success","failBatchTransactionsStates","fail","cancelled","timedOut","timedOutBatchTransactionsStates","pendingServerTransactionsStatuses","pending","successServerTransactionsStates","completedServerTransactionsStates","completed","failServerTransactionsStates","invalid","getIsTransactionCompleted","status","getIsTransactionPending","isBatchTransactionPending","isServerTransactionPending","getIsTransactionSuccessful","isBatchTransactionSuccessful","isServerTransactionSuccessful","getIsTransactionFailed","isBatchTransactionFailed","isServerTransactionFailed","getIsTransactionTimedOut","isBatchTransactionTimedOut","decodePart","part","decodedPart","hexPart","Buffer","from","toString","trim","str","charCodeAt","isUtf8","isStringBase64","string","atob","parseMultiEsdtTransferData","contractCallDataIndex","startsWith","MultiESDTNFTTransfer","split","receiver","encodedTxCount","rest","txCount","BigNumber","toNumber","itemIndex","txIndex","nftTransaction","token","encodedNonce","esdtTransaction","amount","isDifferentFromTxCount","hasInvalidNoOfAdSigns","some","tx","sourceStr","searchStr","startingIndices","indexOccurence","indexOf","getAllStringOccurrences","hasAdStart","scCallData","scCall","console","addressIsValid","destinationAddress","test","checkAddress","Boolean","bech32","canTransformToPublicKey","noData","tokenId","getTokenFromData","isTokenTransfer","ESDTTransfer","nftTransfer","ESDTNFTTransfer","encodedToken","encodedAmount","replace","e","nonceIndex","amountIndex","map","decodeData","collection","quantity","every","el","erdLabel","builtCallbackUrl","urlParams","url","entries","URL","origin","search","urlSearchParams","URLSearchParams","params","fromEntries","nextUrlParams","buildUrlParams","parseTransactionAfterSigning","isLedger","TransactionVersion","withTxHashSignVersion","TransactionOptions","withTxHashSignOptions","parsedTransaction","toPlainObject","hash","getHash","signedTransactions","transactionsToSign","signTransactionsError","customTransactionInformationForSessionId","defaultCustomInformation","signWithoutSending","sessionInformation","redirectAfterSign","transactionsSlice","moveTransactionsToSignedState","sessionId","customTransactionInformation","clearSignedTransaction","clearTransactionToSign","updateSignedTransaction","updateSignedTransactions","updateSignedTransactionStatus","transactionHash","_state$signedTransact","_state$signedTransact2","areTransactionsSuccessful","_state$signedTransact3","_state$signedTransact4","areTransactionsFailed","_state$signedTransact5","_state$signedTransact6","setTransactionsToSign","clearAllTransactionsToSign","clearAllSignedTransactions","setSignTransactionsError","_action$payload5","parsedSignedTransactions","reduce","acc","txTimestamp","expiration","signTransactionsSlice","setTransactionsDisplayInfo","transactionsDisplayInfo","successMessage","processingMessage","submittedMessage","transactionDuration","clearTransactionsInfoForSessionId","clearTransactionsInfo","modalsSlice","setTxSubmittedModal","txSubmittedModal","setNotificationModal","notificationModal","clearTxSubmittedModal","clearNotificationModal","createDeepEqualSelector","createSelectorCreator","defaultMemoize","isEqual","accountInfoSelector","addressSelector","accountSelector","accountBalanceSelector","accountNonceSelector","valueOf","shardSelector","ledgerAccountSelector","isAccountLoadingSelector","loginInfoSelector","loginInfo","loginMethodSelector","isLoggedInSelector","walletConnectLoginSelector","ledgerLoginSelector","walletLoginSelector","whitelistedActions","throttledSetNewExpires","throttle","loginSessionMiddleware","store","appState","getState","loginTimestamp","now","log","dispatch","networkConfig","modals","transactionsInfo","transactionsInfoPersistConfig","persistReducer","blacklist","rootReducer","combineReducers","localStorageReducers","migrations","2","whitelist","migrate","createMigrate","debug","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","ignoredPaths","concat","persistor","persistStore","networkConfigSelector","chainIDSelector","ChainID","walletConnectBridgeAddressSelector","walletConnectDeepLinkSelector","networkSelector","apiNetworkSelector","egldLabelSelector","newTransaction","rawTransaction","dataPayload","TransactionPayload","fromEncoded","Transaction","Balance","fromString","Nonce","sender","gasLimit","GasLimit","gasPrice","GasPrice","transactionsSelectors","signedTransactionsSelector","signTransactionsErrorSelector","selectTxByStatus","txStatusVerifier","txBody","pendingSignedTransactionsSelector","successfulTransactionsSelector","completedTransactionsSelector","failedTransactionsSelector","timedOutTransactionsSelector","transactionsToSignSelector","transactionStatusSelector","_","transactionSessionId","defaultTransactionInfo","transactionDisplayInfoSelector","Number","notificationModalSelector","getIsLoggedIn","onRedirect","providerType","isWalletProvider","getAccountProviderType","getEgldLabel","getIsProviderEqualTo","comparedProviderType","loggedIn","proxyProvider","initializeProxyProvider","initializationNetworkConfig","ProxyProvider","timeout","getProxyProvider","getAccountFromProxyProvider","proxy","getAccount","_context2","getNetworkConfig","setNonce","getLatestNonce","currentAccountNonce","max","getAccountBalance","accountAddress","_account$balance","setNewAccount","accountData","refreshAccount","getShardOfAddress","hexPubKey","maskHigh","parseInt","maskLow","pubKey","lastByteOfPubKey","metachainPrefix","equals","zeroAddress","alloc","fill","isAddressOfMetachain","numShards","callbackRoute","signableMessage","SignableMessage","encodeURIComponent","logarithmicRest","position","minv","maxv","exp","stringIsInteger","integer","positiveNumbersOnly","stringInteger","match","bNparsed","limit","comparedTo","stringIsFloat","wholes","number","join","defaultResult","isEsdt","isNft","isEgld","getIdentifierType","identifier","parts","pipe","previous","if","condition","newValue","denominate","input","denomination","showLastNonZeroDecimal","showIsLessThanDecimalsLabel","addCommas","Token","toDenominated","current","bnBalance","isZero","integerPart","decimalPart","bNdecimalPart","decimalPlaces","min","shownDecimalsAreZero","isGreaterThan","substring","formatted","toFormat","integerPartZero","numericPart","decimalSide","zeroPlaceholders","Array","zeros","minAmount","calculateFeeLimit","minGasLimit","gasPriceModifier","defaultGasPrice","validGasLimit","validGasPrice","Zero","NetworkConfig","MinGasLimit","GasPerDataByte","GasPriceModifier","parseFloat","computeFee","config","ROUNDING_MODE","ROUND_FLOOR","getUsdValue","usd","sum","toFixed","toLocaleString","maximumFractionDigits","minimumFractionDigits","ESDTTransferTypes","isSelfESDTContract","restParts","isSelfTransaction","isCorrectESDTType","areDataPartsValid","toLowerCase","isHexValidLength","getAddressFromDataField","parsedData","addressIndex","getAddressIndex","classnames","getGeneratedClasses","className","shouldRenderDefaultCss","defaultStyles","classNames","wrapperClassName","DappCoreContext","React","createContext","useDispatch","createDispatchHook","useSelector","createSelectorHook","useExtensionLogin","redirectAfterLogin","useState","setError","isLoading","setIsLoading","isLoggedIn","getInstance","warn","providerLoginData","_provider$account","loginToken","loginFailed","useWebWalletLogin","setMinutes","getMinutes","loginData","failInitializeErrorText","useLedgerLogin","addressesPerPage","hwWalletP","startIndex","setStartIndex","accounts","setAccounts","setVersion","contractDataEnabled","setContractDataEnabled","selectedAddress","setSelectedAddress","showAddressList","setShowAddressList","dispatchLoginActions","loginType","onLoginFailed","customMessage","loginUser","hwWalletProvider","hasContractDataEnabled","_getLedgerErrorCodes2","fetchAccounts","_context3","getAccounts","ledgerData","_getLedgerErrorCodes3","_context4","_getLedgerErrorCodes4","useEffect","onGoToPrevPage","onGoToNextPage","onSelectAddress","newSelectedAddress","onConfirmSelectedAddress","useUpdateEffect","effect","dependencies","isInitialMount","useRef","ErrorCodesEnum","useWalletConnectLogin","heartbeatDisconnectInterval","logoutRoute","wcUri","setWcUri","providerRef","hasWcUri","uriDeepLink","handleHeartbeat","_providerRef$current","walletConnector","_providerRef$current$","connected","sendCustomMessage","handleOnLogout","handleOnLogin","getSignature","hasSignature","loginActionData","on","clearInterval","setInterval","interval","generateWcUri","loginProvider","shouldGenerateWcUri","newProvider","onClientLogin","onClientLogout","_providerRef$current3","walletConnectUri","accountBalance","storeChainId","transactionsPayload","isArray","bNtotalFee","totalFee","fee","getGasLimit","getGasPrice","getData","getChainID","plus","calcTotalFee","minus","notificationPayload","warning","iconClassName","title","description","signTransactionsPayload","calculateGasLimit","bNconfigGasLimit","bNgasPerDataByte","bNgasValue","times","transformAndSignTransactions","validatedReceiver","invalidReceiver","transactionsChainId","sendTransactions","completedTransactionsDelay","areComplexTransactions","txToSign","useGetPendingTransactions","pendingTransactions","pendingTransactionsArray","hasPendingTransactions","multiTxData","useParseMultiEsdtTransferData","parsedTransactionsByDataField","setParsedTransactions","allTransactions","setAllTransactions","addTransactionDataToParsedInfo","txInfo","existing","allTxs","transactionIndex","multiTxs","trx","idx","newTx","getReceiver","extractTransactionESDTData","getTxInfoByDataField","multiTransactionData","transactionId","onSuccess","onFail","onCancelled","onTimedOut","onCompleted","transactionsBatch","isPending","isFailed","isTimedOut","isSuccessful","isCompleted","isCancelled","failedTransactions","failedTransactionsArray","hasFailedTransactions","successfulTransactions","successfulTransactionsArray","hasSuccessfulTransactions","timedOutTransactions","completedTransactions","hasActiveTransactions","completedTransactionsArray","hasCompletedTransactions","ProviderInitializer","setLedgerData","initWalletLoginProvider","getInitializedHwWalletProvider","ledgerConfig","_context5","getNetworkConfigFromProxyProvider","setLedgerProvider","setExtensionProvider","tryAuthenticateWalletUser","initializeProvider","fetchAccount","sendSignedTransactions","_networkSelector","promises","axios","post","all","txHash","getTransactionsByHashes","hashes","get","withScResults","responseData","previousStatus","txOnNetwork","find","txResponse","invalidTransaction","results","hasStatusChanged","getServerConfiguration","cleanApiAddress","endsWith","configUrl","environment","fallbackConfig","getScamAddressData","addressToVerify","_networkConfigSelecto","baseURL","useGetNetworkConfig","useGetNotification","notification","clearNotification","useGetTransactionDisplayInfo","toastId","useParseSignedTransactions","searchData","qs","signSessionId","getTransactionsFromWalletUrl","signed","history","pushState","document","useSignTransactions","savedCallback","hasTransactions","clearSignInfo","isExtensionProvider","cancelAction","onCancel","isTxCancelled","signWithWallet","buildedCallbackUrl","signTransactionsWithProvider","redirectRoute","isCurrentRoute","shouldRedirectAfterSign","hasSameTransactions","hasAllTransactionsSigned","signedTransactionsArray","errorsMessages","setTransactionNonces","latestNonce","proxyAccount","isSigningWithWebWallet","isSigningWithProvider","mappedTransactions","onAbort","useGetSignedTransactions","hasSignedTransactions","swr","fetcher","response","useGetTokenDetails","tokenEndpoint","useSwr","selectedToken","tokenDenomination","tokenLabel","tokenAvatar","assets","_selectedToken$assets","svgUrl","useGetAccountInfo","useGetLoginInfo","useGetAccountProvider","verifiedAddresses","useSignTransactionsWithDevice","verifyReceiverScam","currentStep","setCurrentStep","setSignedTransactions","currentTransaction","setCurrentTransaction","waitingForDevice","setWaitingForDevice","isLastTransaction","dataField","transactionTokenInfo","verified","scamInfo","isTokenTransaction","receiverScamInfo","sign","newSignedTx","newSignedTransactions","exising","extractTransactionsInfo","isFirst","continueWithoutSigning","_currentTransaction$t2","_currentTransaction$t3","onSignTransaction","signTx","onNext","nextStep","onPrev","useGetSignTransactionsError","getPendingTransactions","timedOutHashes","manageTimedOutTransactions","retries","timeouts","manageTransaction","serverTransaction","shouldRefreshBalance","resultWithError","scResult","returnMessage","manageFailedTransactions","checkBatch","transactionBatch","getTransactionsByHash","defaultGetTxByHash","useCheckTransactionStatus","props","pendingBatches","filter","_iterator","_step$value","getAccountShard","AppInitializer","customNetworkConfig","children","initialized","setInitialized","initializeProviders","initializeNetwork","fetchConfigFromServer","skipFetchFromServer","customNetworkApiAddress","localConfig","fallbackApiAddress","serverConfig","apiConfig","initializeApp","TransactionSender","sendSignedTransactionsAsync","defaultSendSignedTxs","sendingRef","sessionIds","_i","skipSending","_signedTransactions$s","_signedTransactions$s2","transactionsToSend","transactionObject","Signature","applySignature","responseHashes","newStatus","newTransactions","handleSendTransactions","TransactionsTracker","checkTransactionStatus","intervalRef","CustomComponents","customComponents","transactionSender","transactionTracker","TxSender","component","TxTracker","functionName","inputParameters","outputParameters","withClassNameWrapper","Component","Denominate","showLabel","denominatedValue","valueParts","denominateValid","denominateInvalid","denominateProps","fontawesomeFreeSolidIcons","ReactFontawesome","page","text","target","Fragment","FontAwesomeIcon","icon","icons","faSearch","buttonClassName","loginButtonText","onInitiateLogin","isFirefox","navigator","userAgent","classes","wrapper","loginText","noExtensionButtonWrapper","noExtensionButtonContent","noExtensionButtonTitle","noExtensionButtonIcon","elrondWallet","onClick","rel","faArrowRight","ModalContainer","noSpacer","onClose","ReactBootstrap","Modal","show","backdrop","onHide","animation","centered","size","faTimes","iconClass","dataTestId","iconBgClass","iconSize","generatedClasses","iconContainer","AddressRow","keep","setBalance","fetchBalance","onChange","checked","role","htmlFor","AddressTable","loading","cardBody","tableWrapper","tableContent","tableHeader","tableHeaderText","buttonsWrapper","arrowButton","confirmButton","PageState","faCircleNotch","disabled","faChevronLeft","faChevronRight","ConfirmAddress","noBorder","LedgerConnect","connectPageContent","LedgerLogo","LedgerLoginContainer","wrapContentInsideModal","spinner","onStartLogin","getContent","onModalOpens","onModalCloses","shouldRenderDefaultModalCss","hideButtonWhenModalOpens","showLoginModal","setShowLoginModal","typedIcons","notificationTypesToIcons","faExclamationTriangle","defaultIcon","Dot","color","ProgressSteps","totalSteps","dots","isCurrentStep","SignWithExtensionModal","handleClose","closeBtn","freeSolidIcons","faHourglass","preventDefault","Simple","Combined","small","getIdentifierWithoutNonce","tokenParts","getDetails","isEgldTransfer","symbol","label","src","EgldIcon","faDiamond","getIcon","TokenDetails","render","combined","highlight","isScCall","output","encodedScCall","remainingDataFields","matchAll","RegExp","a","end","SignStep","transactionData","signBtnLabel","denominatedAmount","getValue","scamReport","showProgressSteps","formGroup","formLabel","contentWrapper","tokenWrapper","tokenValue","scamReportIcon","tokenAmountLabel","tokenAmountValue","dataFormGroup","cancelButton","signButton","tokenlabel","Icon","Label","TransactionData","SignWithDeviceModal","container","SignWithLedgerModal","SignWithWalletConnectModal","close","SignTransactionsModals","CustomConfirmScreens","signError","signProps","Ledger","WalletConnect","Extension","Extra","SessionStorageKeysEnum","half","progress","expiresIn","ref","saveToSession","toastProgress","add","totalSeconds","endTime","startTime","remaining","currentRemaining","getInitialData","percentRemaining","setPercentRemaining","int","duration","asMilliseconds","removeTxFromSession","style","width","fallbackCopyTextToClipboard","textArea","createElement","body","appendChild","focus","select","execCommand","removeChild","copyTextToClipboard","clipboard","writeText","default","copyResult","setCopyResut","stopPropagation","noSpaces","faCopy","faCheck","overflow","setOverflow","trimRef","hiddenTextRef","listener","useCallback","debounce","offsetWidth","addEventListener","removeEventListener","ceil","statusTransactions","iconSuccess","iconFailed","trimContainer","iconPending","iconSuccessData","iconFailedData","iconData","iconSrc","Trim","CopyButton","ExplorerLink","withTxNonce","startTimeProgress","endTimeProgress","lifetimeAfterSuccess","shouldRender","setShouldRender","transactionDisplayInfo","accountShard","timedOutMessage","isSameShard","useMemo","prevTxIsSameShard","receiverAddress","senderShard","senderAddress","receiverShard","pubkey","isCrossShardTransaction","crossShardRounds","toastFooter","details","toastContainer","toastHeader","closeButton","successToastData","hasCloseButton","pendingToastData","failToastData","timedOutToastData","toastDataState","Toast","Progress","IconState","minWidth","TxDetails","TransactionsToastList","successfulToastLifetime","toastsIds","setToastsIds","pendingTransactionsFromStore","signedTransactionsFromStore","pendingTransactionsToRender","signedTransactionsToRender","toast","mappedToastsList","currentTx","TransactionToast","sessionStorageToastsIds","toasts","getToastsIdsFromStorage","newToasts","fetchSessionStorageToasts","mapPendingSignedTransactions","platform","qrcode","WalletConnectLoginContainer","lead","shouldLoginUser","initLoginWithWalletConnect","qrCodeSvg","setQrCodeSvg","isMobileDevice","os","family","card","qrCodeSvgContainer","leadText","mobileLoginButton","mobileLoginButtonIcon","generateQRCode","QRCode","content","root","dangerouslySetInnerHTML","__html","height","Lighting","showModal","loginRoute","LedgerLoginButtonText","WalletConnectLoginButtonText","ExtensionLoginButtonText","WebWalletLoginButtonText","cardContainer","ExtensionLoginButton","WebWalletLoginButton","LedgerLoginButton","WalletConnectLoginButton","apiProvider","mnemonicWords","routes","unlockRoute","isOnAuthenticatedRoute","route","authenticatedRoute","path","Provider","PersistGate","btoa","ApiProvider","isContractAddress","extractedAddress","customDenomination","createBalanceBuilder","TokenType","Fungible","cur","minutes","onLogout","dappLogout","getTimeout","useReactIdleTimer","onIdle"],"mappings":"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A,OACA,WACA,UACA,SACA,MACA,SACA,QACA,UACA,SACA,QACA,MACA,SACA,UACA,SACA,QACA,QACA,UACA,SACA,UACA,SACA,SACA,SACA,QACA,MACA,QACA,QACA,QACA,MACA,MACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,QACA,QACA,SACA,QACA,QACA,UACA,OACA,QACA,SACA,UACA,UACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,UACA,MACA,QACA,UACA,SACA,QACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,MACA,QACA,QACA,OACA,SACA,UACA,SACA,SACA,QACA,MACA,WACA,SACA,UACA,MACA,SACA,UACA,QACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,WACA,UACA,UACA,QACA,SACA,OACA,SACA,OACA,SACA,UACA,UACA,QACA,QACA,QACA,OACA,UACA,QACA,UACA,OACA,OACA,WACA,QACA,QACA,MACA,UACA,UACA,OACA,SACA,SACA,SACA,MACA,SACA,UACA,SACA,OACA,QACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,OACA,SACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,OACA,SACA,SACA,UACA,SACA,UACA,MACA,OACA,OACA,UACA,OACA,QACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,SACA,OACA,SACA,SACA,MACA,MACA,UACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,WACA,SACA,SACA,QACA,UACA,QACA,QACA,SACA,QACA,SACA,UACA,QACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,QACA,MACA,WACA,OACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,OACA,OACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,UACA,UACA,MACA,SACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,SACA,MACA,UACA,QACA,WACA,SACA,SACA,QACA,UACA,OACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,WACA,SACA,QACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,OACA,SACA,QACA,UACA,QACA,QACA,UACA,SACA,SACA,UACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,OACA,QACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,OACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,UACA,WACA,OACA,OACA,SACA,OACA,QACA,OACA,OACA,UACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,OACA,QACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,SACA,QACA,MACA,UACA,OACA,UACA,MACA,WACA,UACA,UACA,UACA,QACA,UACA,SACA,OACA,QACA,MACA,SACA,OACA,QACA,SACA,SACA,OACA,WACA,OACA,MACA,OACA,SACA,SACA,SACA,WACA,SACA,UACA,WACA,WACA,OACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,UACA,QACA,SACA,SACA,WACA,SACA,SACA,OACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,OACA,UACA,QACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,SACA,WACA,SACA,OACA,WACA,WACA,UACA,OACA,UACA,WACA,UACA,WACA,SACA,SACA,UACA,QACA,SACA,WACA,MACA,OACA,UACA,SACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,OACA,UACA,UACA,OACA,OACA,UACA,SACA,MACA,QACA,SACA,QACA,QACA,WACA,UACA,UACA,WACA,WACA,QACA,OACA,SACA,SACA,UACA,SACA,UACA,SACA,UACA,QACA,SACA,QACA,MACA,UACA,UACA,QACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,WACA,UACA,QACA,QACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,WACA,OACA,QACA,SACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,QACA,MACA,UACA,SACA,OACA,UACA,OACA,QACA,QACA,OACA,QACA,OACA,SACA,SACA,MACA,QACA,UACA,OACA,UACA,MACA,QACA,SACA,UACA,QACA,WACA,UACA,WACA,UACA,MACA,OACA,OACA,SACA,QACA,WACA,QACA,QACA,MACA,QACA,UACA,QACA,SACA,OACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,QACA,SACA,OACA,MACA,UACA,MACA,OACA,QACA,QACA,OACA,SACA,OACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,QACA,MACA,OACA,QACA,MACA,OACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,OACA,UACA,QACA,UACA,SACA,SACA,QACA,MACA,UACA,QACA,WACA,QACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,OACA,MACA,QACA,UACA,OACA,SACA,SACA,OACA,SACA,UACA,OACA,MACA,SACA,UACA,SACA,SACA,UACA,MACA,OACA,OACA,SACA,QACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,UACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,OACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,MACA,MACA,QACA,OACA,OACA,SACA,UACA,OACA,QACA,SACA,OACA,QACA,UACA,MACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,WACA,SACA,QACA,SACA,OACA,MACA,OACA,SACA,OACA,OACA,OACA,MACA,OACA,UACA,QACA,SACA,OACA,OACA,UACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,QACA,WACA,OACA,QACA,OACA,QACA,MACA,OACA,QACA,SACA,QACA,UACA,SACA,OACA,SACA,QACA,OACA,UACA,SACA,MACA,OACA,OACA,WACA,OACA,SACA,MACA,UACA,UACA,QACA,UACA,UACA,SACA,SACA,SACA,UACA,UACA,OACA,UACA,SACA,WACA,QACA,WACA,SACA,WACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,UACA,QACA,OACA,QACA,SACA,SACA,MACA,OACA,UACA,QACA,QACA,QACA,MACA,OACA,OACA,UACA,MACA,QACA,QACA,OACA,SACA,SACA,OACA,OACA,WACA,OACA,OACA,UACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,MACA,UACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,MACA,QACA,QACA,SACA,OACA,OACA,OACA,WACA,SACA,QACA,QACA,QACA,QACA,UACA,OACA,MACA,OACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,UACA,QACA,OACA,SACA,OACA,UACA,SACA,SACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,QACA,OACA,QACA,SACA,OACA,OACA,UACA,OACA,SACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,SACA,SACA,UACA,MACA,QACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,MACA,SACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,WACA,OACA,OACA,SACA,QACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,OACA,UACA,OACA,WACA,QACA,QACA,SACA,OACA,SACA,SACA,UACA,OACA,QACA,QACA,QACA,QACA,OACA,UACA,QACA,SACA,SACA,WACA,OACA,UACA,QACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,OACA,UACA,MACA,QACA,UACA,SACA,QACA,SACA,MACA,SACA,UACA,SACA,UACA,QACA,OACA,QACA,OACA,UACA,WACA,SACA,SACA,QACA,WACA,QACA,OACA,QACA,OACA,SACA,OACA,WACA,SACA,SACA,WACA,QACA,OACA,SACA,SACA,UACA,OACA,QACA,OACA,SACA,SACA,QACA,SACA,SACA,OACA,OACA,OACA,WACA,UACA,UACA,SACA,QACA,OACA,MACA,UACA,UACA,QACA,OACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,OACA,UACA,OACA,UACA,SACA,QACA,MACA,UACA,SACA,QACA,MACA,MACA,OACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,QACA,MACA,OACA,MACA,QACA,UACA,OACA,OACA,MACA,QACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,QACA,UACA,QACA,WACA,QACA,SACA,WACA,SACA,UACA,QACA,UACA,QACA,SACA,UACA,OACA,OACA,OACA,MACA,QACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,SACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,SACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,SACA,UACA,QACA,OACA,UACA,QACA,SACA,OACA,UACA,UACA,MACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,MACA,QACA,QACA,SACA,WACA,QACA,SACA,UACA,QACA,MACA,SACA,OACA,QACA,OACA,UACA,OACA,SACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,UACA,UACA,WACA,WACA,OACA,SACA,UACA,UACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,WACA,UACA,UACA,QACA,UACA,SACA,UACA,OACA,OACA,QACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,QACA,OACA,MACA,SACA,UACA,UACA,UACA,UACA,WACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,OACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,OACA,SACA,WACA,SACA,SACA,SACA,QACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,WACA,SACA,WACA,WACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,OACA,QACA,QACA,SACA,SACA,UACA,OACA,SACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,MACA,SACA,UACA,OACA,OACA,QACA,SACA,QACA,OACA,SACA,OACA,SACA,OACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,UACA,QACA,SACA,SACA,UACA,WACA,WACA,QACA,QACA,SACA,SACA,QACA,MACA,SACA,SACA,OACA,SACA,SACA,UACA,WACA,OACA,OACA,UACA,SACA,OACA,UACA,SACA,QACA,WACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,QACA,UACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,WACA,QACA,SACA,QACA,UACA,MACA,UACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,QACA,SACA,UACA,SACA,QACA,OACA,QACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,OACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,QACA,UACA,QACA,WACA,QACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,SACA,UACA,WACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,SACA,SACA,SACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,SACA,UACA,OACA,SACA,SACA,QACA,UACA,OACA,SACA,MACA,QACA,SACA,QACA,SACA,UACA,OACA,UACA,QACA,WACA,WACA,SACA,UACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,QACA,SACA,UACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,OACA,OACA,OACA,SACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,QACA,SACA,QACA,QACA,UACA,SACA,OACA,QACA,OACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,QACA,UACA,QACA,UACA,MACA,WACA,SACA,QACA,SACA,WACA,OACA,SACA,UACA,OACA,QACA,MACA,QACA,SACA,QACA,UACA,WACA,OACA,QACA,UACA,SACA,QACA,OACA,MACA,QACA,QACA,UACA,SACA,QACA,WACA,OACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,UACA,QACA,OACA,QACA,UACA,QACA,QACA,MACA,OACA,UACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,QACA,MACA,OACA,UACA,OACA,WACA,SACA,UACA,QACA,UACA,QACA,OACA,SACA,SACA,UACA,UACA,SACA,OACA,WACA,UACA,SACA,QACA,UACA,SACA,SACA,UACA,SACA,OACA,QACA,QACA,QACA,OACA,QACA,MACA,OACA,SACA,UACA,QACA,UACA,SACA,SACA,QACA,QACA,SACA,QACA,MACA,SACA,QACA,UACA,OACA,QACA,UACA,SACA,SACA,UACA,QACA,OACA,SACA,UACA,OACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,OACA,UACA,UACA,SACA,UACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,OACA,OACA,QACA,QACA,OACA,MACA,SACA,SACA,OACA,SACA,UACA,MACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,QACA,OACA,QACA,OACA,UACA,OACA,QACA,OACA,OACA,OACA,MACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,SACA,OACA,OACA,UACA,OACA,QACA,SACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,OACA,OACA,oECt/DiC,gBACjC7W,IAAAA,SACA8W,IAAAA,OACAC,IAAAA,YACA90B,IAAAA,WAOM+J,EAAaR,GAAY7O,IAEzBnN,EAAmBgc,GAAYjP,IAE/BjQ,EAAckf,GAAY1O,IACxBhP,EAAaF,OAAOC,SAApBC,SAMFkpC,EAJyB7nB,SAC7B2nB,EAAOpX,QAAO,SAACuX,GAAD,OAAWxhC,QAAQwhC,EAAMC,wBAGa7vB,QAAQ5S,MAC5D,YAAA,OAAc3G,MAAXqpC,QAML,OAAI3nC,GAAoBlD,EACf,KAHP0qC,IAA2BhrB,GAA6B,MAAf1f,GAOrC2V,EACFA,EAAW80B,GAEXnpC,OAAOC,SAASG,KAAO+oC,EAElB,MAGF3rB,gCAAG4U,yBCxBgB,gBAC1BA,IAAAA,aACAD,oBAAAA,aAAsB,KACtBn2B,IAAAA,iBACA2uB,IAAAA,YACA2J,IAAAA,iBAEA,IAAK3J,EAEH,MAAM,IAAIr6B,MAAM,4BAOlB,OAJwB,MAApB0L,GACFE,EAAoBF,GAIpBwhB,gBAACgsB,YAASx5C,QAASutB,GAAiBhO,MAAOA,IACzCiO,gBAACisB,eAAYh4B,UAAWA,GAAWqnB,QAAS,MAC1Ctb,gBAAC0U,IACCvH,YAAaA,EACbwH,oBAAqBA,GAErB3U,gBAACgL,SACDhL,gBAAC6W,IAAiBC,iBAAkBA,IACnClC,mICpDT1oB,EACAL,GAIA,IAAMM,EAAuB,IAAIC,gBAAgBF,GAC3CG,EAAS1b,OAAO2b,YAAYH,GAKlC,MAAO,CAAEI,cAJa,IAAIH,qBACrBC,EACAR,IACFpE,WACqB4E,OAAAA,4JhJAGtE,GAC3B,OAAOC,KAAKD,gFALiBA,GAC7B,OAAOmkC,KAAKnkC,6T4IQd,WACE,OAAmB,MAAfyjC,IAVEj0B,EACa/C,GAAgBzC,GAAME,YACzCu5B,GAAc,IAAIW,cAAY50B,EAA4Brd,WAAY,CACpEud,QAASf,OAAOa,EAA4Bnd,eAUrCoxC,OAbHj0B,iCKJN,OAAOnD,GAAgBrC,GAAME,iEjKqB/B,WACE,OAAOzT,+V6Jy+DT,WACE,OAAOitC,wCKhgEP,OAAOj3B,GAAgBzC,GAAME,mStGe/B,SACE3J,EACA8M,EACAhW,GAIA,YAJAA,IAAAA,EAAO,KAES6K,GAAe3B,GAG7B,OAAO,EAKT,GAFmB,IAAI9D,UAAQ8D,GAAU8jC,oBAGvC,OAAO,EAGT,IAAMC,EAAmBjtB,GAAwB,CAAE9W,SAAAA,EAAUlJ,KAAAA,IAE7D,QAAKitC,IAIkC,IAAI7nC,UACzC6nC,GACAD,qBAGkCvtB,GAAmBvW,EAAU8M,EAAQhW,2SuG3CjCyE,GACxCkO,GAAMM,SAASvT,EAAY,CAAE+E,QAAAA,EAAS/C,YAAa1Q,yBAAiBuM,wECE7C+e,EAAe4wB,GAOtC,OANgBC,uBACd,IAAIxwB,QAAM,CACRliB,SAAUyyC,GtKFY,GsKGtB34C,KAAM64C,YAAUC,WAGb1oC,CAAQ2X,GAAOjU,2SjHLxB,yNkHF2B9P,GACzB,IACMnG,KAAQ0yC,QAD6BvsC,aAAAA,OAQ3C,OANehH,OAAO+G,KAAKlG,GAAK2d,QAAO,SAACC,EAAKs9B,SAC3C,YACKt9B,UACM,YAARs9B,EAAoB,OAASA,GAAOl7C,EAAYk7C,SAElD,IACU,sdCLa,oBAAGC,QAAAA,aAAU,KAAIC,IAAAA,SACrChsB,EAAahK,KACb/Y,EAAS+uC,GAAYC,GACrBp1B,EAXW,SAACk1B,GAAD,OAAqB,IAAYA,EAWlCG,CAAWH,GAQ3BI,eAAkB,CAAEt1B,QAAAA,EAASu1B,OANd,WACTpsB,GACF/iB,KAIiCknC,SAlBtB,6MCGf3Q,GAEA,OAAOhD,GAA8BgD"}