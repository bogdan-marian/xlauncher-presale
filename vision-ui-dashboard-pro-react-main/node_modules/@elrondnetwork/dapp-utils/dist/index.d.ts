/// <reference types="react" />
export declare const Ui: {
    UsdValue: (props: {
        amount: string;
        usd: number;
        "data-testid"?: string | undefined;
    }) => JSX.Element;
    Trim: ({ text, "data-testid": dataTestId, className, }: {
        text: string;
        "data-testid"?: string | undefined;
        className?: string | undefined;
    }) => JSX.Element;
    Denominate: (props: {
        value: string;
        showLastNonZeroDecimal?: boolean | undefined;
        showLabel?: boolean | undefined;
        token?: string | undefined;
        decimals?: number | undefined;
        denomination?: number | undefined;
        erdLabel?: string | undefined;
        "data-testid"?: string | undefined;
    }) => JSX.Element;
};
import denominate from "./operations/denominate";
import nominate from "./operations/nominate";
import getTokenFromData from "./operations/getTokenFromData";
import calculateFeeLimit from "./operations/calculateFeeLimit";
export declare const operations: {
    denominate: typeof denominate;
    nominate: typeof nominate;
    getTokenFromData: typeof getTokenFromData;
    calculateFeeLimit: typeof calculateFeeLimit;
};
export declare const helpers: {
    usdValue: ({ amount, usd, decimals, }: {
        amount: string;
        usd: number;
        decimals?: number | undefined;
    }) => string;
};
export declare const validation: {
    stringIsInteger: (integer: string, positiveNumbersOnly?: boolean) => boolean;
    stringIsFloat: (amount: string) => boolean;
};
